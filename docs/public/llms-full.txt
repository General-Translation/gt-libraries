---
title: Auth
description: Authenticate your project with General Translation
---

## Usage
Source: https://generaltranslation.com/en/docs/cli/auth

```bash
npx gtx-cli auth
```

## Overview

Use this CLI command to generate an API key and project ID for your project.
This command will:

1. Prompt the user to signin to the General Translation dashboard.
2. Generate an API key and project ID for your project.
3. Create a `.env.local` file in the root of your project and add it to your `.gitignore` file (if it doesn't already exist).
4. Add the API key and project ID to the `.env.local` file.


---
title: Configure
description: Configure your project's GT settings
---


## Usage
Source: https://generaltranslation.com/en/docs/cli/configure

```bash
npx gtx-cli configure
```

## Overview

The `configure` command helps you configure your project's GT settings.

It will create a `gt.config.json` file in the root of your project.

The file will contain the following settings:

- `defaultLocale`: The default locale for your project.
- `locales`: An array of [supported locales](/docs/reference/locale-strings#supported-locales) for your project.
- `files`: This is an object that contains information about the content you want to translate.

For more specific information about the `gt.config.json` file, please see the [config docs](/docs/cli/reference/config).


---
title: Generate Source Template
description: How to generate a source template for your project
---
## Usage
Source: https://generaltranslation.com/en/docs/cli/generate

```bash
npx gtx-cli generate
```

## Overview

The `gtx-cli generate` command generates a source file for your project for your default locale and supported locales.

The generated files are compatible with the `gt-next` and `gt-react` libraries, and are the same format used by the `translate` command.

After generating the source files, you can use [local translations](/docs/next/reference/local-tx) to serve the translations to your users.

<Callout type="info">
    This command is only useful if you are using your own translation service.

    If you are using the General Translation API, you should use the `translate` command instead.
</Callout>

## Parameters

| Parameter       | Description                                      | Type    | Optional | Default         |
|-----------------|--------------------------------------------------|---------|----------|-----------------|
| `--src <paths>`   | Specify the source directory(s) to scan                     | `[string]`  | `true`     | `./src && ./app && ./pages && ./components`      |
| `--dictionary <path>`    | Specify a path to the dictionary file                | `string`  | `true`     |                 |
| `--tsconfig, --jsconfig <path>`| Specify a path to the TS or JS config file | `string`  | `true`     |                 |
| `--inline`        | Include inline `<T>` tags in addition to the dictionary     | `boolean` | `true`     | `true`            |
| `--default-locale <locale>`| The source locale for the project                  | `string`  | `true`     |  `en`               |
| `--ignore-errors` | Ignore errors and force translation for valid content       | `flag` | `true`     | `false`           |

## Setup

First, run the `gtx-cli configure` command to configure your project's settings.

```bash
npx gtx-cli configure
```

Then, run the `gtx-cli generate` command to generate template files for your project.

```bash
npx gtx-cli generate
```


### Configuration file

Read more about the `gt.config.json` file [here](/docs/cli/reference/config).


---
title: Automatic Translation
description: How to automatically translate your project using the General Translation CLI tool
---

```bash
npx gtx-cli@latest init
```

## Overview
Source: https://generaltranslation.com/en/docs/cli

The General Translation CLI tool (`gtx-cli`) allows you to automatically translate your project into any of the [supported languages](/docs/reference/locale-strings#supported-locales).

It provides first-class support for [`gt-next`](/docs/react) and [`gt-react`](/docs/react) with your project, allowing you to scan your project for translatable content, translate your project, and generate translation data JSON files.

The CLI tool can also be used to generate translations for third-party i18n libraries like [next-intl](https://next-intl.dev/) or [i18next](https://react.i18next.com/).

Lastly, the CLI tool can be used to translate JSON, Markdown, MDX, JS, and TS files.

<Callout type="warn">
  A Production API key is required for the `translate` command. Get one for free at [generaltranslation.com](https://generaltranslation.com)!
</Callout>

---

Depending on what i18n library your project is using, please follow one of the following tutorials:

* [gt-next](/docs/cli/tutorials/gt)
* [gt-react](/docs/cli/tutorials/gt)
* [next-intl](/docs/cli/tutorials/next-intl-quickstart)
* [i18next](/docs/cli/tutorials/i18next-quickstart)
* [JSON](/docs/cli/tutorials/json)
* [Markdown](/docs/cli/tutorials/mdx)



## Usage

| Command | Description |
| --- | --- |
| [`npx gtx-cli init`](/docs/cli/init) | Run the GT setup wizard. |
| [`npx gtx-cli setup`](/docs/cli/setup) | Step by step setup guide that helps internationalize your React app. |
| [`npx gtx-cli scan`](/docs/cli/scan) | Scans your project for translatable content. Can be used repeatedly to update your project. |
| [`npx gtx-cli translate`](/docs/cli/translate) | Translates your project via the GT API. |
| [`npx gtx-cli generate`](/docs/cli/generate) | Generates a new translation data JSON file. Should be used when using the library standalone. |
| [`npx gtx-cli auth`](/docs/cli/auth) | Generate an API key and project ID for your project. |
| [`npx gtx-cli configure`](/docs/cli/configure) | Configure your project's GT settings. |


---
title: Setup Wizard
description: Run the GT setup wizard
---

## Usage
Source: https://generaltranslation.com/en/docs/cli/init

```bash
npx gtx-cli init
```

Use this command to run the GT setup wizard.
The wizard will:

1. Create a `gt.config.json` file in the root of your project.
2. Install the necessary dependencies for your project.
3. Help you wrap your JSX content with `<T>` tags (in a React-based project).
4. Generate an API key and project ID for your project.


## `gt.config.json`

The `init` command helps you configure your project's GT settings.

It will create a `gt.config.json` file in the root of your project.

The file will contain the following settings:

- `defaultLocale`: The default locale for your project.
- `locales`: An array of [supported locales](/docs/reference/locale-strings#supported-locales) for your project.
- `files`: This is an object that contains information about the content you want to translate.

For more specific information about the `gt.config.json` file, please see the [config docs](/docs/cli/reference/config).

This part of the wizard can also be ran independently via `npx gtx-cli configure`.

## Dependencies

The `init` command will install the following dependencies for your project:

- `gt-react` or `gt-next` (if your project is React-based)
- `gtx-cli` as a dev dependency (if not already installed)

## React-based projects

If your project is React-based, the wizard will help setup your project to use `gt-react` or `gt-next`.

If you are already using a different i18n library, you may need to manually setup your project.

See the [React docs](/docs/react/tutorials/quickstart) or the [Next.js docs](/docs/next/tutorials/quickstart) for more information.

Since the wizard is currently experimental, it is possible that it may not work for all React-based projects.
In these cases, you may need to manually setup your project.

If you encounter any issues, please let us know on [GitHub](https://github.com/generaltranslation/gt/issues).

This part of the wizard can also be ran independently via `npx gtx-cli setup`.

## Credentials

The wizard will help you generate an API key and project ID for your project (if they are not already set up).

Please note that the API key and project ID are not required to use `gt-react` or `gt-next`.

The wizard will add the API key and project ID to your `.env.local` file.
If this file does not exist, the wizard will create it and add it to your `.gitignore` file.

This part of the wizard can also be ran independently via `npx gtx-cli auth`.


---
title: Configuration
description: Config docs for the gt.config.json file
---

## Overview
Source: https://generaltranslation.com/en/docs/cli/reference/config

The `gt.config.json` file is used to configure your project's GT settings. It should be placed in the root of your project.

The CLI setup wizard [`npx gtx-cli init`](/docs/cli/init) will create a `gt.config.json` file for you in your project.

## Configuration

The `gt.config.json` file contains the following settings:

- `defaultLocale`: The default locale for your project. This is the locale that your source content is written in. This is also the fallback locale for your project (if using `gt-next` or `gt-react`).

- `locales`: An array of locales for your project. These are the locales that you want to translate your project into. See the [supported locales](/docs/reference/locale-strings#supported-locales) for more information. 
If you are using `gt-next` or `gt-react`, these are also the locales that your app supports.

- `files`: This is an object that contains information about the content you want to translate.


Here is an skeleton of the `gt.config.json` file:

```json title="gt.config.json"
{
  "defaultLocale": "en",
  "locales": ["fr", "es"],
  "files": {
    "gt": {
      "output": "..."
    },
    "json": {
      "include": [...]
    },
    "mdx": {
      "include": [...]
    },
    "md": {
      "include": [...]
    }
  }
}
```

---

## Supported File Types

`files` should contain a key for each file type that you want to translate.
You can configure your project to mix and match different file types, and have them all be translated.
We currently support the following file types:

- `gt`: General Translation files.
- `json`: JSON files.
- `mdx`: Markdown component (MDX) files.
- `md`: Markdown (MD) files.
- `js`: JavaScript files.
- `ts`: TypeScript files.

Each file type should correspond to an object that contains one or more of the following keys:

- `include`
- `exclude`
- `transform`
- `output`

### `include`

If used, the value of the `include` key should be an array of glob patterns that match the files you want to translate.

You must use the `[locale]` placeholder in your glob patterns to ensure that source files are found correctly, and translated files are saved to the correct location.
The CLI tool will replace the `[locale]` placeholder with the `defaultLocale` value when searching for translatable files.

The CLI tool will save translated files to the corresponding path, with the `[locale]` placeholder replaced with the target locale code.

```json
{
  "include": ["docs/[locale]/**/*.json"]
}
```

### `exclude`

If used, the value of the `exclude` key should be an array of glob patterns that match the files you want to exclude from translation.

The pattern is the same as the `include` pattern.

```json
{
  "exclude": ["docs/[locale]/exclude/**/*.json"]
}
```

### `transform`

If used, the value of the `transform` key should be a string defining a remapping of the file name. It should contain a wildcard `*` that will be replaced with the original file name (anything before the first `.`).

For example, if you want the extension of all of your translated files to have `.[locale].json` instead of `.json`, you can use the following configuration:

```json
{
  "transform": "*.[locale].json"
}
```

<Callout type="info">

This is useful if your docs or i18n framework requires a specific file extension for translated files instead of subdirectory-based locale routing.

</Callout>


### `output`

This key is exclusively used for General Translation files, specifically for saving translations locally. If you are using the GT CDN, this key is not needed.

The value should be a string containing a `[locale]` placeholder indicating the location where the translations will be saved.

For example, if you want to your Spanish translations to a file called `ui.es.json` in the `public/i18n` directory, you should use the following string:

```json 
{
  "output": "public/i18n/[locale].json"
}
```

<Callout type="info">

This option should only be used if you are using `gt-next` or `gt-react`, and want to save translations locally, instead of using the GT CDN.

Currently, only one file for each locale can be generated.

</Callout>

---

## File Type: `gt` [#gt]

**Supported Keys**

- `output` (Required)

**Example**

```json title="gt.config.json"
{
  "defaultLocale": "en",
  "locales": ["fr", "es"],
  "files": {
    "gt": {
      "output": "public/i18n/[locale].json"
    },
  }
}
```

This configuration will the CLI tool to save your French and Spanish translations to the `public/i18n/[locale].json` directory.

By default, the CLI tool will not publish your translations to the GT CDN with this configuration.

---

## File Type: `json` [#json]

**Supported Keys**

- `include` (Required)
- `exclude` (Optional)
- `transform` (Optional)

**Example**

```json title="gt.config.json"
{
  "defaultLocale": "en",
  "locales": ["fr", "es"],
  "files": {
    "json": {
      "include": ["json_files/[locale]/**/*.json"],
      "exclude": ["json_files/[locale]/exclude/**/*.json"]
    }
  }
}
```

Let's say your project's default locale is `en`, and you want to translate your project into `fr` and `es`.

With this configuration, the CLI will search for all JSON files under the subdirectory `json_files/en/` and save the translated files to `json_files/fr/` and `json_files/es/`.

It will ignore any files in the subdirectory `json_files/en/exclude/`.

---

## File Type: `mdx` [#mdx]

**Supported Keys**

- `include` (Required)
- `exclude` (Optional)
- `transform` (Optional)

**Example**

```json title="gt.config.json"
{
  "defaultLocale": "en",
  "locales": ["ja"],
  "files": {
    "mdx": {
      "include": ["content/docs/[locale]/**/*.mdx"],
      "transform": "*.[locale].mdx"
    }
  }
}
```

This configuration will tell the CLI tool to search for all MDX files under the `content/docs/en` directory and save the translated files to the `content/docs/ja` directory.

The `transform` key causes the extension of the translated files to be changed to `.ja.mdx`.

---

## File Type: `md` [#md]

**Supported Keys**

- `include` (Required)
- `exclude` (Optional)
- `transform` (Optional)

**Example**

```json title="gt.config.json"
{
  "defaultLocale": "en",
  "locales": ["ja"],
  "files": {
    "md": {
      "include": ["content/docs/[locale]/**/*.md"],
      "exclude": ["content/docs/[locale]/exclude/**/*.md"],
      "transform": "*.[locale].md"
    }
  }
}
```

This configuration will tell the CLI tool to search for all MD files under the `content/docs/en` directory and save the translated files to the `content/docs/ja` directory.

The `transform` key causes the extension of the translated files to be changed to `.ja.md`.

All files in the `content/docs/en/exclude` directory will be ignored.

---

## File Type: `js` [#js]

**Supported Keys**

- `include` (Required)
- `exclude` (Optional)
- `transform` (Optional)

**Example**

```json title="gt.config.json"
{
  "defaultLocale": "en",
  "locales": ["fr", "es"],
  "files": {
    "js": {
      "include": ["scripts/[locale]/**/*.js"]
    }
  }
}
```

This configuration will tell the CLI tool to search for all JavaScript files under the `scripts/en` directory and save the translated files to the `scripts/fr` and `scripts/es` directories.

The `transform` key causes the extension of the translated files to be changed to `.fr.js` and `.es.js` respectively (from `.js`).

---

## File Type: `ts` [#ts]

**Supported Keys**

- `include` (Required)
- `exclude` (Optional)
- `transform` (Optional)

**Example**

```json title="gt.config.json"
{ 
  "defaultLocale": "en",
  "locales": ["fr", "es"],
  "files": {
    "ts": {
      "include": ["scripts/[locale]/**/*.ts"]
    }
  }
}
```

This configuration will tell the CLI tool to search for all TypeScript files under the `scripts/en` directory and save the translated files to the `scripts/fr` and `scripts/es` directories.

The `transform` key causes the extension of the translated files to be changed to `.fr.ts` and `.es.ts` respectively (from `.ts`).

---

## Example Configuration

Let's break down an example `gt.config.json` file:

```json title="gt.config.json"
{
  "defaultLocale": "en",
  "locales": ["fr", "es"],
  "files": {
    "gt": {
      "output": "public/i18n/[locale].json"
    },
    "mdx": {
      "include": ["content/docs/[locale]/**/*.mdx"],
      "transform": "*.[locale].mdx"
    },
    "json": {
      "include": ["resources/[locale]/**/*.json"],
      "exclude": ["resources/[locale]/exclude/**/*.json"]
    }
  }
}
```

In this example, we are translating the following files with a single call to [`gtx-cli translate`](/docs/cli/translate):

- All MDX files in the `content/docs/en` directory.
- All JSON files in the `resources/en` directory (excluding any files in the `resources/en/exclude` directory).
- All in-line `<T>` components in your React or Next.js project.
- Your `dictionary.[json|js|ts]` file.

GT: Translations will be saved to `public/i18n/es.json` and `public/i18n/fr.json`. These files can be loaded using [`loadTranslations()`](/docs/react/api/config/load-translations).

MDX: Translations will be saved to the `content/docs/fr` and `content/docs/es` directories.
The file extensions will be changed to `.fr.mdx` and `.es.mdx` respectively (from `.mdx`).

JSON: Translations will be saved to the `resources/fr` and `resources/es` directories.

---



## Next Steps

Learn how to use the [init command](/docs/cli/init) to generate this configuration file.


---
title: Usage Guide
description: Usage guide for the GT command line tool
---

## Overview
Source: https://generaltranslation.com/en/docs/cli/reference/usage

This guide will walk you through the process of using General Translation's CLI tool (`gtx-cli`) to translate your project.

The CLI tool is compatible with any i18n library, whether you are using `gt-next`, `gt-react`, or third-party libraries like [`next-intl`](/docs/cli/tutorials/next-intl-quickstart) or [`react-i18next`](/docs/cli/tutorials/react-i18next-quickstart).

The CLI tool is responsible for connecting your project to General Translation's AI translation service.

There are several ways to use the CLI tool, please navigate to the relevant section for your use case.

## Installation

To install the CLI tool, run the following command:


<Tabs items={['npm', 'yarn', 'bun', 'pnpm']}>
  <Tab value="npm">
  ```bash 
  npm i --save-dev gtx-cli
  ``` 
  </Tab>
  <Tab value="yarn">
  ```bash 
  yarn add --dev gtx-cli
  ```
  </Tab>

  <Tab value="bun">
  ```bash 
  bun add --dev gtx-cli
  ```
  </Tab>
  <Tab value="pnpm">
  ```bash 
  pnpm add --save-dev gtx-cli
  ```
  </Tab>
</Tabs>

---

## Use Cases


### Translating GT projects

The CLI tool can be used to translate your projects which use `gt-next` or `gt-react`.

This guide assumes you have already setup your codebase to use `gt-next` or `gt-react` according to the [gt-next](/docs/next/tutorials/quickstart) or [gt-react](/docs/react/tutorials/quickstart) tutorials.


<Accordions>
  <Accordion title="My project is already in multiple languages in development, what's the point of this step?">
    If you followed the quickstart guides for `gt-next` or `gt-react`, your project has only been internationalized in your
    development environment. When shipping your project to production, you will need to actually generate and save the translations.
  
    This step is necessary to ensure that your API keys are not exposed to the public, due to client-side vulnerabilities for frameworks like React.
   
  </Accordion>
</Accordions>

1. First, you will need to configure your project's GT settings.

```bash
npx gtx-cli configure
```
<Callout type="info">
  This command will automatically generate an API key and project ID for your project via the dashboard.

  However, if you would like to manually set the API key and project ID, follow steps 2 and 3 below.
</Callout>

2. Next, you will need to create a project in the [General Translation dashboard](https://generaltranslation.com/dashboard).

After creating a project, you will need to generate a production API key. Navigate to the "API Keys" page and click the "Create API Key" button.

3. Then, add your API key and Project ID to your environment variables.

```bash title=".env"
GT_API_KEY=<your-api-key>
GT_PROJECT_ID=<your-project-id>
```

4. Finally, run the translation command.

```bash
npx gtx-cli translate
```

<Callout type="info">
  By default, the CLI tool will publish the translations to the General Translation CDN, so they are ready to be used in your project.
  If you would like to disable this behavior (for example, if you are loading translations from a different source), add the `--no-publish` flag to the command.
</Callout>

See the [API reference](/docs/cli/translate) for more information on the `translate` command.



### Translating language files (3rd party i18n libraries or standalone GT projects)

The CLI tool allows you to translate language files for 3rd party i18n libraries or with a stand-alone implementation of [`gt-next`](/docs/next/reference/stand-alone) or [`gt-react`](/docs/react/reference/stand-alone).

Most i18n libraries rely on JSON files to store translation data.
The CLI tool can be used to automatically translate these JSON files into your desired languages.

1. First, you will need to configure your project's GT settings.

```bash
npx gtx-cli configure
```
This command will create a `gt.config.json` file in the root of your project, containing some basic configuration settings, such as your project's default locale and supported locales.

<Callout type="info">
  This command will automatically generate an API key and project ID for your project via the dashboard.

  However, if you would like to manually set the API key and project ID, follow steps 2 and 3 below.
</Callout>

2. Next, you will need to create a project in the [General Translation dashboard](https://generaltranslation.com/dashboard).

After creating a project, you will need to generate a production API key. Navigate to the "API Keys" page and click the "Create API Key" button.

3. Then, add your API key and Project ID to your environment variables.

```bash title=".env"
GT_API_KEY=<your-api-key>
GT_PROJECT_ID=<your-project-id>
```

4. Finally, run the translation command.

```bash
npx gtx-cli translate
```

<Callout type="info">
  By default, the CLI tool will look for files to translate according to the `files` property in your `gt.config.json` file.
  It will use the `defaultLocale` specified in your `gt.config.json` file as the source language.

  Translated files will be saved to the corresponding output location specified in your `gt.config.json` file.

  See the [configuration](/docs/cli/reference/config) docs for more information on the `files` property.
</Callout>


<Accordions>
  <Accordion title="Why are my files not being translated?">
    If your files are not being translated, it is likely that your `gt.config.json` file is not configured correctly.

    The `translationsDir` should be set to the directory containing your language files, and contain a wildcard (`*`) to match all language files.

    For example, if your language files are stored in the `src/locales` directory, your `gt.config.json` file should look like this:

    ```json
    {
      "defaultLocale": "en",
      "supportedLocales": ["en", "fr", "es"],
      "translationsDir": "src/locales/*.json"
    }
    ```
  </Accordion>
</Accordions>

### Generating language files for GT projects

The CLI tool can be used to generate language files for projects which use `gt-next` or `gt-react`.

This use case is useful if you would like to use your own translation provider. 

Unlike other i18n libraries, `gt-next` and `gt-react` support in-line translations, meaning there is no traditional JSON file structure containing keys and values for each language.

This means that in order to track changes to text, GT libraries store the hashes of the original text in the source code.

This internal data structure (containing hashes) is hard to work with, and therefore the CLI tool provides a handy command to generate language files for your project.

1. First, you will need to configure your project's GT settings.

```bash
npx gtx-cli configure
```

When asked if you want to save translations on the GT CDN, select the "No" option.

2. Run:

```bash
npx gtx-cli generate
```

This command will generate a source file for your default locale, and all other locales you have configured for your project.

The content for each file is the same, and will be merged with any previous translations you have in your project.

See the [API reference](/docs/cli/generate) for more information on the `generate` command.

---

## Notes
 * [`gtx-cli translate`](/docs/cli/translate) is used to automatically generate translations for your project.
 * If you are using a 3rd party i18n library, you can automatically update all of your translation JSON files every time your project changes. Just add the [`gtx-cli translate`](/docs/cli/translate) command to your build or CD process before the build command to automatically add translations to your project.

## Next steps
 * See the [CLI API reference](/docs/cli) for more information.
 * If you want to see live translations in development (think hot reload), check out the [`<T>` component](/docs/usage/t).

---
title: <T> Wrapping Behavior
description: Specific behavior of how the CLI tool wraps the `<T>` component
---

## Overview
Source: https://generaltranslation.com/en/docs/cli/reference/wrapping

This page describes the exact behavior of how the CLI tool wraps the `<T>` component.

As a rule of thumb, the CLI will wrap the [`<T>`](/docs/next/api/components/t) component around any static, meaningful content.
It will also wrap a [`<Var>`](/docs/next/api/components/var) component around any dynamic subcontent contained within a `<T>` component.

For example, the following will be wrapped in a `<T>` component:
```jsx
<div>Hello, World!</div> -> <T id="SOME_ID"><div>Hello, World!</div></T>
```

but the following will not:
```jsx
<div><img src="logo.png" /></div> -> <div><img src="logo.png" /></div>
```

The CLI tool will always ensure that the final output is valid JSX and correctly uses the `<T>` component.

In some cases, such as with [logical operators](#logical-operators), some human intervention could be useful to ensure better translations with more context.

<Accordions>
  <Accordion title="Why can't <T> components wrap dynamic content?">
    Since the `<T>` component is typically pre-translated and cached, it is important to ensure that the content is not changed at runtime.
    If dynamic content were allowed, every user could potentially see a different translation of the same content.

    If you would like to translate content that changes at runtime, you should use the [`<Tx>`](/docs/next/api/components/t) component instead.
  </Accordion>
  <Accordion title='What is considered "static" content?'>
    Static content is content that cannot change at runtime.
    For example, the following is static:
    ```jsx
    <div>Hello, World!</div>
    ```
    but the following is dynamic:
    ```jsx
    <div>{name}</div>
    ```
  </Accordion>
  <Accordion title='What is considered "meaningful" content?'>
    
Meaningful content is content that could feasibly be translated and has a different meaning in a different language.

For example, this is meaningful:
```jsx
<div>Hello, World!</div> -> <T id="SOME_ID"><div>Hello, World!</div></T>
```
while these are not:
```jsx
<div><img src="logo.png" /></div>
<div><span></span></div>
<div><div></div></div>
<div><CustomButton/></div>
```

Regardless of what language the content is viewed in, the results are always the same.

<Callout type="info">
  Symbols such as '!', '?', '.', and "@" are considered not-meaningful, since they typically have the same meaning across languages and 
  translate to the same symbol.
  
  The regex used to determine if content is meaningful is:
  ```/[\p{L}\p{N}]/u;```
</Callout>
  </Accordion>
</Accordions>

<Callout type="info">
  Please report any bugs or unexpected behavior to us on [Github](https://github.com/generaltranslation/gt/issues).
</Callout>


### JSX expressions

The CLI will automatically wrap expressions `{...}` in [`<Var>`](/docs/next/api/components/var) components.
This is because expressions are typically dynamic. 

```jsx
<div>Hello, {name}</div> -> <T id="SOME_ID"><div>Hello, <Var>{name}</Var></div></T>
```

<Callout type="warn">
  Content contained within a `<Var>` component will not be translated. 
  
  If you would like to translate dynamic content, you should use the [`<Tx>`](/docs/next/api/components/t) component instead.
</Callout>

### Static content in JSX expressions

The exception to the expression-wrapping rule is when the expression contains static content.

For example, the following will not be wrapped in a `<Var>` component:
```jsx
<p>{"Hello," + " World!"}</p> -> <T id="SOME_ID"><p>{"Hello," + " World!"}</p></T>
```


### Template literals in JSX expressions

The CLI will wrap template literals containing quasis (`${}`) in a [`<Var>`](/docs/next/api/components/var) component, since they can be dynamic.
```jsx
<p>{`${temp}`}</p> -> <T id="SOME_ID"><p><Var>{`${temp}`}</Var></p></T>
```

### Logical operators

JSX expressions containing logical operators such as `&&`, `||`, and `?` 
will be wrapped in a [`<Var>`](/docs/next/api/components/var) component,
if a `<T>` component is necessary at the top level. (i.e. if there is other meaningful content outside of the expression)

<Tabs items={["Before", "After"]}>
  <Tab value="Before">
    ```jsx
    <div>Hello, {name && {name}} World!</div>
    ```
  </Tab>
  <Tab value="After">
    ```jsx
    <T id="SOME_ID">
      <div>Hello, <Var>{name && {name}}</Var> World!</div>
    </T>
    ```
  </Tab>
</Tabs>

Within the expression, the CLI will treat elements as if they are completely independent of the rest of the expression.

This means that they will be wrapped in their own `<T>` components (to ensure all content is translatable)

<Tabs items={["Before", "After"]}>
  <Tab value="Before">
    ```jsx
    <div>{name ? <>Hello, </> : <>Goodbye, </>}</div>
    ```
  </Tab>
  <Tab value="After">
    ```jsx
    <T id="SOME_ID">
      <div>
        <Var>
          {name ? <T id="HELLO"><>Hello, </></T> : <T id="GOODBYE"><>Goodbye, </></T>}
        </Var> World!
      </div>
    </T>
    ```
  </Tab>
</Tabs>
<Callout type="warn">
  In cases such as these, you should be using a [`<Branch>`](/docs/next/api/components/branch) or [`<Plural>`](/docs/next/api/components/plural) component instead.

  The CLI tool currently does not automatically use these components in a `<T>` component, so you will need to change the code manually.

  The previous example should be rewritten as:
  ```jsx
  <T id="SOME_ID">
    <div>
      <Branch branch={name == null}
        true={<>Hello, </>}
        false={<>Goodbye, </>}
      />
      World!
    </div>
  </T>
  ```
</Callout>

---
title: Scan
description: Scans your project for translatable content
---
## Usage
Source: https://generaltranslation.com/en/docs/cli/scan

```bash
npx gtx-cli scan
```

## Overview

The `gtx-cli scan` command scans your project for translatable content.
It does this by parsing your project's file tree and using babel to wrap the `<T>` component around static content.
Any dynamic content will be automatically wrapped with `<Var>` components.

<Callout type="info">
    This command is similar to the `setup` command, but it is more straightforward and only wraps the `<T>` component around content.

    It does not add other components like `<GTProvider>`. Thus, we recommend running this command occasionally to ensure all the content in your project is translatable.

    **You should run `setup` the first time you are integrating General Translation into your project.**
</Callout>


```jsx title="src/app/Home.js"
import { T, Var } from 'gt-next'; // [!code highlight]

export default function Home({ user }) {
  return (
    <div>
      <T id="app.home.0">
        {/* [!code highlight] */}
        Hello, World! My name is <Var>{ user.name }</Var>
      </T>
    </div>
  );
}
```

---

## Parameters

| Parameter       | Description                                      | Type    | Optional | Default         |
|-----------------|--------------------------------------------------|---------|----------|-----------------|
| `--src <path>`           | The source directory to scan                     | `string`  | `true`     |  `./src && ./app && ./pages && ./components` |
| `--config <path>`        | The path to the GT config file                   | `string`  | `true`     | `"gt.config.json"` |
| `--disable-ids`   | Disable the automatic generation of IDs for `<T>` components         | `flag` | `true`    | `false`           |
| `--disable-formatting`   | Disable auto-formatting         | `flag` | `true`    | `false`           |


---

## Behavior

### Configuration file

When running the CLI tool for the first time, it will attempt to create a `gt.config.json` file in the root of your project.
This file contains metadata about your project that is used to translate your content.

Read more about the `gt.config.json` file [here](/docs/cli/reference/config).

### The `id` prop

The scan command will automatically generate unique IDs for your `<T>` components.
This is useful for projects that use a lot of `<T>` components and want to avoid manually having to assign each one a unique ID.

This `id` is useful for referencing specific translations in the translation editor and in the console.

To disable this behavior, you can use the `--disable-ids` flag.

### `<T>` injection behavior

#### Basic case

The CLI will wrap JSX elements at the highest possible level.
This means that it will wrap the entire component in a `<T>` component if it is not already wrapped.

```jsx
<div>Hello, World!</div> -> <T id="SOME_ID"><div>Hello, World!</div></T>
```

See the [reference](/docs/cli/reference/wrapping) for more details on how the `<T>` component is wrapped.

### Auto-formatting

The scan command will automatically format the changes it makes to your codebase with Prettier, Biome, or ESLint depending on your project's configuration.

To disable this behavior, you can use the `--disable-formatting` flag.

---
title: React Setup
description: Integrates gt-next or gt-react with your project.
---
## Usage
Source: https://generaltranslation.com/en/docs/cli/setup

```bash
npx gtx-cli setup
```

## Overview

The `gtx-cli setup` command automatically sets up your project for translation with `gt-next` or `gt-react`.
It does this by parsing your project's file tree and using babel to wrap the `<T>` component around static content.
Any dynamic content will be automatically wrapped with `<Var>` components.

This command is run as part of the `init` setup wizard. Additionally, this command can be ran independently via `npx gtx-cli setup`.

This command should be ran **once**, when you are first internationalizing your project.
On subsequent changes, you should use the `scan` command to update your project.

See the [scan](/docs/cli/scan) command for more details.


```jsx title="src/app/Home.js"
import { T, Var } from 'gt-next';  // [!code highlight]

export default function Home({ user }) {
  return (
    <div>
      <T id="app.home.0">
        {/* [!code highlight] */}
        Hello, World! My name is <Var>{ user.name }</Var>
      </T>
    </div>
  );
}
```

If your project is using the Next.js App Router, the setup command will add a `<GTProvider>` component within the appropriate `layout.jsx` file.

---

## Parameters

| Parameter       | Description                                      | Type    | Optional | Default         |
|-----------------|--------------------------------------------------|---------|----------|-----------------|
| `--src <path>`           | The source directory to scan                     | `string`  | `true`     |  `./src && ./app && ./pages && ./components` |
| `--config <path>`        | The path to the GT config file                   | `string`  | `true`     | `"gt.config.json"` |

---

## Behavior

### Configuration file

When running the CLI tool for the first time, it will attempt to create a `gt.config.json` file in the root of your project.
This file contains metadata about your project that is used to translate your content.

Read more about the `gt.config.json` file [here](/docs/cli/reference/config).

### The `id` prop

The setup command gives the option of automatically generating unique IDs for your `<T>` components.
This is useful for projects that use a lot of `<T>` components and want to avoid manually having to assign each one a unique ID.

This `id` is useful for referencing specific translations in the translation editor and in the console.

### `<T>` injection behavior

#### Basic case

The CLI will wrap JSX elements at the highest possible level.
This means that it will wrap the entire component in a `<T>` component if it is not already wrapped.

```jsx
<div>Hello, World!</div> -> <T id="SOME_ID"><div>Hello, World!</div></T>
```

See the [reference](/docs/cli/reference/wrapping) for more details on how the `<T>` component is wrapped.

### `<GTProvider>` behavior

For the Next.js App Router, the setup command will automatically wrap the `<T>` component in a `<GTProvider>` component within the appropriate `layout.jsx` file.

Additionally, it will setup the `withGTConfig` Next.js plugin in the `next.config.js` file for you.

### Auto-formatting

The setup command will automatically format the changes it makes to your codebase with Prettier, Biome, or ESLint depending on your project's configuration.



---
title: Translate
description: How to translate your project
---
## Usage
Source: https://generaltranslation.com/en/docs/cli/translate

<Callout type="error">
    Run this in your CI pipeline **before** you build your Next.js app for production.
</Callout>

```bash
npx gtx-cli translate
```
<Callout type="info">
    **Note:**
    This command requires a production API key! Get one on the [platform](https://generaltranslation.com/dashboard).
</Callout>

## Overview

The `gtx-cli translate` command translates your project. It traverses your project's file tree and translates any content wrapped in a `<T>` component.

Additionally, it includes content from the dictionary file (if one is provided).

This command is the primary way of using the General Translation API and related services.

<Callout type="warn">
    **For Production Use Only!**

    This command is meant for production builds and **should not be used in development**.
    Before running this command, please make sure you are on the branch that will be used for production.
    Remember to also specify your production API key (`GT_API_KEY`) and Project ID (`GT_PROJECT_ID`) in your environment variables.
</Callout>


## Usage

There are four ways to use the `translate` command. Methods 1 and 2 require a production API key:

<Callout type="info">
    We recommend running the setup wizard: [`npx gtx-cli configure`](/docs/cli/configure) to help configure your project before running the `translate` command.
    Depending on how your project is configured, the behavior of the translate command may change.
</Callout>


### Method 1: Translate your project's JSON files. [#translate-json]

If you are using other i18n libraries such as `next-intl`, `react-i18next`, or `next-i18next`, you can use this method to translate your project's JSON files.

Translations will be automatically saved to your codebase.

To use the CLI tool to translate your project's JSON files, modify your `gt.config.json` file to include `json` in the `files` property.
See the [CLI config docs](/docs/cli/reference/config#json) for more details.

```bash
npx gtx-cli translate
```
<Callout type="info">
    The CLI tool will automatically detect your i18n library by reading your `package.json` file, and will translate your JSONs while respecting your i18n library's syntax.
</Callout>

### Method 2: Translate your GT project.

If your project is using `gt-next` or `gt-react`, you can use this method to generate translations for your project.

```bash
npx gtx-cli translate
```

By default, translations are saved to the GT CDN. 

However, if you would like to save the translations to your codebase, add the `gt` property to the `files` object in the `gt.config.json` file.

<Callout type="info">
  `gt-next` and `gt-react` support serving translations locally, as well as using General Translation's public CDN.
  We recommend using the CDN for reduced latency, better performance, and smaller bundle sizes.
</Callout>

See the [CLI config docs](/docs/cli/reference/config#gt) for more details.


### Method 3: Validate your project's `<T>` components and dictionary file. [#validate]

This method is useful for validating your project's `<T>` components and dictionary file.

This ensures that your project is correctly configured and that the translations will be valid and accurate.

No translations will be generated if the `--dry-run` flag is provided.

```bash
npx gtx-cli translate --dry-run
```




---

## Flags

| Parameter       | Description                                      | Type    | Optional | Default         |
|-----------------|--------------------------------------------------|---------|----------|-----------------|
| `--api-key`       | Specify a production API key                                | `string`  | `true`     |                 |
| `--project-id`    | Specify the project ID                                      | `string`  | `true`     |                 |
| `--version-id`    | Specify a version ID (by default, a hash of the content)    | `string`  | `true`     |                 |
| `--config <path>`| Specify a path to the GT config file                       | `string`  | `true`     | `"gt.config.json"`  |
| `--tsconfig, --jsconfig <path>`| Specify a path to the TS or JS config file | `string`  | `true`     |                 |
| `--src <paths>`   | Specify the source directory(s) to scan                     | `[string]`  | `true`     | `./src && ./app && ./pages && ./components`      |
| `--dictionary <path>`    | Specify a path to the dictionary file                | `string`  | `true`     |                 |
| `--inline`        | Include inline `<T>` tags in addition to the dictionary     | `boolean` | `true`     | `true`            |
| `--timeout`       | The timeout for the translation request in seconds          | `number`  | `true`     | `600`              |
| `--new, --locales <locales>`| Locales to translate your project into            | `[string]`  | `true`     |                 |
| `--default-locale <locale>`| The source locale for the project                  | `string`  | `true`     |  `en`               |
| `--ignore-errors` | Ignore errors and force translation for valid content       | `flag` | `true`     | `false`           |
| `--dry-run`       | Dry run the command                                         | `flag` | `true`     | `false`           |
| `--no-wait`       | Do not wait for the translations to complete before exiting | `flag` | `true`     | `false`           |
| `--publish`    | Publish the translations to the CDN                  | `flag` | `true`     | `false`           |

All of these parameters are optional and can be alternatively provided in the `gt.config.json` file.

<Callout type="warn">
    Do not add your API key to the `gt.config.json` file!
    You should set it as an environment variable instead. The CLI will automatically read `GT_API_KEY` if it is set.
</Callout>

There are a few key parameters:

| Parameter       | Description                                      |
|-----------------|--------------------------------------------------|
| `--dry-run` | This flag will cause the CLI to parse and validate your project, but will not communicate with the GT API. This is useful for validating your codebase.
| `--api-key` | Unless you are using `--dry-run`, you must provide a production API key.
| `--project-id` | Similarly, unless you are using `--dry-run`, you must provide a project ID.
| `--publish` | If you are using local translations, and want to make your translations publicly available on the GT CDN, you can use this flag.
| `--new, --locales <locales>` | Locales to translate your project into. These will be appended to the locales specified in your `gt.config.json` file.

### Configuration file

When running the CLI tool for the first time, it will attempt to create a `gt.config.json` file in the root of your project.
This file contains metadata about your project that is used to translate your content.

Read more about the `gt.config.json` file [here](/docs/cli/reference/config).


---
title: GT Libraries
description: Automatically translate your project with GT Libraries
---

## Overview
Source: https://generaltranslation.com/en/docs/cli/tutorials/gt

This tutorial will show you how to automatically manage your project's translation files when using [`gt-next`](/docs/next) or [`gt-react`](/docs/react).

<Callout type="warn">
  **Note:**
  This should only be used when you are shipping a production build. If you are using the GT Libraries in development, this command is not needed.
</Callout>

We will follow these 4 steps:
<Steps>
  <Step>
    Add your environment variables
  </Step>
  <Step>
    Configure your project with the [`npx gtx-cli configure`](/docs/cli/configure) command
  </Step>
  <Step>
    Run [`gtx-cli translate`](/docs/cli/translate#translate-json)
  </Step>
</Steps>

<Callout>
  **Tip:**
  Avoid the hassle of using translation files with the [`<T>` component](/docs/usage/t).
</Callout>

---

## Step 1: Add your environment variables

Add your production API key and project ID to your environment variables.
This is necessary to use the `gtx-cli` tool.
You get these from the [General Translation dashboard](https://generaltranslation.com/dashboard).

```bash title=".env"
GT_API_KEY=<your-api-key>
GT_PROJECT_ID=<your-project-id>
```

## Step 2: Configure your project with the `npx gtx-cli configure` command

Run the `gtx-cli configure` command to configure your project.

```bash
npx gtx-cli configure
```

## Step 3: Add the `gtx-cli translate` command to your build process

Add the `gtx-cli translate` command to your build or CI process before the build command to automatically add translations to your project.

```json title="package.json"
{
  "scripts": {
    "translate": "npx gtx-cli translate",
    "build": "npm run translate && <your build command>"
  }
}
```
This will generate translations for all of your locales and save them to your project.
If you want to commit these files to your repo, you can instead run this command before committing.


You're done! Now your project will automatically update all of your translation JSON files any time your project changes.

---

## Notes
 * You can automatically add translations to your project with the [`gtx-cli translate`](/docs/cli/translate#translate-json) command.
 * If you want to commit your translation files, you can instead run the `gtx-cli translate` command before committing.
 * To configure the output path for your translations, see the [configuration](/docs/cli/reference/config) docs.

## Next steps
 * See the [usage guide](/docs/cli/reference/usage) for the cli tool.
 * If you want to see live translations in development (think hot reload), check out the [`<T>` component](/docs/usage/t).

---
title: i18next
description: Automatically translate your i18next project (<5 min)
---

## Overview
Source: https://generaltranslation.com/en/docs/cli/tutorials/i18next-quickstart

This tutorial will show you how to automatically manage your project's translation files in [`i18next`](https://i18next.com/).


We will follow these 4 steps:
<Steps>
  <Step>
    Add your environment variables
  </Step>
  <Step>
    Install [`gtx-cli`](/docs/cli)
  </Step>
  <Step>
    Create a `gt.config.json` file
  </Step>
  <Step>
    Run [`gtx-cli translate`](/docs/cli/translate#translate-json)
  </Step>
</Steps>

<Callout>
  **Tip:**
  Avoid the hassle of using translation files with the [`<T>` component](/docs/usage/t).
</Callout>

---

## Step 1: Add your environment variables

Add your production API key and project ID to your environment variables.
This is necessary to use the `gtx-cli` tool.
You get these from the [General Translation dashboard](https://generaltranslation.com/dashboard).

```bash title=".env"
GT_API_KEY=<your-api-key>
GT_PROJECT_ID=<your-project-id>
```

## Step 2: Install `gtx-cli`

Install the `gtx-cli` tool in your project.

<Tabs items={['npm', 'yarn', 'bun', 'pnpm']}>
  <Tab value="npm">
  ```bash 
  npm i --save-dev gtx-cli
  ``` 
  </Tab>
  <Tab value="yarn">
  ```bash 
  yarn add --dev gtx-cli
  ```
  </Tab>

  <Tab value="bun">
  ```bash 
  bun add --dev gtx-cli
  ```
  </Tab>
  <Tab value="pnpm">
  ```bash 
  pnpm add --save-dev gtx-cli
  ```
  </Tab>
</Tabs>

## Step 3: Create a `gt.config.json` file

Create a `gt.config.json` file in the root of your project.

```json title="gt.config.json" copy
{
  "defaultLocale": "en",
  "locales": ["zh", "es", "ja"],
  "files": {
    "json": {
      "include": ["messages/[locale]/*.json"]
    },
  },
}
```
Feel free to customize the `gt.config.json` file to your needs. See the [configuration](/docs/cli/reference/config) docs for more information.

Update the `json` file format such that the `include` path matches your project structure.

<Callout>
  Translations will preserve the original string syntax.
</Callout>

## Step 4: Add the `gtx-cli translate` command to your build process

Add the `gtx-cli translate` command to your build or CI process before the build command to automatically add translations to your project.

```json title="package.json"
{
  "scripts": {
    "translate": "npx gtx-cli translate",
    "build": "npm run translate && <your build command>"
  }
}
```
This will generate translations for all of your locales and save them to your project.
If you want to commit these files to your repo, you can instead run this command before committing.


You're done! Now your project will automatically update all of your translation JSON files any time your project changes.

---

## Notes
 * You can automatically add translations to your project with the [`gtx-cli translate`](/docs/cli/translate#translate-json) command.
 * If you want to commit your translation files, you can instead run the `gtx-cli translate` command before committing.
 * To configure the output path for your translations, see the [configuration](/docs/cli/reference/config) docs.

## Next steps
 * See the [usage guide](/docs/cli/reference/usage) for the cli tool.
 * If you want to see live translations in development (think hot reload), check out the [`<T>` component](/docs/usage/t).

---
title: JSON Files
description: How to use General Translation to set up automatic translation for your project's JSON files
---

## Overview
Source: https://generaltranslation.com/en/docs/cli/tutorials/json

`gtx-cli` can be used to automatically translate your project's JSON files, regardless of what i18n library you are using.

<Callout type="info">
  **Note:**
  We currently support custom string syntax and formatting for the following i18n libraries: [`next-intl`](/docs/cli/tutorials/next-intl-quickstart), [`i18next`](/docs/cli/tutorials/i18next-quickstart), [`gt-next`](/docs/cli/tutorials/gt), [`gt-react`](/docs/cli/tutorials/gt).
  
  If you are using a different i18n library, the translation results may not be accurate for strings with custom syntax and formatting (for example, ICU messages).
  Don't see your favorite library? [Please let us know](https://github.com/generaltranslation/gt/issues), and we will add it as soon as we can!
</Callout>

We will follow these 4 steps:
<Steps>
  <Step>
    Add your environment variables
  </Step>
  <Step>
    Install [`gtx-cli`](/docs/cli)
  </Step>
  <Step>
    Create a `gt.config.json` file
  </Step>
  <Step>
    Run [`gtx-cli translate`](/docs/cli/translate#translate-json)
  </Step>
</Steps>

<Callout>
  **Tip:**
  Avoid the hassle of using translation files with the [`<T>` component](/docs/usage/t).
</Callout>

---

## Step 1: Add your environment variables

Add your production API key and project ID to your environment variables.
This is necessary to use the `gtx-cli` tool.
You get these from the [General Translation dashboard](https://generaltranslation.com/dashboard).

```bash title=".env"
GT_API_KEY=<your-api-key>
GT_PROJECT_ID=<your-project-id>
```

## Step 2: Install `gtx-cli`

Install the `gtx-cli` tool in your project.

<Tabs items={['npm', 'yarn', 'bun', 'pnpm']}>
  <Tab value="npm">
  ```bash 
  npm i --save-dev gtx-cli
  ``` 
  </Tab>
  <Tab value="yarn">
  ```bash 
  yarn add --dev gtx-cli
  ```
  </Tab>

  <Tab value="bun">
  ```bash 
  bun add --dev gtx-cli
  ```
  </Tab>
  <Tab value="pnpm">
  ```bash 
  pnpm add --save-dev gtx-cli
  ```
  </Tab>
</Tabs>

## Step 3: Create a `gt.config.json` file

Create a `gt.config.json` file in the root of your project.

```json title="gt.config.json" copy
{
  "defaultLocale": "en",
  "locales": ["zh", "es", "ja"],
  "files": {
    "json": {
      "include": ["i18n/[locale]/*.json"]
    },
  },
}
```
Feel free to customize the `gt.config.json` file to your needs. See the [configuration](/docs/cli/reference/config) docs for more information.

Update the `json` file format such that the `include` path matches your project structure.

<Callout>
  Translations will preserve the original string syntax.
</Callout>

## Step 4: Add the `gtx-cli translate` command to your build process

Add the `gtx-cli translate` command to your build or CI process before the build command to automatically add translations to your project.

```json title="package.json"
{
  "scripts": {
    "translate": "npx gtx-cli translate",
    "build": "npm run translate && <your build command>"
  }
}
```
This will generate translations for all of your locales and save them to your project.
If you want to commit these files to your repo, you can instead run this command before committing.


You're done! Now your project will automatically update all of your translation JSON files any time your project changes.

---

## Notes
 * You can automatically add translations to your project with the [`gtx-cli translate`](/docs/cli/translate#translate-json) command.
 * If you want to commit your translation files, you should run the `gtx-cli translate` command before committing.
 * To configure the output path for your translations, see the [configuration](/docs/cli/reference/config) docs.

## Next steps
 * See the [usage guide](/docs/cli/reference/usage) for the cli tool.
 * If you want to see live translations in development (think hot reload), check out the [`<T>` component](/docs/usage/t).

---
title: Markdown
description: How to use General Translation to set up automatic translation for your project's Markdown files
---

## Overview
Source: https://generaltranslation.com/en/docs/cli/tutorials/mdx

`gtx-cli` can be used to automatically translate your project's Markdown (MD and MDX) files.

<Callout type="info">
  All syntax and formatting present in the original files will be preserved in
  the translated files.
</Callout>

We will follow these 4 steps:

<Steps>
  <Step>
    Add your environment variables
  </Step>
  <Step>
    Install [`gtx-cli`](/docs/cli)
  </Step>
  <Step>
    Configure your project's [`gt.config.json`](/docs/cli/reference/config) file
  </Step>
  <Step>
    Run [`gtx-cli translate`](/docs/cli/translate#translate-mdx)
  </Step>
</Steps>

---

## Step 1: Add your environment variables

Add your production API key and project ID to your environment variables.
This is necessary to use the `gtx-cli` tool.
You get these from the [General Translation dashboard](https://generaltranslation.com/dashboard).

```bash title=".env"
GT_API_KEY=<your-api-key>
GT_PROJECT_ID=<your-project-id>
```

## Step 2: Install `gtx-cli`

Install the `gtx-cli` tool in your project.

<Tabs items={['npm', 'yarn', 'bun', 'pnpm']}>
  <Tab value="npm">
  ```bash 
  npm i --save-dev gtx-cli
  ``` 
  </Tab>
  <Tab value="yarn">
  ```bash 
  yarn add --dev gtx-cli
  ```
  </Tab>

  <Tab value="bun">
  ```bash 
  bun add --dev gtx-cli
  ```
  </Tab>
  <Tab value="pnpm">
  ```bash 
  pnpm add --save-dev gtx-cli
  ```
  </Tab>
</Tabs>

## Step 3: Configure your project's `gt.config.json` file

Create a `gt.config.json` file in the root of your project, with the following content:

```json title="gt.config.json"
{
  "defaultLocale": "en",
  "locales": ["es", "fr"],
  "files": {
    "mdx": {
      "include": ["docs/[locale]/**/*.mdx"]
    }
  }
}
```

Change the `defaultLocale` and `locales` to match your project's locales.

If your files are MD files, you can use the `md` key instead of `mdx`. The string array in the `include` key should be a glob pattern that matches all of your MDX files.

It should use the `[locale]` placeholder to match the locale of the file.

See the [configuration](/docs/cli/reference/config) docs for more information on the `gt.config.json` file.


## Step 4: Add the `gtx-cli translate` command to your build process

Add the `gtx-cli translate` command to your build or CI process before the build command to automatically add translations to your project.

```json title="package.json"
{
  "scripts": {
    "translate": "npx gtx-cli translate",
    "build": "npm run translate && <your build command>"
  }
}
```

This will generate translations for all of your locales and save them to your project.
If you want to commit these files to your repo, you can instead run this command before committing.

You're done! Now your project will automatically update all of your Markdown files any time your project changes.

---

## Notes

- You can automatically add translations to your project with the [`gtx-cli translate`](/docs/cli/translate#translate-json) command.
- If you want to commit your translation files, you should run the `gtx-cli translate` command before committing.
- To configure the output path for your translations, see the [configuration](/docs/cli/reference/config) docs.

## Next steps

- See the [usage guide](/docs/cli/reference/usage) for the cli tool.


---
title: next-intl
description: Automatically translate your next-intl project (<5 min)
---

## Overview
Source: https://generaltranslation.com/en/docs/cli/tutorials/next-intl-quickstart

This tutorial will show you how to automatically manage your project's translation files in [`next-intl`](https://next-intl.dev/).

We will follow these 4 steps:
<Steps>
  <Step>
    Add your environment variables
  </Step>
  <Step>
    Install [`gtx-cli`](/docs/cli)
  </Step>
  <Step>
    Create a `gt.config.json` file
  </Step>
  <Step>
    Run [`gtx-cli translate`](/docs/cli/translate#translate-json)
  </Step>
</Steps>

<Callout>
  **Tip:**
  Avoid the hassle of using translation files with the [`<T>` component](/docs/usage/t).
</Callout>

---

## Step 1: Add your environment variables

Add your production API key and project ID to your environment variables.
This is necessary to use the `gtx-cli` tool.
You get these from the [General Translation dashboard](https://generaltranslation.com/dashboard).

```bash title=".env"
GT_API_KEY=<your-api-key>
GT_PROJECT_ID=<your-project-id>
```

## Step 2: Install `gtx-cli`

Install the `gtx-cli` tool in your project.

<Tabs items={['npm', 'yarn', 'bun', 'pnpm']}>
  <Tab value="npm">
  ```bash 
  npm i --save-dev gtx-cli
  ``` 
  </Tab>
  <Tab value="yarn">
  ```bash 
  yarn add --dev gtx-cli
  ```
  </Tab>

  <Tab value="bun">
  ```bash 
  bun add --dev gtx-cli
  ```
  </Tab>
  <Tab value="pnpm">
  ```bash 
  pnpm add --save-dev gtx-cli
  ```
  </Tab>
</Tabs>

## Step 3: Create a `gt.config.json` file

Create a `gt.config.json` file in the root of your project.

```json title="gt.config.json" copy
{
  "defaultLocale": "en",
  "locales": ["zh", "es", "ja"],
  "files": {
    "json": {
      "include": ["i18n/[locale]/*.json"]
    },
  },
}
```
Feel free to customize the `gt.config.json` file to your needs. See the [configuration](/docs/cli/reference/config) docs for more information.

Update the `json` file format such that the `include` path matches your project structure.

<Callout>
  Translations will preserve the original string syntax.
</Callout>

## Step 4: Add the `gtx-cli translate` command to your build process

Add the `gtx-cli translate` command to your build or CI process before the build command to automatically add translations to your project.

```json title="package.json"
{
  "scripts": {
    "translate": "npx gtx-cli translate",
    "build": "npm run translate && <your build command>"
  }
}
```
This will generate translations for all of your locales and save them to your project.
If you want to commit these files to your repo, you can instead run this command before committing.


You're done! Now your project will automatically update all of your translation JSON files any time your project changes.

---

## Notes
 * You can automatically add translations to your project with the [`gtx-cli translate`](/docs/cli/translate#translate-json) command.
 * If you want to commit your translation files, you can instead run the `gtx-cli translate` command before committing.
 * To configure the output path for your translations, see the [configuration](/docs/cli/reference/config) docs.

## Next steps
 * See the [usage guide](/docs/cli/reference/usage) for the cli tool.
 * If you want to see live translations in development (think hot reload), check out the [`<T>` component](/docs/usage/t).

---
title: Automatic Translation
description: How to automatically translate your project using the General Translation CLI tool
---

```bash
npx gtx-cli@latest init
```

## Overview
Source: https://generaltranslation.com/en/docs/cli/tutorials/quickstart

The General Translation CLI tool (`gtx-cli`) allows you to automatically translate your project into any of the [supported languages](/docs/reference/locale-strings#supported-locales).

It provides first-class support for [`gt-next`](/docs/react) and [`gt-react`](/docs/react) with your project, allowing you to scan your project for translatable content, translate your project, and generate translation data JSON files.

The CLI tool can also be used to generate translations for third-party i18n libraries like [next-intl](https://next-intl.dev/) or [i18next](https://react.i18next.com/).

Lastly, the CLI tool can be used to translate JSON, Markdown, MDX, JS, and TS files.

<Callout type="warn">
  A Production API key is required for the `translate` command. Get one for free at [generaltranslation.com](https://generaltranslation.com)!
</Callout>

---

Depending on what i18n library your project is using, please follow one of the following tutorials:

* [gt-next](/docs/cli/tutorials/gt)
* [gt-react](/docs/cli/tutorials/gt)
* [next-intl](/docs/cli/tutorials/next-intl-quickstart)
* [i18next](/docs/cli/tutorials/i18next-quickstart)
* [JSON](/docs/cli/tutorials/json)
* [Markdown](/docs/cli/tutorials/mdx)



## Usage

| Command | Description |
| --- | --- |
| [`npx gtx-cli init`](/docs/cli/init) | Run the GT setup wizard. |
| [`npx gtx-cli setup`](/docs/cli/setup) | Step by step setup guide that helps internationalize your React app. |
| [`npx gtx-cli scan`](/docs/cli/scan) | Scans your project for translatable content. Can be used repeatedly to update your project. |
| [`npx gtx-cli translate`](/docs/cli/translate) | Translates your project via the GT API. |
| [`npx gtx-cli generate`](/docs/cli/generate) | Generates a new translation data JSON file. Should be used when using the library standalone. |
| [`npx gtx-cli auth`](/docs/cli/auth) | Generate an API key and project ID for your project. |
| [`npx gtx-cli configure`](/docs/cli/configure) | Configure your project's GT settings. |


---
title: FAQs
---
## Technical FAQs
Source: https://generaltranslation.com/en/docs/faqs

### Where does the `<T>` get its translations? What translations does it use?

`<T>` can technically load translations from anywhere depending on how you've configured the library. 
If you have a project ID, the library can hit a free CDN. 
It can also store translations locally, or do a mix of the two. 
See the [load-translations docs](/docs/next/api/config/load-translations#fetching-translations-from-your-bundle) for more details.

During development, so you can see the translations hot-reload when you change content, the `<T>` component hits an API which uses a small AI model to create temporary translations. These translations aren't stored anywhere, they're just served back to the app.

In production, `<T>` won't do this in order to not leak your API keys.

### Why do I have to install the CLI tool?

The CLI tool parses the content inside all `<T>` components and generates translations for that content in advance, 
so that all the translations are ready when your app is deployed to production. 
In development, you don't need it because you can use development API keys to translate on demand. 


### Is there an automatic fallback for missing translations in production?

Yes, if in production, a translation for some content is missing, the library will automatically fallback to the original source text.

### Does the AI translation also work with dynamic content and variables?

The `<T>` component doesn't support translating dynamic content and variables, 
because this means the translations could potentially change with every re-render. 
However, you can still include dynamic content and variables inside a `<T>` by wrapping them with 
`<Var>`, `<Datetime>`, `<Currency>` components. 
This is similar to how other libraries do string interpolation.

For gt-next, there is also a `<Tx>` server-side component which does actually do translations on the spot in production, 
and supports any form of dynamic content, but it requires an API key.

### How does the offline system work? Can I deploy an application with GT without dependency on your servers?

Yes you can, but you'd have to do the translations yourself, 
then load them either from your own bundle or your own CDN. 
See our docs on that: [here](/docs/next/api/config/load-translations#fetching-translations-from-your-bundle).

## Business FAQs

### Do I own my translations?

**Yes.** 

> You, the customer, retain full ownership and rights to any translated output produced through the Services. We make no claim to your output.

For more, see our [Terms of Use](https://generaltranslation.com/terms).

## General FAQs

### What are tokens?

When text is sent to [GT](https://www.generaltranslation.com) APIs, it is broken down into chunks called *tokens*.
Think of tokens as small pieces of your input text, like words or parts of words, that an AI model uses to understand and translate your content.

> A helpful rule of thumb is that one token generally corresponds to ~4 characters of text for common English text. This translates to roughly ¾ of a word (so 100 tokens ~= 75 words).

For example, the string `Hello, world!` has 13 characters, and 4 tokens: `Hello`, `,`, ` world`, and `!`.

If you go over the token limit for your plan, we begin to charge based on token usage. 
We only ever charge based on the length of your input — never the length of the translation.
Read more about our available plans [here](https://generaltranslation.com/pricing).

For example, imagine you have the string `"Hello, world!"`, and your project's languages are `"fr"` (French), `"es"` (Spanish), and "`de"` (German).
Token usage will be calculated as `4 * 3 = 12`. That is, the 4 tokens of `"Hello, world!"`, translated 3 times.

We currently tokenize with OpenAI's `tiktoken`, which is the same tokenizer used by [GPT-4](https://openai.com/index/gpt-4/). You can explore this tokenizer [here](https://platform.openai.com/tokenizer).

### Locales? Languages? Regions? What's the difference?

Throughout this documentation, you will see us use the term *locale* and *language* somewhat interchangeably.
For the most part, they do mean the same thing, but there are some subtle differences, and these will be made clear when necessary.

*Language* refers to a spoken or written form of communication used by humans.

*Region* refers to the area where a language is spoken or written. Of course, the language may remain the same, but vary between regions. For example, Canadian French versus French as spoken in France.

*Locale* is a combination of a language and a region, and is used to specify a particular language in a particular region. For example, `en-US` is English as spoken in the United States.

These differences are detailed further in our documentation on [Locale Strings](/docs/reference/locale-strings).

---
title: Language codes
description: TBD
---
Source: https://generaltranslation.com/en/docs/generaltranslation/codes


---
title: Formatting variables
description: TBD
---
Source: https://generaltranslation.com/en/docs/generaltranslation/formatting


---
title: Project APIs
description: TBD
---
Source: https://generaltranslation.com/en/docs/generaltranslation/project


---
title: Translation APIs
description: TBD
---
Source: https://generaltranslation.com/en/docs/generaltranslation/translation


---
title: Introduction
description: Docs for General Translation's localization libraries
---

## Getting started
Source: https://generaltranslation.com/en/docs/index
We have quickstart guides for many popular React frameworks.
<AllLogoCards />

## What is General Translation?

General Translation is an entire internationalization (i18n) stack that allows you to ship multilingual apps quickly and easily.

![Live translations in action](/live_translations.gif)

General Translation includes the following:

- Open-source developer libraries for React and Next.js
- An AI translation service
- A complete infrastructure package for serving translation content

If you would like to use GT libraries with your own translation provider, please see our [standalone](/docs/reference/standalone) docs.

If you would like to use your own i18n library, but still want to use General Translation's AI translation service, please see our [CLI tool](/docs/cli/tutorials/quickstart) docs.

If you would like to use General Translation to translate your JSON, Markdown, or MDX files, please see our [CLI tool](/docs/cli/tutorials/quickstart) docs.

```bash
npx gtx-cli@latest init
```
Run our setup wizard to get started!

## Features

### ⚛️ Translate entire React components in-line
- A single opening and closing `<T>` component is all you need to translate an entire React component.
  - No need for complex refactoring or messy function calls.
- Content is in-line and in the same location as your code.
  - No keys, strings, or additional files are needed!
- The library manages all i18n logic behind the scenes, so you don't have to.
- Translations are always kept in sync with your source code.
- Translations contain contextual information about the content, so they are more accurate.

```jsx title="Page.jsx" copy
export default function Page() {
  return (
    // [!code highlight]
    <T>
      <p>You can write any JSX as children of the {"<T>"} component.</p>
      <p>
        For example, you could write a <a href="/">link</a> and have the text be
        translated in context.
      </p>
      <div>
        <div>
          <p>Even deeply nested components are translated in context.</p>
          <button>Click me!</button>
        </div>
      </div>
    </T> // [!code highlight]
  );
}
```

### 🔎 Feature parity with existing libraries
- GT libraries also support the same features as existing libraries like `i18next`, `react-intl`, and `next-intl`.
- Features such as dictionaries, plurals, currencies, and automatic routing are all supported.

### 🧠 Free AI-powered translation service
- Our free AI-powered translation service allows you to create translations for your app in seconds.
- **Translation hot reload** will automatically update your translations as you write them.
- HTML content is re-arranged and customized according to the language.

### 🔧 Developer-friendly
- Setup is simple and can be done in minutes.
- All GT libraries are open-source and work standalone.
  - You can use your own translation provider or use our free AI-powered translation service.
- No more wasting time managing translation keys like `t('menu.header.title')`.
  - Just write everything in-line!

See our [Github repo](https://github.com/generaltranslation/gt) for the source code and some example projects.


<Callout>
  These docs are under construction. Please create an issue on our [GitHub repository](https://github.com/generaltranslation/gt-docs/issues)
  if what you're looking for isn't here.
</Callout>
---

## Why choose General Translation?

**General Translation is an entire i18n stack**, including developer libraries, AI translations, and a complete infrastructure package for multilingual apps.

You can mix and match our libraries with your own translation provider, or use our free AI-powered translation service with your own i18n library.

For a seamless, end-to-end i18n experience, we recommend using our libraries with our translation service.

With GT libraries like `gt-react` and `gt-next`, you can:

### 1. Translate entire React components, not just strings

UI passed as the children of the `<T>` component will be translated regardless of how complicated the JSX tree is. For example:

```javascript title="page.jsx"
import { T } from "gt-next";

export default function Page() {
  return (
    // [!code highlight]
    <T>
      <p>Any children of <b>the {`<T>`} component</b> will be translated.</p>
      <p>
        Things like <a href="/">links</a>{', '}
        <button>buttons</button>{', '}
        and even <div> <div> <div> deeply nested components </div> </div> </div>  are translated.
      </p>
    </T> // [!code highlight]
  );
}
```

### 2. Translate both client and server components

With first class support for the Next.js [App Router](https://nextjs.org/docs/app) and
[React Server Components](https://react.dev/reference/rsc/server-components),
you can translate both client and server components.

```jsx title="src/components/MyServerComponent.jsx" copy
import getName from "@/getName";
import { T, Var } from "gt-next";

export default async function MyServerComponent() {
  const name = await getName();

  return (
    <T>
      {/* [!code highlight] */}
      Hello, <Var>{name}</Var>
    </T>
  );
}
```

```jsx title="src/components/MyClientComponent.jsx" copy
"use client";

import { useState } from "react";
import { T, Var } from "gt-next";

export default function MyClientComponent() {
  const [name, setName] = useState("Alice");

  return (
    <T>
      {/* [!code highlight] */}
      Hello, <Var>{name}</Var>
    </T>
  );
}
```

### 3. Write content inline or in dictionaries

JSX content placed inside a `<T>` component is marked for translation:

```jsx title="Page.jsx" copy
import { T } from "gt-next";

export default function Page() {
  return (
    <T>
      {/* [!code highlight] */}
      <p>Hello, World!</p>  {/* translates <p>Hello, World!</p> */}
    </T>
  )
}
```

Alternatively, if you prefer using the historic dictionary approach, you can write your content in a dictionary file:
<Tabs items={['.json', '.js', '.ts']}>
  <Tab value=".json">
  ```json title="dictionary.json" copy
  {
    "greeting": "Hello, World!"
  }
  ```
  </Tab>
  <Tab value=".js">
  ```js title="dictionary.js" copy
  const dictionary = {
    greeting: "Hello, World!"
  }
  export default dictionary;
  ```
  </Tab>
  <Tab value=".ts">
  ```ts title="dictionary.ts" copy
  const dictionary = {
    greeting: "Hello, World!" 
  }
  export default dictionary;
  ```
  </Tab>
</Tabs>
```jsx title="page.jsx" copy
import { useDict } from "gt-next";

export default function Page() {
  const d = useDict();
  return d('greeting'); // translates "Hello, World!" // [!code highlight]
}
```

### 4. View translated content in development

No need to worry about how UI looks in different languages,
**General Translation will automatically translate your content as you write it in real-time.**

Instead of having to continuously revise your UI multiple times in production,
simply write your content in English **once** and let General Translation handle the rest.

Need to see how your UI elements look in German before deploying? No problem, General Translation will automatically translate them for you!

### 5. Translate content on-demand

Apps often need to translate content only known at runtime.
For Next.js, GT libraries support the ability to translate content on demand.

Some common examples include:
 - User-specific information
 - Remotely stored content
 - Content that is generated dynamically

Once the translation is loaded, it will rewrite your component in real time with the new translation content.


## Get started


<Tabs items={['Next.js', 'React']}>
  <Tab value="Next.js">
  Follow the [Quickstart](/docs/next/tutorials/quickstart) guide to ship your first translations.
    <Tabs items={['npm', 'yarn', 'bun', 'pnpm']}>
      <Tab value="npm">
      ```bash 
      npm i gt-next
      ``` 
      </Tab>
      <Tab value="yarn">
      ```bash 
      yarn add gt-next
      ```
      </Tab>

      <Tab value="bun">
      ```bash 
      bun add gt-next
      ```
      </Tab>

      <Tab value="pnpm">
      ```bash 
      pnpm add gt-next
      ```
      </Tab>
    </Tabs>
  </Tab>
  <Tab value="React">
  Follow the [Quickstart](/docs/react/tutorials/quickstart) guide to ship your first translations.
    <Tabs items={['npm', 'yarn', 'bun', 'pnpm']}>
      <Tab value="npm">
      ```bash 
      npm i gt-react
      ``` 
      </Tab>
      <Tab value="yarn">
      ```bash 
      yarn add gt-react
      ```
      </Tab>

      <Tab value="bun">
      ```bash 
      bun add gt-react
      ```
      </Tab>
      <Tab value="pnpm">
      ```bash 
      pnpm add gt-react
      ```
      </Tab>
    </Tabs>
  </Tab>
</Tabs>

Ready to go global? Start translating your app in minutes and reach users worldwide! 

<Cards>
  <Card
    title="Next.js Quickstart"
    href="/docs/next/tutorials/quickstart"
  />
  <Card
    title="React Quickstart"
    href="/docs/react/tutorials/quickstart"
  />
</Cards>


---
title: Dynamic Content
description: A brief overview of working with Dynamic Content in GT.
---

## Overview
Source: https://generaltranslation.com/en/docs/key-concepts/dynamic-content

**Dynamic Content** is generally any content that can change based on the user, context, environment, etc.
This exists in contrast to **Static Content**, which remains the same regardless of the user, context, environment, etc.

<Accordions>
    <Accordion title="What's the difference between dynamic and static content?">
        TL;DR
        * Static Content never changes (raw strings, text, etc.).
        * Dynamic Content can change (names, emails, time, language, etc.).

        **What is Static Content?**

        Static Content generally refers to any raw text that exists in the bundle that is served to your users.
        A good rule of thumb is any text or strings that a developer can read in the source code is static text.

        For example, consider this file:

        ```jsx title="Landing.jsx" copy

        export default function Landing() {
            return (
                <> Welcome to my app!</>
            );
        }
        ```
        
        The text, "Welcome to my app!", is Static Content because it never changes.

        But, what if we wanted to change the page such that it would respond if the user was logged in:

        ```jsx title="Landing.jsx" copy

        export default function Landing(user) {

            if (user) {
                return (
                    <h1> Welcome to my app, {user.name}! </h1>
                );
            }
            
            return (
                <h1> Welcome to my app!</h1>
            );
        }
        ```
        Even though these two phrases are being conditionally rendered, these two phrases are both considered static text.
        Remember our rule of thumb: we can see this content by reading the source code in `landing.jsx`.

        However, `{user.name}` is considered dynamic content, because it can change.
        We cannot know what will get rendered on the user's screen by just reading the `landing.jsx` file.
    </Accordion>
</Accordions>


## "To Tx or not to Tx"
Sometimes, we want to translate dynamic content, but other times we want it to remain the same.


A good example would be a user's email address or name.
Another example might be a bank account balance or a user's SSN.
Such items are (1) not likely to need translation when your app is being rendered in a different language and (2) can vary (in this case between each user).


### Example

```jsx title="Greeting.jsx" copy
import { T, Var } from 'gt-next'

export default function Greeting(name) {
    return (
        <T id='greeting'>
            Hello, <Var>{name}</Var>!
        </T>
    );
}
```

As far as translation goes this has two benefits:
1. You do not have to create a translation for every possible name.
    * Using `<Var>`, we only generate one translation that essentially would look like this:
        * \`¡Hola, $\{name\}!\`
    * If we do not use `<Var>`, we would have to perform an on-demand translation for every unique name:
        * "¡Hola, Alice!", "¡Hola, Bob!", "¡Hola, Charlie!", "¡Hola, David!", ...
2. You also don't have to worry about the names themselves changing into a translated form of their name: (i.e. "¡Hola, Alicia!", "¡Hola, Roberto!", ...).

As you can see, the `<Var>` component should be used to wrap any contents that should remain the same regardless of locale.
This way, we avoid the need to create translations for every possible value of the dynamic content.


By wrapping private information in a `<Var>` component, you can ensure that the information is not sent to the General Translations API.
<Callout>
    **Exceptions**

    The exceptions to the statement above is (1) in the case of a nested `<T>` component used inside of a `<Var>` component (ie, the children of the nested `<T>` component will be translated)
    or (2) when data is passed intentionally to our API via some other means within a child of the `<Var>` component (i.e., a fetch call).
    However, this is not the intended use of the `<Var>` component nor the General Translations API and doing so can harm load times and performance.

</Callout>



---
title: Private Information
description: A brief overview of working with Private Information in GT.
---
## Overview
Source: https://generaltranslation.com/en/docs/key-concepts/private-information
Private information is generally any information that should remain private.
For example, a user's Social Security Number (SSN), Tax Identification Number (TIN), or email address.

In order to keep this information private while translating, we use the `<Var>` component.
The `<Var>` component is used to wrap any content that should not be shared,
and the content inside the `<Var>` component will always remain the same.
This is great for names, emails, addresses, etc.

Sometimes, we do want to display private information, but we still need to reformat it based on the user's preferred languages, regional regulations, etc.
For example, we might want to display a user's bank account balance in their local currency.
In these cases, we instead use either `<Currency>`, `<DateTime>`, or `<Num>` components.


### Example
The `<Var>` component is also useful for displaying private information.

```jsx title="PrivateInfo.jsx" copy
import { T, Var } from 'gt-next'

export default function PrivateInfo(email) {
    return (
        <T id='private-info'>
            Your email address is <Var>{email}</Var>.
        </T>
    );
}
```
The children of the `<Var>` component will not be translated.
Its contents will never be passed to the General Tranlsation API.
Its contents will not be distrubuted to the CDN.

---
title: On-Demand vs Proactive Translation
description: What is the difference between performing translation on-demand and translating ahead of time?
---
Source: https://generaltranslation.com/en/docs/key-concepts/tx-loading


---
title: <Branch>
description: API Reference for the <Branch> component
---

## Overview
Source: https://generaltranslation.com/en/docs/next/api/components/branch

The `<Branch>` component allows you to add conditional logic to a translation.

```jsx
const status = 'active';
<Branch branch={status}
    active={<p>The user is active.</p>}
    inactive={<p>The user is inactive.</p>}
/>
```
You pass a value to the `branch` parameter, and this gets matched with an output value based on the keys you provide.

## Reference

### Props

<TypeTable
  type={{
    "branch": {
        description: 'The name of the branch to render.',
        type: 'string',
        optional: false,
    },
    "children?": {
        description: 'Fallback content',
        type: 'any',
        optional: true,
        default: 'undefined',
    },
    "name?": {
        type: 'string',
        optional: true,
        default: 'undefined',
    },
    "[key]: string": {
        type: 'string | JSX.Element',
        optional: false,
    },
  }}
/>

The `[key]: string` syntax indicates arbitrary keys representing potential branches.
For example, branches like `active` and `inactive` can be added as parameters.

| Prop       | Description                                                                 |
|------------|-----------------------------------------------------------------------------|
| `branch`     | The name of the branch to render.                                           |
| `children`   | Fallback content to render if no matching branch is found.                  |
| `[key]: string` | Branches representing possible content for the given branch value. Each key corresponds to a branch, and its value is the content to render. |

### Returns

`JSX.Element` containing the content corresponding to the specified branch or the fallback content.

### Throws

`Error` if the `branch` prop is not provided or is invalid.

## Examples

### Basic usage
`<Branch>` needs to have a different output for each possible value of the `branch` prop.

In this example, the `user.hairColor` value is used to determine the output.
We have defined props `black`, `brown`, and `blonde` to match the possible values of `user.hairColor`.
```jsx title="BranchExample.jsx" copy
import { Branch } from 'gt-next';

export default function HairColor({ user }) {
  return (
    {/* [!code highlight] */}
    <Branch branch={user.hairColor}
      black={<p>Their hair is dark.</p>}
      brown="Their hair is in the middle." // (you can pass a string if you prefer)
      blonde={<p>Their hair is light.</p>}
    />
  );
}
```

### Fallback content
The `children` will always be used as a fallback if no prop matches the value passed to `branch`.

```jsx title="BranchExample.jsx" copy
import { Branch } from 'gt-next';

export default function HairColor({ user }) {
  return (
    <Branch branch={user.hairColor}
      black={<p>Their hair is dark.</p>}
      brown={<p>Their hair is in the middle.</p>}
      blonde={<p>Their hair is light.</p>}
    >
      <p>Their hair is unknown.</p> // [!code highlight]
    </Branch>
  );
}
```


### Translating `<Branch>`

If you want to translate the content, simply wrap it in a `<T>` component.

```jsx title="BranchExample.jsx" copy
import { T, Branch } from 'gt-next';

export default function HairColor({ user }) {
  return (
    {/* [!code highlight] */}
    <T id="example">
      <Branch branch={user.hairColor}
        black={<p>Their hair is dark.</p>}
        brown={<p>Their hair is in the middle.</p>}
        blonde={<p>Their hair is light.</p>}
      >
        <p>Their hair is unknown.</p> 
      </Branch>
    </T> // [!code highlight]
  );
}
```

### Adding variables
If you want to render dynamic values in the branch, make sure to wrap them in `<Currency>`, `<DateTime>`, `<Num>`, or `<Var>` components.

```jsx title="BranchExample.jsx" copy
import { Branch, T, Var } from 'gt-next';

export default function HairColor({ user }) {
  return (
    <T id="example">
      <Branch branch={user.hairColor}
        black={<p>Their hair is dark.</p>}
        brown={<p>Their hair is in the middle.</p>}
        blonde={<p>Their hair is light.</p>}
      >
      {/* [!code highlight] */}
        <p>Unhandled hair color: <Var>{user.hairColor}</Var></p>
      </Branch>
    </T>
  );
}
```

---


## Notes
 * The keys for branches can be any string value that matches the branch prop. This flexibility makes it easy to adapt `<Branch>` to a wide range of use cases.
 * Combine `<Branch>` with other components, such as `<T>` for translations and [variable components](/docs/next/reference/using-branching-components) for dynamic content, to create rich and localized interfaces.

## Next steps
 * For more advanced usage and examples, refer to [Using Branching Components](/docs/next/reference/using-branching-components).
 * To learn more about variable components like `<Currency>`, `<DateTime>`, `<Num>`, and `<Var>`, see the [Using Variable Components](/docs/next/reference/using-variable-components) documentation.

---
title: <Currency>
description: API Reference for the <Currency> component
---

## Overview
Source: https://generaltranslation.com/en/docs/next/api/components/currency

The `<Currency>` component renders a numerical value as a currency.
The number is formatted based on the current locale and any optional parameters passed.
The currency component only handles formatting and does not perform any exchange rate calculations.

```jsx
<Currency>{100}</Currency>
// Output: $100.00
```

All reformatting is handled locally using the [`Intl.NumberFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) library.

## Reference

### Props

<TypeTable
  type={{
    "children?": {
        type: 'any',
        optional: true,
        default: 'undefined',
    },
    "name?": {
        type: 'string',
        optional: true,
        default: 'undefined',
    },
    "value?": {
        decription: 'Optional value. children will be used for value if not provided.',
        type: 'string | number',
        optional: true,
        default: 'undefined',
    },
    "currency?": {
        type: 'string',
        optional: true,
        default: '"USD"',
    },
    "options?": {
        type: 'Intl.NumberFormatOptions',
        optional: true,
        default: '{}',
    },
    "locales?": {
        type: 'string[]',
        optional: true,
        default: 'undefined',
    },
  }}
/>

### Description
| Prop      | Description                                                                                                                                            |
|-----------|--------------------------------------------------------------------------------------------------------------------------------------------------------|
| `children`  | The content to render inside the component. Typically a number representing the value to be formatted as currency. If provided, it takes precedence over the `value` prop. |
| `name`      | Optional name for the currency field, used for metadata purposes.                                                                                      |
| `value`     | The default value for the currency. Will fallback to children if not provided. Can be a string or number. Strings will be parsed into numbers before formatting.                                  |
| `currency`  | The currency type, such as "USD" or "EUR". This determines the symbol and formatting used for the currency.                                            |
| `options`   | Optional formatting options for the currency, following the [`Intl.NumberFormatOptions` specification](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat). Use this to define styles such as maximum fraction digits, grouping, etc. |
| `locales`   | Optional locales to specify the formatting locale. If not provided, the default user's locale is used. Read more about specifying locales [here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).                                            |

### Returns

`JSX.Element` containing the formatted currency as a string.

---

## Examples
### Basic example

The `<Currency>` component can be used to display localized currency values.

```jsx title="PriceDisplay.jsx" copy
import { Currency } from 'gt-next';

export default function PriceDisplay(item) {
  return (
    <Currency> {item.price} </Currency>
  );
}
```

### Specifying currency
Here we are displaying the price in Euros.

```jsx title="PriceDisplay.jsx" copy
import { Currency } from 'gt-next';

export default function PriceDisplay(item) {
  return (
    <Currency currency="EUR"> {item.price} </Currency> 
  );
}
```

### Translating `<Currency>` components
Say that you want the currency to be displayed in a sentence that is also translated.
You can wrap the `<Currency>` component in a `<T>` component.

```jsx title="PriceDisplay.jsx" copy
import { T, Currency } from 'gt-next';

export default function PriceDisplay(item) {
  return (
    {/* [!code highlight] */}
    <T id="itemPrice">
      The price is <Currency> {item.price} </Currency>.
    </T> // [!code highlight]
  );
}
```

### Custom formatting

Here we are displaying the price in GBP that specifies exactly decimal places and uses the narrow symbol for the currency (i.e., "$100" rather than "US$100").
Read more about the [Intl.NumberFormatOptions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) for more options.

```jsx title="PriceDisplay.jsx" copy
import { Currency } from 'gt-next';

export default function PriceDisplay(item) {
  return (
    <Currency
      currency="GBP"
      options={{ // [!code highlight]
        currencyDisplay: 'narrowSymbol', // [!code highlight]
        minimumFractionDigits: 2, // [!code highlight]
        maximumFractionDigits: 2, // [!code highlight]
      }} // [!code highlight]
    >
      {item.price}
    </Currency>
  );
}
```

---


## Notes
 * The `<Currency>` component is used to format currency values based on the current locale and any optional parameters passed.
 * The currency component only handles formatting and does not perform any exchange rate calculations.
 * The contents of the `<Currency>` component will not be sent to the API for translation.
   All reformatting is done locally using the [`Intl.NumberFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) library.

## Next Steps
 * For more details and usage examples of the `<Currency>` component and other variable components like `<Num>`, `<DateTime>`, and `<Var>`,
   see the [Using Variable Components](/docs/next/reference/using-variable-components) documentation.

---
title: <DateTime>
description: API Reference for the <DateTime> component
---

## Overview
Source: https://generaltranslation.com/en/docs/next/api/components/datetime

The `<DateTime>` component renders a formatted date or time string, supporting customization such as formatting options and locale.
The date or time is formatted according to the current locale and any optional parameters passed.

```jsx
<DateTime>{1738010355}</DateTime>
// Output: 1/27/2025
```

All formatting is handled locally using the [`Intl.DateTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) library.

## Reference

### Props

<TypeTable
  type={{
    "children?": {
        description: 'Date content to be formatted.',
        type: 'any',
        optional: true,
        default: 'undefined',
    },
    "name?": {
        type: 'string',
        optional: true,
        default: 'undefined',
    },
    "value?": {
        type: 'string | number | Date',
        optional: true,
        default: 'undefined',
    },
    "options?": {
        type: 'Intl.DateTimeFormatOptions',
        optional: true,
        default: '{}',
    },
    "locales?": {
        type: 'string[]',
        optional: true,
        default: 'undefined',
    },
  }}
/>

### Description
| Prop Name | Description |
|-----------|-------------|
| `children` | The content to render inside the component. Typically a date or time value. If provided, it takes precedence over the `value` prop. |
| `value`    | The default value for the date or time. Can be a string, number (timestamp), or Date object. |
| `options`  | Optional formatting options for the date or time, following the [`Intl.DateTimeFormatOptions` specification](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat). Use this to define styles such as weekday names, time zones, and more. |
| `locales`  | Optional locales to specify the formatting locale. If not provided, the user's locale is used. Read more about specifying locales [here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).|

### Returns

`JSX.Element` containing the formatted date or time as a string.

---
## Examples

### Basic usage
The `<DateTime>` component can be used to display localized date or time values.

```jsx title="EventDate.jsx" copy
import { DateTime } from 'gt-next';

export default function EventDate(event) {
    return (
        <DateTime> {event.date} </DateTime>. // [!code highlight]
    );
}
```

### Specifying locales
The `<DateTime>` component can be used to display date or time values in a specific locale.

```jsx title="EventDate.jsx" copy

import { DateTime } from 'gt-next';

export default function EventDate(event) {
    return (
        <DateTime locales={['fr-FR']}> {event.date} </DateTime>. // [!code highlight]
    );
}
```


### Translating `<DateTime>`
Say that you want the datetime to be displayed in a sentence that is also being translated.
You can wrap the `<DateTime>` component in a `<T>` component.
```jsx title="EventDate.jsx" copy
import { T, DateTime } from 'gt-next';

export default function EventDate(event) {
    return (
        <T id="eventDate">
            The time of the event is <DateTime> {event.date} </DateTime>. // [!code highlight]
        </T>
    );
}
```

### Custom formatting
The `<DateTime>` component supports custom formatting options.
```jsx title="EventDate.jsx" copy
import { DateTime } from 'gt-next';

export default function EventDate(event) {
    return (
        <DateTime options={{
            dateStyle: 'full', // [!code highlight]
            timeStyle: 'long', // [!code highlight]
            timeZone: 'Australia/Sydney', // [!code highlight]
        }}>
            {event.date}
        </DateTime>.
    );
}
```

---

## Notes
 * The `<DateTime>` component is a variable component that can be used to format date and time values.
 * The component uses the [`Intl.DateTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) library for formatting.

## Next Steps
 * For more details and usage examples of the `<DateTime>` component and other variable components like `<Currency>`, `<Num>`, and `<Var>`,
  see the [Using Variable Components](/docs/next/reference/using-variable-components) documentation.

---
title: <GTProvider>
description: API Reference for the <GTProvider> component
---

## Overview
Source: https://generaltranslation.com/en/docs/next/api/components/gtprovider

The `<GTProvider>` component provides General Translation (GT) context to its children, enabling them to access translated content.
It is required for any client-side translations on your application.

### When to Use

- Wrap your entire application in `<GTProvider>` to enable translations on the client.
- When working with dictionaries, optionally specify an `id` to limit the dictionary data sent to the client, optimizing performance for large dictionaries.
- The `<GTProvider>` component is used for both [inline `<T>`](/docs/next/reference/t-reference) and [dictionary design patterns](/docs/next/reference/dictionary).

## Reference

### Props

<TypeTable
  type={{
    "children": {
      type: 'ReactNode',
      optional: false,
    },
    "id?": {
      type: 'string',
      optional: true,
      default: 'undefined',
    },
  }}
/>

### Description

| Prop | Description |
|-----------|-------------|
| `children` | Any component or the parents of any component that needs to translate or access translation information on the client side. These should include any components using `<T>`, `useGT`, or other translation utilities. |
| `id?` | The ID of a nested dictionary to limit the data sent to the client. This is useful for large projects with extensive dictionaries. |

### Returns

`JSX.Element|undefined` containing the children that were passed to this component.

## Example

### Basic Usage

Wrap your application in `<GTProvider>` to provide translation context to your app.

```jsx title="layout.js" copy
import { GTProvider } from 'gt-next';

export default function RootLayout({ children }) {
    return (
        <html lang="en">
            <body>
                <GTProvider> // [!code highlight]
                    {children}
                </GTProvider> // [!code highlight]
            </body>
        </html>
    );
}
```

### Using the `id` Prop for Subsets

Specify the `id` prop to optimize performance by sending only a subset of the dictionary to the client.

```jsx title="layout.js" copy
import { GTProvider } from 'gt-next';

export default function RootLayout({ children }) {
    return (
        <html lang="en">
            <body>
                <GTProvider id="nested.dictionary.key"> // [!code highlight]
                    {children}
                </GTProvider>
            </body>
        </html>
    );
}
```

---

## Notes
 * The `<GTProvider>` must wrap all `<T>` components and other translation-related components in client components. Read more about it [here](/docs/next/reference/t-reference#gtprovider).
 * For server-side translations, `<GTProvider>` is not required but can still be used.

## Next Steps
 * Learn more about the [`<T>` component](/docs/next/reference/t-reference) for translating text and components.
 * See [i18n configuration](/docs/next/reference/i18n-configuration) for advanced customization options.

---
title: <LocaleSelector>
description: API Reference for the <LocaleSelector> component
---

## Overview
Source: https://generaltranslation.com/en/docs/next/api/components/localeSelector

The `<LocaleSelector>` component is used to select the user's locale.
It is a client side component that provides a dropdown to select the locale.

## Reference

### Returns

A component that allows the user to select their locale.

---

## Examples

### Basic Usage

```jsx
"use client";
import { LocaleSelector } from 'gt-next/client';

export default function MyComponent() {
    return (
        <LocaleSelector />
    );
}
```

---

## Notes
* The `<LocaleSelector>` component allows you to select a different locale for your app.
* The `<LocaleSelector>` component is not available in the server component.

## Next Steps

* Learn more about the [`useLocale()`](/docs/next/api/helpers/useLocale) hook.
* Check out the [`useLocaleSelector()`](/docs/next/api/helpers/useLocaleSelector) hook for defining a custom locale selector.
* Learn more about locale strings [here](/docs/reference/locale-strings).


---
title: <Num>
description: API Reference for the <Num> component
---
## Overview
Source: https://generaltranslation.com/en/docs/next/api/components/num

The `<Num>` component renders a formatted number string in the user's locale, and can be customized with formatting options.
```jsx
<Num>{100}</Num>
// Output: 100
```
All reformatting is handled locally using the [`Intl.NumberFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) library.


## Reference

### Props

<TypeTable
  type={{
    "children?": {
        type: 'any',
        optional: true,
        default: 'undefined',
    },
    "name?": {
        type: 'string',
        optional: true,
        default: 'undefined',
    },
    "value?": {
        type: 'string | number',
        optional: true,
        default: 'undefined',
    },
    "options?": {
        type: 'Intl.NumberFormatOptions',
        optional: true,
        default: '{}',
    },
    "locales?": {
        type: 'string[]',
        optional: true,
        default: 'undefined',
    },
  }}
/>

### Description
| Prop     | Description                                                                                                                                       |
|----------|---------------------------------------------------------------------------------------------------------------------------------------------------|
| `children` | The content to render inside the component. Typically a number, which will be formatted according to the current locale and options. If provided, it takes precedence over the `value` prop. |
| `name`     | Optional name for the number field, used for metadata purposes.                                                                                   |
| `value`    | The default value for the number. Can be a string or number. Strings will be parsed into numbers before formatting.                               |
| `options`  | Optional formatting options for the number, following the [`Intl.NumberFormatOptions`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) specification. Use this to define styles such as currency, decimal precision, etc. |
| `locales`   | Optional locales to specify the formatting locale. If not provided, the default user's locale is used. Read more about specifying locales [here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).                                            |

### Returns

`JSX.Element` containing the formatted number as a string.

---

## Examples

### Basic Example
In this example, `item.quantity` will be reformatted according to the user's locale.

```jsx title="QuantityDisplay.jsx" copy
import { Num } from 'gt-next';

export default function Inventory(item) {
  return (
    <Num> {item.quantity} </Num>  // [!code highlight]
  );
}
```

### Specifying locales
By default, locales are determined by the user's browser settings,
but you can explicitly set the locale for the `<Num>` component.

```jsx title="PriceDisplay.jsx" copy
import { Num } from 'gt-next';

export default function CountDisplay(item) {
  return (
    <Num locales={['fr-FR']}> {item.count} </Num> // [!code highlight]
  );
}
```

### Translating `<Num>` components
Let's say that you want your number to be in a larger sentence that gets translated.
Just add the `<T>` components around the content.

```jsx title="DynamicPriceDisplay.jsx" copy
import { T, Num } from 'gt-next';

export default function DynamicPriceDisplay(item) {
  return (
    <T id="price">
      There are <Num> {item.count} </Num> units available. // [!code highlight]
    </T>
  );
}
```

### Custom formatting
`<Num>` uses the [`Intl.NumberFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) library for formatting.
```jsx
import { Num } from 'gt-next';

export default function CustomFormat(number) {
  return (
    <Num
      options={{ style: "decimal", maximumFractionDigits: 2 }}
    >
      {number}
    </Num>
  );
}
```

---

## Notes
 * The `<Num>` component is used to format numbers according to a user's locale.
 * When inside of a `<T>` component, make sure to wrap all dynamic numbers in a `<Num>` component.

## Next steps
 * For more details and usage examples of the `<Num>` component and other variable components like `<Currency>`, `<DateTime>`, and `<Var>`,
   see the [Using Variable Components](/docs/next/reference/using-variable-components) documentation.

---
title: <Plural>
description: API Reference for the <Plural> component
---

## Overview
Source: https://generaltranslation.com/en/docs/next/api/components/plural

We use the `<Plural>` component for handling conjugating sentences.
Think of the difference between the sentences: "You have one item." and "You have two items."

In English, you have to define two different sentences based on the number of items.
In other languages, you have to define up to six.

```jsx
const count = 1;
<Plural n={count}
  singular={You have one item.}
  plural={You have some items.}
/>
```

## Reference

### Props

<TypeTable
  type={{
    "n": {
      description: 'The number used to determine the plural form.',
      type: 'number',
      optional: false,
    },
    "children?": {
      description: 'Fallback when no plural forms match',
      type: 'any',
      optional: true,
      default: 'undefined',
    },
    "locales?": {
      type: 'string[]',
      optional: true,
      default: 'undefined',
    },
    "[key]: string": {
      type: 'string | JSX.Element',
      optional: false,
    },
  }}
/>

The `[key]: string` syntax indicates arbitrary keys representing potential pluralization branches.
For example, branches like `singular` and `plural` can be added as parameters.

### Description
| Prop Name | Description |
|-----------|-------------|
| `n` | The number used to determine the plural form. This is required for pluralization. |
| `children` | Fallback content to render if no matching plural branch is found. |
| `locales`   | Optional locales to specify the formatting locale. If not provided, the default user's locale is used. Read more about specifying locales [here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).                                            |
| `[key]: string` | Branches representing plural forms. The exact branches depend on the locale. |


### Returns

`JSX.Element` containing the content corresponding to the plural form of `n`, or the fallback content.

### Throws

`Error` if `n` is not provided or is not a valid number.

---

## Which forms should I add?

You only need to use the plural forms in your language.

The possible forms are: `"singular"`, `"plural"`, `"dual"`, `"zero"`, `"one"`, `"two"`, `"few"`, `"many"`, `"other"`.

 * If you are a developer using `"en-US"`, only use two: `"singular"` and `"plural"`.
 * If you are a developer in `"zh-CN"`, only use `"other"`.

Read more about the different forms [here](https://cldr.unicode.org/index/cldr-spec/plural-rules).


---

## Examples

### Basic usage
Use the `<Plural>` component to handle pluralization.

```jsx title="BasicExample.jsx" copy
import { Plural } from 'gt-next';

export default function ItemCount({ count }) {
  return (
    <Plural n={count} // [!code highlight]
      singular={You have one item.}
      plural={You have some items.}
    />
  );
}
```

### Fallbacks
You can provide a fallback in case the value passed to `n` has no matching branches.

```jsx title="FallbackExample.jsx" copy
import { Plural } from 'gt-next';

export default function ItemCount({ count }) {
  return (
    <Plural n={count}
      singular={You have one item.}
    >
      You have some items. // [!code highlight]
    </Plural>
  );
}
```

### Translating plurals
All you have to do to translate, is add the `<T>` component.

```jsx title="PluralExample.jsx" copy
import { T, Plural } from 'gt-next';

export default function ItemCount({ count }) {
  return (
  <T id="itemCount">
    <Plural n={count}
      singular={You have an item.} // [!code highlight]
      plural={You have some items.} // [!code highlight]
    />
  );
}
```

### Adding variables
What if we want to add some variables to the pluralized sentence?

```jsx title="PluralExample.jsx" copy
import { T, Plural, Num } from 'gt-next';

export default function ItemCount({ count }) {
  return (
    <Plural n={count}
      singular={You have <Num>{count}</Num> item.} // [!code highlight]
      plural={You have <Num>{count}</Num> items.} // [!code highlight]
    />
  );
}
```

When inside of a `<T>` component, wrap all dynamic content with a `<Currency>`, `<DateTime>`, `<Num>`, or `<Var>`.
```jsx
<T id="itemCount">
  <Plural n={count}
    singular={You have <Num>{count}</Num> item.} // [!code highlight]
    plural={You have <Num>{count}</Num> items.} // [!code highlight]
  />
</T>
```

---

## Notes
 * The `<Plural>` component is used to handle pluralization.
 * The available plural branches (e.g., one, other, few, many) depend on the locale and follow [Unicode CLDR pluralization rules](https://cldr.unicode.org/index/cldr-spec/plural-rules).

## Next steps
 * For more examples, check out the reference doc on branching components [here](/docs/next/reference/using-branching-components).
 * For more advanced usage, combine `<Plural>` with variable components like `<Currency>`, `<DateTime>`, `<Num>`, and `<Var>`. Read more about variable components [here](/docs/next/reference/using-variable-components).


For a deeper dive into pluralization and branching, visit [Using Branching Components](/docs/next/reference/using-branching-components).

---
title: <T>
description: API Reference for the <T> component
---

## Overview
Source: https://generaltranslation.com/en/docs/next/api/components/t

The `<T>` component is the main translation method in `gt-next`.

```jsx
<T> // [!code highlight]
    Today, I went to
    {" the store"}
    <p>
        to <b>buy</b> some <i>groceries</i>.
    </p>
</T> // [!code highlight]
```

The `<T>` component supports translating plain text as well as complex JSX structures.
Additionally, it provides features for handling variables, plurals, and context-specific translations.

<Callout>
**Buildtime Translation:**
`<T>` translations occur at buildtime.
This means translation happens before deployment to reduce latency.
Make sure to follow the [deployment guide here](/docs/next/tutorials/quickdeploy).
</Callout>

---

## Reference


### Props
<TypeTable
  type={{
    "children": {
        type: 'any',
        optional: false,
    },
    "id": {
        type: 'string',
        optional: false,
    },
    "context?": {
        type: 'string',
        optional: true,
        default: 'undefined',
    },
  }}
/>

### Descriptions
| Prop            | Description                                                                                     |
|-----------------|-------------------------------------------------------------------------------------------------|
| `children`  | The content to be translated. This can include plain text or JSX structures.                    |
| `id`        | A unique identifier for the translation string. This ensures consistent translation across your app. |
| `context`   | Additional context to refine the translation. Useful for resolving ambiguous phrases.           |

### Returns


`React.JSX.Element|undefined` which contains the rendered translation or fallback content based on the provided configuration.

---

## Behavior

### Production
During the CD process, any children inside of a `<T>` will be translated before your application is deployed.
This ensures fast load times for all locales, but it can only translate content known at build time.

Once generated, translations are either (1) stored in the CDN or (2) stored in your app's build output, according to your configuration.
From there, the translated content is served to your users.
If a translation is not found, it will fallback to the originial content.

Make sure to follow the [deployment guide here](/docs/next/tutorials/quickdeploy).

### Development
During development, the `<T>` function will translate content on demand.
This is useful for prototyping what your app will look like in different languages.
Remember to add a Dev API key to your environment to enable this behavior.


While loading, `<T>` will return undefined unless languages are similar (en-US vs en-GB), though this behavior can be customized with render settings.
If an error occurs, `<T>` will return the original content.

You will see a delay during on-demand translation in development.
This delay will not occur during for production builds unless content is explicitly being translated on demand,
i.e., by using [`<Tx>`](/docs/next/api/components/tx) or [`tx()`](/docs/next/api/strings/tx).

---

## Examples

### Basic usage

The `<T>` will translate its children.

```jsx title="SimpleTranslation.jsx" copy
import { T } from 'gt-next';

export default function Greeting() {
    return (
        <T> // [!code highlight]
            Hello, world!
        </T> // [!code highlight]
    );
}
```


### With variables
You can use the `<Var>` component to mark children as variables.
This allows you to mark content that should not be translated.
Usually, `<Var>` components wrap dynamic content.

```jsx title="DynamicGreeting.jsx" copy
import { T, Var } from 'gt-next';

export default function DynamicGreeting(user) {
    return (
        <T>
            Hello, <Var>{user.name}</Var>! // [!code highlight]
        </T>
    );
}
```

### With plurals
The `<T>` component also supports pluralization using the `<Plural>` component.

```jsx title="ItemCount.jsx" copy
import { T, Plural } from 'gt-next';

export default function ItemCount({ count }) {
    return (
        <T>
            <Plural n={count}  // [!code highlight] 
                singular={<>You have an item.</>}  // [!code highlight] 
                plural={<>You have items.</>}  // [!code highlight] 
            />  // [!code highlight]
        </T>
    );
}
```

### Limitations

The `<T>` component does not translate content that is dynamic.

```jsx title="DynamicContent.jsx" copy
import { T } from 'gt-next';

export default function DynamicContent({greeting}) {
    return (
        <T>
            {greeting} // will create an error // [!code highlight]
        </T>
    );
}
```

The `<T>` function translates its descendants.

```jsx title="Example.jsx" copy
import { T } from 'gt-next';

const ValidTranslation = ({ children }) => (<div><b>{children}</b></div>);

const InvalidTranslation = ({ children }) => (<div><b>No translation</b></div>);

export default function Example() {
    return (
        <T>
            <div><b>This is valid!</b></div> // will be translated // [!code highlight]

            <ValidTranslation> // will be translated // [!code highlight]
                Hello, world! // [!code highlight]
            </ValidTranslation> // [!code highlight]

            <InvalidTranslation /> // will not be translated
        </T>
    );
}
```
<Callout>
    **Note:** A good rule of thumb is that any content that is *literally* between the two `<T>` in the file will be translated.
    You can always add another `<T>` to translate the content that is not being translated, though nesting `<T>` components is not recommended.
</Callout>

---
    
## Notes
 * The `<T>` component is designed for translating content in your application. It is the primary method for localization in `gt-next`.
 * Use the `<T>` component to translate plain text or JSX structures, including variables and pluralization.
 * If you use the `<T>` component on the client side, make sure it is wrapped in a [`<GTProvider>`](/docs/next/reference/t-reference#gtprovider) to access the translation context.

## Next steps
 * For on-demand translations, look into the [`<Tx>`](/docs/next/api/components/tx) component.
 * Look into more advanced features see the [`<T>` Reference](/docs/next/reference/t-reference).
 * For translating strings, look into [`tx()`](/docs/next/api/strings/tx), [`getGT()`](/docs/next/api/strings/getGT), and [`useGT()`](/docs/next/api/strings/useGT).
 * Checkout [using variable components](/docs/next/reference/using-variable-components) and [using branching components](/docs/next/reference/using-branching-components) for more advanced translation patterns.

---
title: <Tx>
description: API Reference for the <Tx> component
---


## Overview
Source: https://generaltranslation.com/en/docs/next/api/components/tx

The `<Tx>` component translates jsx content at runtime.

```jsx
{/* [!code highlight] */}
<Tx>
    Today, I went to
    {" the store"}
    <p>
        to <b>buy</b> some <i>groceries</i>.
    </p>
</Tx> // [!code highlight]
```

The `<Tx>` component supports translating plain text as well as complex JSX structures.
Additionally, it provides features for handling variables, plurals, and context-specific translations.
`<Tx>` is server side only.

<Callout>
**Runtime Translation:**
`<Tx>` translations occur at runtime.
This means translation will be performed live.
</Callout>

---

## Reference
### Props
<TypeTable
  type={{
    "children": {
        type: 'any',
        optional: false,
    },
    "context?": {
        type: 'string',
        optional: true,
        default: 'undefined',
    },
    "locale?": {
        type: 'string',
        optional: true,
        default: 'undefined',
    },
  }}
/>

### Descriptions
| Prop            | Description                                                                                     |
|-----------------|-------------------------------------------------------------------------------------------------|
| `children`  | The content to be translated. This can include plain text or JSX structures.                    |
| `context`   | Additional context to refine the translation. Useful for resolving ambiguous phrases.           |
| `locale`    | An optional locale to use for the translation. Will default to browser's most preferred locale that is supported by your app. |

---

## Behavior

`<Tx>` translates jsx at runtime.
This means that translations are performed live, so you can translate content that is only known at runtime.
The trade off is that there is a delay while waiting for an on-demand translation to load is significantly slower.

While loading, `<Tx>` will return undefined unless languages are similar (en-US vs en-GB), though this behavior can be customized with render settings.
If an error occurs, `<Tx>` will return the original content.

Our advice is to translate everything you can at build time using [`<T>`](/docs/next/api/components/t), [`getGT()`](/docs/next/api/strings/useGT), or [`useGT()`](/docs/next/api/strings/useGT),
and only use on-demand translations, like `<Tx>`and [`tx()`](/docs/next/api/strings/tx) when necessary.

Make sure to follow the [deployment guide here](/docs/next/tutorials/quickdeploy).

---

## Examples

### Basic usage

The `<Tx>` component will translate its children at runtime.

```jsx title="SimpleTranslation.jsx" copy
import { Tx } from 'gt-next';

export default function Greeting() {
    return (
        {/* [!code highlight] */}
        <Tx id="greeting">
            Hello, world!
        </Tx> // [!code highlight]
    );
}
```


### With variables
You can use the `<Var>` component to mark children as variables.
This allows you to mark content that should not be translated.

```jsx title="DynamicGreeting.jsx" copy
import { Tx, Var } from 'gt-next';

export default function DynamicGreeting(user) {
    return (
        <Tx>
            {/* [!code highlight] */}
            Hello, <Var>{user.name}</Var>
        </Tx>
    );
}
```

### With plurals
The `<T>` component also supports pluralization using the `<Plural>` component.

```jsx title="ItemCount.jsx" copy
import { Tx, Plural } from 'gt-next';

export default function ItemCount({ count }) {
    return (
        <Tx>
            <Plural n={count}  // [!code highlight] 
                singular={<>You have an item.</>}  // [!code highlight] 
                plural={<>You have items.</>}  // [!code highlight] 
            // [!code highlight]
            />  
        </Tx>
    );
}
```


### Limitations

The `<Tx>` function only translates its descendants.

```jsx title="Example.jsx" copy
import { Tx } from 'gt-next';

const ValidTranslation = ({ children }) => (<div><b>{children}</b></div>);

const InvalidTranslation = ({ children }) => (<div><b>No translation</b></div>);

export default function Example() {
    return (
        <Tx>
            {/* [!code highlight] */}
            <div><b>This is valid!</b></div> // will be translated 

            {/* [!code highlight] */}
            <ValidTranslation> // will be translated 
            {/* [!code highlight] */}
                Hello, world!
            {/* [!code highlight] */}
            </ValidTranslation>

            <InvalidTranslation /> // will not be translated
        </Tx>
    );
}
```
<Callout>
**Note:** A good rule of thumb is that any content that is *literally* between the two `<Tx>` in the file will be translated.
You can always add another `<Tx>` to translate the content that is not being translated, though nesting `<Tx>` components is not recommended.
</Callout>

---
    
## Notes
 * The `<Tx>` component is designed for translating content in your application at runtime.
 * Use the `<Tx>` component to translate plain text or JSX structures, including variables and pluralization.

## Next steps
 * For buildtime translations, look into the [`<T>`](/docs/next/api/components/T) component.
 * Look into more advanced features see the [`<T>` Reference](/docs/next/reference/t-reference).
 * For translating strings, look into [`tx()`](/docs/next/api/strings/tx), [`getGT()`](/docs/next/api/dictionary/getGT), and [`useGT()`](/docs/next/api/dictionary/useGT).
 * Checkout [using variable components](/docs/next/reference/using-variable-components) and [using branching components](/docs/next/reference/using-branching-components) for more advanced translation patterns.

---
title: <Var>
description: API Reference for the <Var> component
---

## Overview
Source: https://generaltranslation.com/en/docs/next/api/components/var
The `<Var>` component is used to render content that should not be translated.
This is useful for rendering variables, code snippets, or other content that should not be translated.
Additionally, this is useful for rendering content that should be kept private such as API Keys or personal information.

```jsx
<Var>{user.name}</Var>
```

The `<Var>` component is always used inside of a `<T>` component.
Think of it as a catch all for dynamic values that do not fit in to the category of `<Currency>`, `<DateTime>`, or `<Num>`.

## Reference

### Props

<TypeTable
    type={{
        "children?": {
            type: 'JSX.Element',
            optional: true,
            default: 'undefined',
        },
        "name?": {
            type: 'string',
            optional: true,
            default: 'undefined',
        },
        "value?": {
            type: 'string',
            optional: true,
            default: 'undefined',
        },
    }}
/>

### Description
| Prop      | Description                                                                                                                                            |
|-----------|--------------------------------------------------------------------------------------------------------------------------------------------------------|
| `children`  | The content to render inside the component. If provided, it will take precedence over value. |
| `value`     | Optional default value to be displayed if children is not provided. Can be a string.                                  |


### Returns
`JSX.Element` containing the content that should not be translated.

---

## Examples

### Basic example
The `<Var>` component must be used inside of a `<T>` component.
```jsx title="Example.jsx" copy
import { T, Var } from 'gt-next'

export default function Example(user) {
  return (
    <T>
      Translate this text!
      Your name is: <Var>{user.name}</Var> // [!code highlight]
      <Var><p>Do not translate this text</p></Var> // [!code highlight]
    </T>
  );
}
```

---

## Notes
 * Variable Components are essential for maintaining untranslatable, dynamic content in translations.
 * Always use Variable Components within a `<T>` component.
 * Components like `<Num>`, `<Currency>`, and `<DateTime>` provide localization features to ensure accurate formatting.

## Next Steps
 * For a more in depth discussion and usage examples for the `<Var>` component and other variable components like `<Currency>`, `<DateTime>`, and `<Num>`,
  see [Using Variable Components](/docs/next/reference/using-variable-components) documentation.
 * Learn more about formatting options for specific Variable Components in the [API Reference](/docs/next/api/components/var).


---
title: loadDictionary()
description: API Reference for the loadDictionary() function.
---

## Overview
Source: https://generaltranslation.com/en/docs/next/api/config/load-dictionary

`loadDictionary()` will load a translation json file for a given locale.

This function is intended for those who which to use `gt-next` as a stand-alone i18n library.

This function is primarily used to migrate existing projects with i18n to General Translation while keeping their existing translations.
Follow [this guide](/docs/next/reference/stand-alone) to set this up.

If multiple translations exist, translations from dictionaries loaded by `loadDictionary()` will always take precedence over others.
`loadDictionary()` only supports the use of JSON files with string translations.


## Reference

### Parameters
<TypeTable
  type={{
    "locale": {
        type: 'string',
        optional: false,
    },
  }}
/>

### Description
| Type | Description |
| ---- | ----------- |
| `locale` | The locale for which translations should be loaded. |

### Returns

A `Promise<any>` that resolves to dictionary mapping ids to translations for the given locale.

---

## Setup

Generally, you will load the dictionary from the `./public/locales` directory.

Define your `loadDictionary()` as the default export for a file with the name `loadDictionary.js` or `loadDictionary.ts` either in the `src/` directory or the root.
Make sure to have the function return a promise that resolves to an object with translations for the given locale.

```jsx title="src/loadDictionary.js"
export default async function loadDictionary(locale) {
  const translations = await import(`../public/locales/${locale}.json`);
  return translations.default;
}
```


<Callout>
  **Question:** What's the difference between [`loadTranslations()`](/docs/next/api/config/load-translations) and [`loadDictionary()`](/docs/next/api/config/load-dictionary)?

  * [`loadTranslations()`](/docs/next/api/config/load-translations) is used to define custom loading behavior for fetching translations for your app.
  This could be getting translations from a CDN, a database, or your app's bundle.
  These are usually machine generated translations, managed by the cli tool, and not very user friendly to edit.
  * [`loadDictionary()`](/docs/next/api/config/load-dictionary) is intended for implementations of `gt-next` as a standalone library.
  Users bring their own translations and no translation infrastructure is used.
</Callout>

---

## Notes
 * `loadDictionary()` is used to load custom translations for your app.
 * Dictionaries loaded by `loadDictionary()` will take precedence over translations loaded by [`loadTranslations()`](/docs/next/api/config/load-translations).

## Next steps
 * If you want to write your own translations check out [custom translations](/docs/next/reference/stand-alone).
 * See [`loadTranslations()`](/docs/next/api/config/load-translations) for more information on writing a custom translation loader.



---
title: loadTranslations()
description: API Reference for the loadTranslations() function.
---

## Overview
Source: https://generaltranslation.com/en/docs/next/api/config/load-translations


Use `loadTranslations()` to specify translation loading behavior.
By default, your app will load translations from the GT CDN in production.
You can specify a `loadTranslations()` function to load translations from a different source, such as:
 * From your app's bundle (most common)
 * From a database
 * From an API
 * From a different CDN

We have integrated support for loading translations from local files in your app's bundle.
Follow [this guide](/docs/next/reference/local-tx) to set up local translations in your Next.js app.

If you are looking to manually define your own translations, check out the [custom translations guide](/docs/next/reference/stand-alone)
 and the [`loadDictionary()`](/docs/next/api/config/load-dictionary) function.

## Reference

### Parameters
<TypeTable
  type={{
    "locale": {
        type: 'string',
        optional: false,
    },
  }}
/>

### Description
| Type | Description |
| ---- | ----------- |
| `locale` | The locale for which translations should be loaded. |

### Returns

A `Promise<any>` that resolves to dictionary mapping ids to translations for the given locale.

---

## Setup

Define your `loadTranslations()` as the default export for a file with the name `loadTranslations.js` or `loadTranslations.ts` either in the `src/` directory or the root.
Make sure to have the function return a promise that resolves to an object with translations for the given locale.

```js title="src/loadTranslations.js"
export default async function loadTranslations(locale) {
  const translations = await import(`../public/locales/${locale}.json`);
  return translations.default;
};
```

If you want to use a different name or path, pass the relative path through the `loadTranslationsPath` parameter in [`withGTConfig()`](/docs/next/api/config/withGTConfig).

---



## Examples

### Fetching translations from your bundle

```js title="src/loadTranslations.js"
export default async function loadTranslations(locale) {
  const translations = await import(`../public/locales/${locale}.json`);
  return translations.default;
};
```

When configured to use [local translations](/docs/next/reference/local-tx), the [`gtx-cli translate`](/docs/cli/translate) command,
will save translations in your project's file tree.

You can  translation files for your bundle with this command:

```bash
npx gtx-cli translate --no-publish --translations-dir ./public/locales
```



### Load translations from a CDN

```js title="loadTranslations.js"
export default async function loadTranslations(locale) {
  try {
    const translations = await fetch(`https://your-cdn.com/translations/${locale}.json`);
    const data = await translations.json();
    return data;
  } catch (e) {
    console.error(e);
    return {};
  }
};
```

### Load translations from your own database

```js title="loadTranslations.js"
export default async function loadTranslations(locale) {
  try {
    const translations = await prisma.translation.findUnique({
      where: {
        locale: locale,
      },
    });
    return translations;
  } catch (e) {
    console.error(e);
    return {};
  }
};
```


<Callout>
  **Question:** What's the difference between [`loadTranslations()`](/docs/next/api/config/load-translations) and [`loadDictionary()`](/docs/next/api/config/load-dictionary)?

  * [`loadTranslations()`](/docs/next/api/config/load-translations) is used to define custom loading behavior for fetching translations for your app.
  This could be getting translations from a CDN, a database, or your app's bundle.
  These are usually machine generated translations, managed by the cli tool, and not very user friendly to edit.
  * [`loadDictionary()`](/docs/next/api/config/load-dictionary) is intended for implementations of `gt-next` as a standalone library.
  Users bring their own translations and no translation infrastructure is used.
</Callout>

---

## Notes
 * `loadTranslations()` gives you the ability to customize how translations are loaded in your app in production.
 * Its most common use case is for adding [local translations](/docs/next/reference/local-tx)

## Next steps
 * Learn about why you might want to use [local translations](/docs/next/reference/local-tx)
 * Add your own translations with the [custom translations guide](/docs/next/reference/stand-alone)



---
title: withGTConfig()
description: API Reference for the withGTConfig(), formerly initGT()
---

## Overview
Source: https://generaltranslation.com/en/docs/next/api/config/withGTConfig

`withGTConfig()` is the primary way to configure the `gt-next` library.
It directly wraps a `NextConfig` object.

```js title="next.config.mjs"
import { withGTConfig } from 'gt-next/config';

const nextConfig = {
    // your existing next.config.js
}

export default withGTConfig(nextConfig, {
  defaultLocale: 'en-US',
  locales: ['en-US', 'es', 'fr'],
});
```

<Callout>
**Legacy**

`initGT()` is the legacy way to configure the `gt-next` library. It returns a function callback which is then called on the `NextConfig` object.
The props for both functions are the same, with the exception that `withGTProps` requires `NextConfig` to also be passed in.
</Callout>

It is not required to use `withGTConfig()` to enable translation functionality, but it is recommended to configure the library to suit your needs.

Use `withGTConfig()` to:
 * Configure supported languages and default locale (a.k.a fallback language).
 * Set API keys and project IDs for accessing GT services.
 * Set loading behavior.
 * Configure timeout settings.
 * Set up custom endpoints.
 * Customize translation behavior, caching, and request batching.

 <Callout>
    `withGTConfig()` must be used in your `next.config.js` file to enable translation functionality.
</Callout>

## Reference

### Required Props 

<TypeTable
  type={{
    "nextConfig": {
      type: 'NextConfig',
      optional: false,
    },
  }}
/>

### Recommended Props [#props]
<TypeTable
  type={{
    "defaultLocale?": {
        type: 'string',
        optional: true,
        default: "locales[0] || 'en'"
    },
    "locales?": {
        type: 'string[]',
        optional: true,
        default: 'undefined',
    },
    "description?": {
        type: 'string',
        optional: true,
        default: 'undefined',
    },
  }}
/>

| Prop           | Description                                                                 |
|----------------|-----------------------------------------------------------------------------|
| `defaultLocale`| Default locale for the application. English will be the fallback language when none is specified. |
| `locales`      | An exclusive list of supported locales for the application. If a non-supported request is received will reroute to the browser's next-preferred language in the list. Will fallback to `defaultLocale` if no matches can be found. |
| `description`  | A natural language description of the site, used to aid translation.         |

### Advanced Props [#advanced-props]
<TypeTable
    type={{
        "projectId?": {
                type: 'string',
                optional: true,
        },
        "apiKey?": {
                type: 'string',
                optional: true,
        },
        "devApiKey?": {
                type: 'string',
                optional: true,
        },
        "preferredModelProvider?": {
                type: '"anthropic" | "openai"',
                optional: true,
        },
        "runtimeUrl?": {
                type: 'string',
                optional: true,
        },
        "cacheUrl?": {
                type: 'string',
                optional: true,
        },
        "cacheExpiryTime?": {
            type: 'number',
            optional: true,
            default: 60000,
        },
        "renderSettings?": {
            type: 'RenderSettings',
            optional: true,
        },
        "maxConcurrentRequests?": {
            type: 'number',
            optional: true,
            default: 100,
        },
        "batchInterval?": {
            type: 'number',
            optional: true,
            default: 50,
        },
        "maxBatchSize?": {
            type: 'number',
            optional: true,
            default: 25,
        },
        "i18n?": {
            type: 'string',
            optional: true,
        },
        "dictionary?": {
            type: 'string',
            optional: true,
        },
    }}
/>


| Prop                     | Description                                                                                                                                                                                                 |
|--------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| `projectId`              | Project ID, which can be included here or as an environment variable.                                                                                         |
| `apiKey`                 | Though not recommended, an API key, which can be included here. It can also be included as an environment variable.                                                                                           |
| `devApiKey`              | Though not recommended, a development API key, which can be included here. It can also be included as an environment variable.                                                                         |
| `preferredModelProvider` | Your first choice AI model provider. Currently only [Anthropic](https://anthropic.com) or [OpenAI](https://openai.com) are enabled. Leave this blank and we'll figure out the best provider on a translation-by-translation basis. In periods of high usage or when a provider is disabled, we can't guarantee that your preferred provider will be used. |
| `runtimeUrl`             | Base URL for the GT API. To disable automatic translation, set this to an empty string.                                                                                                                      |
| `cacheUrl`               | URL where cached translations are stored. Can be customized to point to a custom cache server.                                                                                                               |
| `cacheExpiryTime`        | Time in milliseconds before locally cached translations expire.                                                                                                                                                     |
| `renderSettings`         | An object specifying loading behavior for runtime translations.                                                                                                         |
| `maxConcurrentRequests` | Maximum number of concurrent translation requests allowed to the GT API.                                                                                                                                    |
| `maxBatchSize`           | Maximum number of translations to batch together before sending a request.                                                                                                                                   |
| `batchInterval`         | Interval in milliseconds between batched translation requests. Helps control the rate at which requests are sent.                                                                                           |
| `i18n`                   | Optional configuration filepath for custom `getLocale()` functions. If provided as a string, it will be resolved as a path. Otherwise, defaults are used (recommended).                                      |
| `dictionary`             | Optional configuration filepath for the dictionary. Similar to `i18n`, it accepts a string to specify a custom path. Dictionaries called `dictionary.js` (or `.jsx`, `.ts`, `.tsx` etc.) and placed at the root or in the `src` folder are supported by default. |



### Returns

A function `(NextConfig) => NextConfig` that enhances the Next.js configuration object with the specified GT settings.
 
### Exceptions

Throws and `Error` if the `projectId` is missing and default URLs are used, or if the API key is required and missing.

---

## Render settings

Render settings controls the behavior of translations while they are loading.
This only applies to translations that are happening at runtime.
If the translation is cached, response time is too low to justify loading behavior.

<TypeTable
  type={{
    method: {
        description: 'The method used to render the page.',
        type: '"skeleton" | "replace" | "default"',
        optional: false,
        default: "default"
    },
    timout: {
        description: 'The time in milliseconds before the method times out.',
        type: 'number',
        optional: true,
        default: 8000,
    },
  }}
/>
| Prop      | Description                                                                 |
|-----------|-----------------------------------------------------------------------------|
| `method`  | The method used to render the page. Options are `skeleton`, `replace`, and `default`. |
| `timeout` | The time in milliseconds before the method times out. Default is 8000 ms.    |

### Render methods
 * `skeleton`: Renders a fragment.
 * `replace`: Renders content in default language while waiting.
 * `default`: For locales with the same language (ie `en-US` and `en-GB`) behaves like replace. For locales with different languages (ie `en-US` and `fr`), behaves like skeleton.

### Timeout
Timeouts only apply to runtime translations, or translations that need to be performed on demand as they have not been cached.

Timeouts are set to 8 seconds by default.
This design decision is to facilitate vercel users who have a default 10-second timeout for serverless functions on the free plan.

---

## Examples


### Supported locales [#supported-locales]
This example configures `gt-next` with English (`en-US`) as the default locale.
It exclusively supports translations in Spanish (`es`) and French (`fr`), and provides a description for context-aware translation.

The site will fallback to the best suited language if none of the locales match.
It will look for matching languages (i.e., `en-US` and `en-GB`), as well as the other preferred languages the user has set in their browser.
If all else fails, then it will fallback to the default language.

<Callout>
    If you want to support all languages, leave `locales` blank.
    Additionally, locales can be configured on the dashboard.
</Callout>

```js title="next.config.mjs" copy
import { withGTConfig } from 'gt-next/config';

const nextConfig = {
  // Your other next.js configurations
}

export default withGTConfig(nextConfig, {
  defaultLocale: 'en-US',
  locales: ['en-US', 'es', 'fr'],
  description: 'A personal blog about technology and travel',
});
```
### Render settings
This example configures `gt-next` to render a skeleton while waiting for translations to load.
If the translation takes longer than 8 seconds, the method will time out and render the default language content.

```js title="next.config.mjs" copy
import { withGTConfig } from 'gt-next/config';

const nextConfig = {
  // Your other next.js configurations
};

// locales field is left empty, so this configuration supports all 100+ languages
export default withGTConfig(nextConfig, {
  defaultLocale: 'en-US',
  renderSettings: {
    method: 'skeleton',
    timeout: 10000,
  },
});
```
---

## Notes
 * `withGTConfig()` integrates GT translation functionality into your Next.js app and must be used in the root configuration file.
 * Parameters like `apiKey` and `projectId` can be set directly in the configuration or as environment variables.
 * Advanced parameters like `renderSettings` and `_batchInterval` allow fine-grained control over translation behavior and performance.

## Next Steps
 * Add [translation to your CD process](/docs/next/tutorials/quickdeploy).
 * Read more about [i18n configuration](/docs/next/reference/i18n-configuration) in our reference guide.

---
title: getDict()
description: API Reference for the getDict server-side translation function
---

## Overview
Source: https://generaltranslation.com/en/docs/next/api/dictionary/getDict

`getDict()` is used to get string translations from the [translation dictionary](/docs/next/reference/dictionary) for server-side components.

```jsx
const d = await getDict(); // Get the translation function
d('greeting.hello'); // pass the id to get a translation
```

`getDict()` supports:
  * Translation of string and jsx content.
  * Variable insertion and conditional logic within translations.
  * Optional id prefixing.

For client-side translations, see [`useDict()`](/docs/next/api/dictionary/useDict).

<Callout>
  `getDict()` and `useDict()` use a [dictionary](/docs/next/reference/dictionary) to store all content for translation.
  This is different from using the [`<T>` component](/docs/next/reference/t-reference) for translation.
  If you are interested in only using `<T>` components for translation, then this document is not relevant.
</Callout>

## Reference

### Props

<TypeTable
  type={{
    "id?": {
        type: 'string',
        optional: true,
        default: 'undefined',
    },
  }}
/>

### Description
| Prop | Description |
| ---- | ----------- |
| `id` | An optional prefix to prepend to all translation keys. This is useful for working with nested dictionary values. |


### Returns

A promise of a translation function `d()` that, given an id, will return the translated version of the corresponding entry

```jsx
Promise<(id: string, options?: DictionaryTranslationOptions) => React.ReactNode>
```

| Name                  | Type | Description                                                                 |
|-----------------------|--|-----------------------------------------------------------------------------|
| `id`             | `string` | The id of the entry to be translated                                     |
| `options?`            | [`DictionaryTranslationOptions`](/docs/react/api/types/DictionaryTranslationOptions) | Translation options to customize the behavior of `d()`. |


---

## Examples

### Basic Usage
Every entry in your dictionary gets translated.

```jsx title="dictionary.jsx" copy
const dictionary = {
  greeting: <>Hello, Alice!</>, // [!code highlight]
};
export default dictionary;
```

When we want to access these entries (on the server side), we call `getDict()`.
This returns a function that accepts the key of a translation from the dictionary.

```jsx title="TranslateGreeting.jsx" copy
import { getDict } from 'gt-next/server';

export default async function TranslateGreeting() {
  
  const d = await getDict(); // [!code highlight]

  return (
    <p>
      {d('greeting')} // Hello, Alice // [!code highlight]
    </p>
  );
}
```

### Using variables [#variables]
In order to pass values, you must (1) assign an identifier and (2) reference the identifier when calling the `d()` function.

In this example, we use `{}` to pass variables to the translations.
In the dictionary, we assign identifier `{userName}`.


```jsx title="dictionary.jsx" copy
// [!code word:userName]
const dictionary = {
  greeting: "Hello, {userName}!", // [!code highlight]
};
export default dictionary;
```

```jsx title="TranslateGreeting.jsx" copy
// [!code word:userName]
import { getDict } from 'gt-next/server';

export default async function TranslateGreeting() {
  const d = await getDict();
  
  // Hello Alice!
  const greetingAlice = d('greeting', { userName: "Alice" }); // [!code highlight]

  return (
    <p>
      {greetingAlice}
    </p>
  );
}
```

### Using prefixes
We can use prefixes to only fetch a subset of the dictionary.
```jsx  title="dictionary.jsx" copy
const dictionary = {
  prefix1: { // [!code highlight]
    prefix2: { // [!code highlight]
      greeting: "Hello, Bob",
    }
  }
};
export default dictionary;
```
Because we added the value `'prefix1.prefix2'` to the `getDict` method, all of the keys are prefixed with `prefix1.prefix2`:
```jsx title="UserDetails.jsx" copy
import { getDict } from 'gt-next/server';

export default function UserDetails() {
  const d = await getDict('prefix1.prefix2'); // [!code highlight]
  return (
    <div>
      <p>{d('greeting')}</p> // greeting => prefix1.prefix2.greeting // [!code highlight]
    </div>
  );
}
```
---

## Notes
 * The `getDict()` function allows you to access dictionary translations on the server side.

## Next Steps
 * See [`useDict()`](/docs/next/api/dictionary/useDict) for the client-side equivalent of `getDict()`.
 * Learn more about using dictionaries in the [dictionaries reference](/docs/next/reference/dictionary).

---
title: useDict()
description: API Reference for the useDict hook
---

## Overview
Source: https://generaltranslation.com/en/docs/next/api/dictionary/useDict

`useDict()` is used to access string translations from the [translation dictionary](/docs/next/reference/dictionary) for client-side components.
It must be used within a component wrapped by a [`<GTProvider>`](/docs/next/api/components/gtprovider).

```jsx
const d = useDict(); // Get the translation function
d('greeting.hello'); // pass the id to get a translation
```

For server-side translations, see [`getDict()`](/docs/next/api/dictionary/getDict).

<Callout>
  `getDict()` and `useDict()` use a [dictionary](/docs/next/reference/dictionary) to store all content for translation.
  This is different from using the [`<T>` component](/docs/next/reference/t-reference) for translation.
  If you are interested in only using `<T>` components for translation, then this document is not relevant.
</Callout>

## Reference

### Parameters

<TypeTable
  type={{
    "id?": {
        type: 'string',
        optional: true,
        default: 'undefined',
    },
  }}
/>

### Description

| Prop | Description |
| ---- | ----------- |
| `id` | An optional prefix to prepend to all translation keys. This is useful for working with nested dictionary values.|

### Returns

A translation function `d()` that, given an id, will return the translated version of the corresponding entry

```jsx
(id: string, options?: DictionaryTranslationOptions) => React.ReactNode
```

| Name                  | Type | Description                                                                 |
|-----------------------|--|-----------------------------------------------------------------------------|
| `id`             | `string` | The id of the entry to be translated                                     |
| `options?`            | [`DictionaryTranslationOptions`](/docs/react/api/types/DictionaryTranslationOptions) | Translation options to customize the behavior of `d()`. |

---

## Examples

### Basic Usages
Every entry in your dictionary gets translated.

```jsx title="dictionary.jsx" copy
const dictionary = {
  greeting: "Hello, Bob", // [!code highlight]
};
export default dictionary;
```

When we want to access these entries (on the client side), we call `useDict()`.
This returns a function that accepts the key of a translation from the dictionary.

```jsx title="TranslateGreeting.jsx" copy
"use client";
import { useDict } from 'gt-next/client';

export default async function TranslateGreeting() {
  const d = useDict(); // [!code highlight]
  return (
    <p>
      {d('greeting')} // Hello, Alice // [!code highlight]
    </p>
  );
}
```

### Using variables [#variables]
In order to pass values, you must (1) assign an identifier and (2) reference the identifier when calling the `d()` function.

In this example, we use `{}` to pass variables to the translations.
In the dictionary, we assign identifier `{userName}`.

```jsx title="dictionary.jsx" copy
// [!code word:userName]
const dictionary = {
  greeting: "Hello, {userName}!", // [!code highlight]
};
export default dictionary;
```

```jsx title="src/server/TranslateGreeting.jsx" copy
// [!code word:userName]
"use client";
import { useDict } from 'gt-next/client';

export default async function TranslateGreeting() {
  const d = useDict();
  
  // Hello Alice!
  const greetingAlice = d('greeting', { userName: "Alice" }); // [!code highlight]

  return (
    <p>
      {greetingAlice}
    </p>
  );
}
```

### Using prefixes

We can use prefixes to only translate a subset of the dictionary.
```jsx  title="dictionary.jsx" copy
const dictionary = {
  prefix1: { // [!code highlight]
    prefix2: { // [!code highlight]
      greeting: "Hello, Bob",
    }
  }
};
export default dictionary;
```
Because we added the value `'prefix1.prefix2'` to the `useDict` hook, all of the keys are prefixed with `prefix1.prefix2`:
```jsx title="UserDetails.jsx" copy
"use client";
import { useDict } from 'gt-next/client';

export default function UserDetails() {
  const d = useDict('prefix1.prefix2'); // [!code highlight]
  return (
    <div>
      <p>{d('greeting')}</p> // greeting => prefix1.prefix2.greeting // [!code highlight]
    </div>
  );
}
```
--- 
## Notes
 * The `useDict()` function allows you to access dictionary translations on the client side.
 * The `useDict()` hook can only be used within a component wrapped by a [`<GTProvider>` component](/docs/next/api/components/gtprovider).

## Next Steps
 * For server-side translations, see [`getDict()`](/docs/next/api/dictionary/getDict).
 * Learn more about using dictionaries in the [dictionaries reference](/docs/next/reference/dictionary).
 * See [DictionaryTranslationOptions](/docs/next/api/types/DictionaryTranslationOptions) for more information on translation options.

---
title: getDefaultLocale()
description: API Reference for the getDefaultLocale server-side method
---

## Overview
Source: https://generaltranslation.com/en/docs/next/api/helpers/getDefaultLocale

The `getDefaultLocale()` function retrieves the application's default locale.
This locale is determined when the server starts and is used as the fallback language for translations.
It returns a [locale string](/docs/reference/locale-strings), e.g., `'en-US'`.


<Callout>
    `getDefaultLocale()` is a server-side method and can only be used on server-side components.
</Callout>

See [`withGTConfig()`](/docs/next/api/config/withGTConfig) for configuration.
If no default locale is specified in [`withGTConfig()`](/docs/next/api/config/withGTConfig) it defaults to `'en-US'`.
For client-side, see [`useDefaultLocale()`](/docs/next/api/helpers/useDefaultLocale).

## Reference

### Returns

A string representing the application's default locale, e.g., `'en-US'`.


---



## Examples

### Basic Usage

Retrieve the application's default locale and use it in your server-side logic.

```jsx title="GetDefaultLocale.jsx" copy
import getDefaultLocale from 'gt-next/server';

export default function GetDefaultLocale() {
    const defaultLocale = getDefaultLocale(); // [!code highlight]
    return <p>Default locale: {defaultLocale}</p>;
}
```

---


## Notes
 * The `getDefaultLocale()` returns the default locale set in [`withGTConfig()`](/docs/next/api/config/withGTConfig).
 * `getDefaultLocale()` is server-side only.
 * The returned locale adheres to the [locale strings](/docs/reference/locale-strings) format.

## Next Steps
 * See [`useLocale()`](/docs/next/api/helpers/useLocale) and [`getLocale()`](/docs/next/api/helpers/getLocale) to retrieve the user's locale.
 * Explore [`useDefaultLocale()`](/docs/next/api/helpers/useDefaultLocale) for retrieving the default locale in client components.

---
title: getLocale()
description: API Reference for the getLocale server-side method
---

## Overview
Source: https://generaltranslation.com/en/docs/next/api/helpers/getLocale

The `getLocale()` function retrieves the user's current locale during server-side rendering.
The returned locale is [formatted as a string](/docs/reference/locale-strings), e.g., `'en-US'`.

<Callout>
    `getLocale()` is a server-side method and can only be used on server-side components.
</Callout>

For client-side usage, see [`useLocale()`](/docs/next/api/helpers/useLocale).

## Reference

### Returns

A promise that resolves to a string representing the user's current locale, e.g., `'en-US'`.

---

## Fallback behavior
When an unsupported locale is requested, a fallback locale will be selected.

For instance, in the event of an unsupported locale,
if (1) the user has configured multiple preferred locales in their browser settings,
and (2) one of these locales are supported by your application,
then the locale will fallback to the best language.

Additionally, if no possible fallback locales are available,
but two locales share the same language (e.g., `en-US` and `en-GB`),
then the locale will fallback to the supported locale that shares the same language.

If neither condition can be met, then the the default locale will be used.

See [`the locale management guide()`](/docs/next/reference/locale-management) for information on configuring supported locales.

---

## Examples

### Basic Usage

Retrieve the user's locale during server-side rendering.

```javascript title="GetUserLocale.jsx" copy
import getLocale from 'gt-next/server';

export default async function GetUserLocale() {
    const locale = await getLocale(); // [!code highlight]
    return <p>User locale: {locale}</p>;
}
```

---


## Notes
 * The `getLocale()` function is asynchronous and must be awaited to retrieve the locale.
 * It is specifically designed for server-side use. See [`useLocale()`](/docs/next/api/helpers/useLocale) for client-side components.
 * The returned locale adheres to the [locale strings](/docs/reference/locale-strings) format.

## Next Steps
 * Learn how to configure supported locales with [i18n Configuration](/docs/next/reference/i18n-configuration).
 * For managing fallback locales, see [`getDefaultLocale()`](/docs/next/api/helpers/getDefaultLocale).

---
title: useDefaultLocale()
description: API Reference for the useDefaultLocale hook
---

## Overview
Source: https://generaltranslation.com/en/docs/next/api/helpers/useDefaultLocale

The `useDefaultLocale` hook retrieves the application's default locale from the [`<GTProvider>` context](/docs/next/api/components/gtprovider).
This locale represents the fallback language for your app and is typically used when a user's preferred locale is unavailable.



<Callout>
    `useDefaultLocale` is a client-side hook and *can only be used on client-side components*.
    Ensure your app is wrapped in a [`<GTProvider>`](/docs/next/api/components/gtprovider).
</Callout>

See [`withGTConfig()`](/docs/next/api/config/withGTConfig) for configuration.
If no default locale is specified in [`withGTConfig()`](/docs/next/api/config/withGTConfig), it defaults to `'en-US'`.
For server-side, see [`getDefaultLocale()`](/docs/next/api/helpers/getDefaultLocale).


## Reference

### Returns

A string representing the application's default locale, e.g., `'en-US'`.

---

## Examples

### Basic Usage

Retrieve the application's default locale and display it in your component.

```jsx title="DefaultLocale.jsx" copy
"use client";
import { useDefaultLocale } from 'gt-next/client';

export default function DefaultLocale() {
    const defaultLocale = useDefaultLocale();// [!code highlight]

    return <p>Default locale: {defaultLocale}</p>; // Display the default locale
}
```

---

## Notes
 * The `useDefaultLocale()` hook relies on the [`<GTProvider>`](/docs/next/api/components/gtprovider) to access the context.
   Ensure your app is wrapped with a provider at the root level.
 * `useDefaultLocale()` is client-side only.
 * Learn more about locale strings [here](/docs/reference/locale-strings).

## Next Steps
 * See [`useLocale`](/docs/next/api/helpers/useLocale) and [`getLocale`](/docs/next/api/helpers/getLocale) to retrieve the user's locale.
 * Explore [`getDefaultLocale()`](/docs/next/api/helpers/getDefaultLocale) for retrieving the default locale in server components.


---
title: useLocale()
description: API Reference for the useLocale hook
---

## Overview
Source: https://generaltranslation.com/en/docs/next/api/helpers/useLocale

The `useLocale` hook retrieves the user's current locale from the [`<GTProvider>` context](/docs/next/api/components/gtprovider).
The returned locale is [formatted as a string](/docs/reference/locale-strings), e.g., `'en-US'`.


<Callout>
    `useLocale` is a client-side hook and *can only be used on client-side components*.
    Ensure your app is wrapped in a [`<GTProvider>`](/docs/next/api/components/gtprovider).
</Callout>

For server-side locale management, see [`getLocale()`](/docs/next/api/helpers/getLocale).

## Reference

### Returns

A string representing the user's current locale, e.g., `'en-US'`.

---

## Fallback behavior
When an unsupported locale is requested, a fallback locale will be selected.

For instance, in the event of an unsupported locale,
if (1) the user has configured multiple preferred locales in their browser settings,
and (2) one of these locales are supported by your application,
then the locale will fallback to the best language.

Additionally, if no possible fallback locales are available,
but two locales share the same language (e.g., `en-US` and `en-GB`),
then the locale will fallback to the supported locale that shares the same language.

If neither condition can be met, then the the default locale will be used.

See [`the locale management guide()`](/docs/next/reference/locale-management) for information on configuring supported locales.

---

## Examples

### Basic Usage

Retrieve the current locale and display it in your component.

```jsx title="CurrentLocale.jsx" copy
"use client";
import { useLocale } from 'gt-next/client';

export default function CurrentLocale() {
    const locale = useLocale(); // [!code highlight]
    return <p>Current locale: {locale}</p>;
}
```

---


## Notes
 * The `useLocale()` hook relies on the [`<GTProvider>`](/docs/next/api/components/gtprovider) to access the context. Ensure your app is wrapped with a provider at the root level.
 * `useLocale()` is client-side only.
 * Learn more about locale strings [here](/docs/reference/locale-strings).

## Next Steps
 * Learn how to manage and specify supported locales in your application with [locale management](/docs/next/reference/locale-management).
 * To access the fallback language, see [`useDefaultLocale()`](/docs/next/api/helpers/useDefaultLocale).

---
title: useLocaleSelector()
description: API Reference for the useLocaleSelector hook
---

## Overview
Source: https://generaltranslation.com/en/docs/next/api/helpers/useLocaleSelector

This hook returns the current locale, the list of locales, and the [`useSetLocale()`](/docs/next/api/helpers/useSetLocale) hook.
This is meant for easy use when creating your own locale selector component.

If you don't want to implement your own, you can use the [`<LocaleSelector>`](/docs/next/api/components/localeSelector) component instead.

## Reference

### Returns

An object containing the current locale, the list of locales, and the [`useSetLocale()`](/docs/next/api/helpers/useSetLocale) hook.

---

## Examples

### `<LocaleSelector>`

This is the example implementation of the [`<LocaleSelector>`](/docs/next/api/components/localeSelector) component.

```jsx
export default function LocaleSelector({
  locales: _locales,
  ...props
}: {
  locales?: string[];
  [key: string]: any;
}): React.JSX.Element | null {
  // Get locale selector properties
  const { locale, locales, setLocale } = useLocaleSelector(
    _locales ? _locales : undefined
  );

  // Get display name
  const getDisplayName = (locale: string) => {
    return capitalizeLanguageName(
      getLocaleProperties(locale).nativeNameWithRegionCode
    );
  };

  // If no locales are returned, just render nothing or handle gracefully
  if (!locales || locales.length === 0 || !setLocale) {
    return null;
  }

  return (
    <select
      {...props}
      // Fallback to an empty string if currentLocale is undefined
      value={locale || ''}
      onChange={(e) => setLocale(e.target.value)}
    >
      {/* Optional fallback for when no locale is set */}
      {!locale && <option value='' />}

      {locales.map((locale) => (
        <option key={locale} value={locale} suppressHydrationWarning>
          {getDisplayName(locale)}
        </option>
      ))}
    </select>
  );
}
```

---

## Notes

- This hook is client-side only.
- Learn more about locale strings [here](/docs/reference/locale-strings).

## Next Steps

- Learn more about the [`<LocaleSelector>`](/docs/next/api/components/localeSelector) component.
- Learn more about the [`useLocale()`](/docs/next/api/helpers/useLocale) hook.


---
title: useSetLocale()
description: API Reference for the useSetLocale hook
---

## Overview
Source: https://generaltranslation.com/en/docs/next/api/helpers/useSetLocale

The `useSetLocale` hook is used to set the user's locale.
This is client-side only, and it must be wrapped in a [`<GTProvider>`](/docs/next/api/components/gtprovider) component.


## Reference

### Returns

A function that sets the user's locale.

---

## Examples

### Basic Usage

```jsx
import { useSetLocale } from 'gt-next/client';

export default function MyComponent() {
    const setLocale = useSetLocale();

    return (
        <button onClick={() => setLocale('en')}>Set Locale</button>
    );
}
```

---

## Notes

* The `useSetLocale()` is used to set the user's locale.
* Learn more about locale strings [here](/docs/reference/locale-strings).

## Next Steps

* Learn more about the [`<GTProvider>`](/docs/next/api/components/gtprovider) component.
* Learn more about the [`useLocale()`](/docs/next/api/helpers/useLocale) hook.


---
title: createNextMiddleware()
description: API Reference for the createNextMiddleware() method.
---

## Overview
Source: https://generaltranslation.com/en/docs/next/api/middleware/createNextMiddleware
`createNextMiddleware()` is a utility function that creates a middleware function for use with Next.js.
It allows you to add a different route for each locale in your Next.js application.

For example, a french user would be directed to `/fr/landing` and an english user would be directed to `/en/landing`.

For more information on how to use this middleware, see the [i18n routing guide](/docs/next/reference/i18n-routing).


## Reference

### Props

<TypeTable
  type={{
    "pathConfig": {
        type: 'any',
        optional: true,
        default: '{}',
    },
    "localeRouting": {
        type: 'string',
        optional: true,
        default: true,
    },
    "prefixDefaultLocale": {
        decription: 'Optional value. children will be used for value if not provided.',
        type: 'string | number',
        optional: true,
        default: false,
    },
  }}
/>

### Description
| Prop      | Description                                                                                                                                            |
|-----------|--------------------------------------------------------------------------------------------------------------------------------------------------------|
| `pathConfig`  | A nested object that specifies localized paths for your application. |
| `localeRouting`      | A flag to enable or disable i18n routing.                                                                                      |
| `prefixDefaultLocale`     | A flag to enable or disable the removal of the locale prefix from the default locale. (e.g. `/en/about` -> `/about`)                                 |

---

## Example

### Basic usage

Just invoke add this function and the path matcher to your middleware file to enable locale routing.

```js title="middleware.js" copy
import { createNextMiddleware } from 'gt-next/middleware'

export default createNextMiddleware();

export const config = {
  matcher: [
    /*
      * Match all request paths except for the ones starting with:
      * - api (API routes)
      * - _next (internal files)
      * - static files
      */
    "/((?!api|static|.*\\..*|_next).*)",
  ],
}
```

### Localized paths

You can specify localized paths through the `pathConfig` option in the middleware file.

```js title="middleware.js" copy
export default createNextMiddleware({
  pathConfig: {
    "/about": "/about",
    "/airplanes": {
      "zh": "/飞机",
    }
  },
});
```

See the [i18n routing guide](/docs/next/reference/i18n-routing) for a detailed explanation of how this works.

### Remove default locale prefix

You can remove the default locale prefix by setting the `prefixDefaultLocale` option to `false`.

```js title="middleware.js" copy
export default createNextMiddleware({
  prefixDefaultLocale: true,
});
```

When this is true, then every path must be prefixed with the locale.
If you set this to `false` (which is the default), then only the default locale will be removed from the path.

---

## Notes
 * The `createNextMiddleware()` function is a utility function that creates a middleware function for use with Next.js.

## Next steps
 * See [instructions](/docs/next/reference/i18n-routing) on how to add i18n routing to your Next.js application.

---
title: getGT()
description: API Reference for the getGT() string translation function
---

## Overview
Source: https://generaltranslation.com/en/docs/next/api/strings/getGT

The `getGT()` function is a server-side function for translating strings at build times.

```jsx
const t = await getGT();

<p>{  t('This text will be translated')  }</p>;
```

<Callout>
**Buildtime Translation:**
`getGT()` translations occur at buildtime, before your app deploys.
Though you can pass variables to the translated string, you can only translate content known at build time.
</Callout>

## Reference
### Parameters
None

### Returns

A promise of a callback function, `t()`, which translates the provided content.

```jsx
Promise<(content: string, options?: InlineTranslationOptions) => string>
```

| Name                  | Type | Description                                                                 |
|-----------------------|--|-----------------------------------------------------------------------------|
| `content`             | `string` | The string content to be translated.                                     |
| `options?`            | [`InlineTranslationOptions`](/docs/next/api/types/InlineTranslationOptions) | Translation options to customize the behavior of `t()`. |

---

## Behavior


### Production
During the CD process, any content inside of a `t()` function will be translated before your application is deployed.
This ensures fast load times for all locales, but it can only translate content known at build time.

Once generated, translations are either (1) stored in the CDN or (2) stored in your app's build output, according to your configuration.
From there, the translated content is served to your users.
If a translation is not found, it will fallback to the originial content.

Make sure to follow the [deployment guide here](/docs/next/tutorials/quickdeploy).

### Development
During development, the `t()` function will translate content on demand.
This is useful for prototyping what your app will look like in different languages.
Remember to add a Dev API key to your environment to enable this behavior.

You will see a delay during on demand translation in development.
This will not occur during for production builds unless content is explicitly being translated on demand,
i.e., using [`tx()`](/docs/next/api/strings/tx) or [`<Tx>`](/docs/next/api/components/tx).

---


## Example

### Basic Usage
You can use `getGT()` to translate strings.

```javascript copy
import { getGT } from 'gt-next/server';

export default async function TranslateGreeting() {
  const t = await getGT();

  return (
    <p>
      {t('Hello, Alice!')}
    </p>
  );
}
```
Note: "Alice" will be translated to the user's preferred language.


### Using variables [#variables]
You can pass variables to dictionary translations.

```javascript copy
import { getGT } from 'gt-next/server';

export default async function TranslateGreeting() {
  const t = await getGT();

  return (
    <p>
      {t('Hello, {name}!', { variables: { name: 'Alice' } })}
    </p>
  );
}
```
Note: "Alice" will not translated to the user's preferred language because it is a variable.

---

## Notes
 * The `getGT()` function is a server-side function that translates strings.
 * Translations strings with `getGT()` happen before runtime, during the build process (unless in development).

## Next steps
 * See [`useGT()`](/docs/next/api/strings/useGT) for client-side string translations at buildtime.
 * For runtime translations, see [`tx()`](/docs/next/api/strings/tx) and [`<Tx>`](/docs/next/api/components/tx).
 * See [`InlineTranslationOptions`](/docs/next/api/types/InlineTranslationOptions) for more information on customizing translations.

---
title: tx()
description: API Reference for the tx string translation function
---

## Overview
Source: https://generaltranslation.com/en/docs/next/api/strings/tx

The `tx()` function is a server-side function for translating strings.
```jsx
await tx('Hello, world!'); // returns 'Hola, mundo!'
```


<Callout>
**Runtime Translation:**
`tx()` translations occur at runtime.
This means translation will be performed live, so you can translate content known at runtime.
</Callout>

## Reference

### Parameters

<TypeTable
  type={{
    "content": {
        type: 'string',
        optional: false,
    },
    "options?": {
        type: 'RuntimeTranslationOptions',
        optional: true,
        default: '{}',
    },
  }}
/>


| Name                  | Description                                                                 |
|-----------------------|-----------------------------------------------------------------------------|
| `content`             | The string that needs to be translated.                                     |
| `options`            | Translation options to customize the behavior of `tx()`. See [`RuntimeTranslationOptions`](/docs/next/api/types/RuntimeTranslationOptions).                    |

### Returns

A promise that resolves to a string containing the translated content, or the original content if no translation is needed.

---


## Behavior

The `tx()` function translates strings at runtime.
This means that translations are performed live, so you can translate content that is only known at runtime.
The trade off is that there is a delay while waiting for an on-demand translation to load is significantly slower.

Our advice is to translate everything you can at build time using [`getGT()`](/docs/next/api/strings/useGT), [`useGT()`](/docs/next/api/strings/useGT), or [`<T>`](/docs/next/api/components/t),
and only use on-demand translations, like `tx()` and [`<Tx>`](/docs/next/api/components/tx), when necessary.

Make sure to follow the [deployment guide here](/docs/next/tutorials/quickdeploy).

---

## Example

### Basic Usage

You can use `tx()` to translate strings.

```javascript title="src/components/translateGreeting.jsx" copy
import { tx } from 'gt-next/server';

export default async function translateGreeting() {
    return await tx("Hello, world!"); // [!code highlight]
}
```

### Adding context

You can customize the translation by providing a context to be considered when translating.

```javascript title="TranslateWithOptions.jsx" copy
import { tx } from 'gt-next/server';

export default async function TranslateWithOptions() {
    return await tx("Hello, world!", {
        context: 'Translate informally' // [!code highlight]
    });
}
```

### Using Variables [#variables]

In order to pass values to your string, you must (1) assign an identifier and (2) reference the identifier in the `variables` field.

```jsx title="translateWithVariables.js" copy
// [!code word:price]
import { tx } from 'gt-next/server';

export default async function translateWithVariables() {
    return await tx("The cost is {price}", {
        variables: { price : 29.99 },
        variableOptions: { price : { style: 'currency', currency: 'MXN' } }
    });
}
```

### Specifying a Locale
You can specify a locale to use for the translation.
By default, the locale is set to the user's preferred language.

```jsx title="translateWithLocale.js" copy
import { tx } from 'gt-next/server';

export default async function translateWithLocale() {
    return await tx("Hello, world!", { locale: 'fr' }); // [!code highlight]
}
```

---

## Notes
 * `tx()` exclusively for server-side usage and cannot be used in client-side components.
 * Translations with `tx()` occur at runtime, meaning they are translated live. This is significantly slower than translations at build time.

## Next Steps
 * See [`useGT()`](/docs/next/api/strings/useGT) and [`getGT()`](/docs/next/api/strings/getGT) for translating strings before deployment.
 * For translating jsx, see [`<T>`](/docs/next/api/components/t) and [`<Tx>`](/docs/next/api/components/tx).
 * See [`RuntimeTranslationOptions`](/docs/next/api/types/RuntimeTranslationOptions) for more information on customizing translations.

---
title: useGT()
description: API Reference for the useGT() string translation function
---

## Overview
Source: https://generaltranslation.com/en/docs/next/api/strings/useGT

The `useGT()` function is a client-side hook for translating strings at build time.

```jsx
const t = useGT();

<p>{  t('This text will be translated')  }</p>;
```

<Callout>
**Buildtime Translation:**
`useGT()` translations occur at buildtime, before your app deploys.
Though you can pass variables to the translated string, you can only translate content known at build time.
</Callout>

## Reference
### Parameters
None

### Returns

A callback function, `t()`, which translates the provided content.

```jsx
(content: string, options?: InlineTranslationOptions) => string
```

| Name                  | Type | Description                                                                 |
|-----------------------|--|-----------------------------------------------------------------------------|
| `content`             | `string` | The string content to be translated.                                     |
| `options?`            | [`InlineTranslationOptions`](/docs/next/api/types/InlineTranslationOptions) | Translation options to customize the behavior of `t()`. |

---

## Behavior


### Production
During the CD process, any content inside of a `t()` function will be translated before your application is deployed.
This ensures fast load times for all locales, but it can only translate content known at build time.

Once generated, translations are either (1) stored in the CDN or (2) stored in your app's build output, according to your configuration.
From there, the translated content is served to your users.
If a translation is not found, it will fallback to the originial content.

Make sure to follow the [deployment guide here](/docs/next/tutorials/quickdeploy).

### Development
During development, the `t()` function will translate content on demand.
This is useful for prototyping what your app will look like in different languages.
Remember to add a Dev API key to your environment to enable this behavior.

You will see a delay during on demand translation in development.
This will not occur during for production builds unless content is explicitly being translated on demand,
i.e., using [`tx()`](/docs/next/api/strings/tx) or [`<Tx>`](/docs/next/api/components/tx).

---


## Example

### Basic Usage
You can use `useGT()` to translate strings.

```javascript copy
"use client";
import { useGT } from 'gt-next/client';

export default function TranslateGreeting() {
  const t = useGT();

  return (
    <p>
      {t('Hello, Alice!')}
    </p>
  );
}
```
Note: "Alice" will be translated to the user's preferred language.


### Using variables [#variables]
You can pass variables to dictionary translations.

```javascript copy
"use client";
import { useGT } from 'gt-next/client';

export default function TranslateGreeting() {
  const t = useGT();

  return (
    <p>
      {t('Hello, {name}!', { variables: { name: 'Alice' } })}
    </p>
  );
}
```
Note: "Alice" will not translated to the user's preferred language because it is a variable.

---

## Notes
 * The `useGT()` function is a client-side hook that translates strings.
 * Translations strings with `useGT()` happen before runtime, during the build process (unless in development).

## Next steps
 * See [`getGT()`](/docs/next/api/strings/getGT) for server-side string translations at buildtime.
 * For runtime translations, see [`tx()`](/docs/next/api/strings/tx) and [`<Tx>`](/docs/next/api/components/tx).
 * See [`InlineTranslationOptions`](/docs/next/api/types/InlineTranslationOptions) for more information on customizing translations.

---
title: DictionaryTranslationOptions
description: API Reference for the DictionaryTranslationOptions type
---

## Overview
Source: https://generaltranslation.com/en/docs/next/api/types/DictionaryTranslationOptions

The `DictionaryTranslationOptions` type is used to pass variables to dictionary entries and specify their render behavior.
It is used with [`useDict()`](/docs/next/api/dictionary/useDict) and [`getDict()`](/docs/next/api/dictionary/getDict) to pass variables to dictionary entries.


<Callout>
**Buildtime Translation:**
Variables are not translated with [`useDict()`](/docs/next/api/dictionary/useDict) and [`getDict()`](/docs/next/api/dictionary/getDict), only the original string.
See [`tx()`](/docs/next/api/strings/tx) for translating strings with dyanmic content.
</Callout>


## Reference


### Parameters

<TypeTable
  type={{
    "variables?": {
        type: 'Record<string, any>',
        optional: true,
        default: 'undefined',
    },
    "variablesOptions?": {
        type: 'Record<string, Intl.NumberFormatOptions | Intl.DateTimeFormatOptions>',
        optional: true,
        default: 'undefined',
    },
  }}
/>

### Description

| Prop | Description |
| ---- | ----------- |
| `variables` | An object where the keys identify where each value is mapped to in the dictionary entry.|
| `variablesOptions` | An object where the keys identify the variable and the values define the variables behavior. See [`Intl.NumberFormatOptions`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) and [`Intl.DateTimeFormatOptions`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) for more information. |


---

## Examples

### Passing variables

In order to pass a variable to the dictionary entry, we need to do two things: (1) add a variable to the entry and (2) reference said variable in the [`d()`](/docs/next/api/dictionary/useGT) invocation.

First, we add a variable to the dictionary entry with the following syntax: `{username}`.
`username` is the name of the variable.
```jsx title="dictionary.ts"
// [!code word:username]
const dictionary = {
  greeting: {
    hello: 'Hello, {username}!',
  },
};

export default dictionary;
```

Next, we reference the variable:
```jsx title="Component.tsx"
// [!code word:username]
import { useDict } from 'gt-next/client';

const Component = () => {
  const d = useDict();
  return <div>{d('greeting.hello', { variables: { username : 'Brian123' } })}</div>;
};
```

### Adding variable options

Variable options allow you to customize how a variable is rendered.
It uses the same syntax as the `variables` object.

```jsx title="dictionary.ts"
// [!code word:account-balance]
const dictionary = {
  account: {
    balance: 'Your account balance: {account-balance}!',
  },
};

export default dictionary;
```

Next, we reference the variable:
```jsx title="Component.tsx"
// [!code word:account-balance]
import { useDict } from 'gt-next/client';

const Component = () => {
  const d = useDict();
  return <div>
    { d(
      'account.balance',
      {
        variables: { "account-balance" : 1000000 },
        variableOptions: { "account-balance": { style: 'currency', currency: 'USD' } }
      }
    ) }
  </div>;
};
```



---

## Notes
 * The `variables` object passes values to a dictionary entry.
 * The `variablesOptions` object defines the behavior of the variables.

### Next steps
 * See [dictionaries](/docs/next/reference/dictionary) for more information on dictionaries and common practices.
 * See [`useDict()`](/docs/next/api/dictionary/useDict) or [`getDict()`](/docs/next/api/dictionary/getDict) for more information on dictionaries interface.
 * See [`Intl.NumberFormatOptions`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) and [`Intl.DateTimeFormatOptions`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) for more information on formatting options.


---
title: InlineTranslationOptions
description: API Reference for the InlineTranslationOptions type
---

## Overview
Source: https://generaltranslation.com/en/docs/next/api/types/InlineTranslationOptions

The `InlineTranslationOptions` type is used to pass variables to inline translations and specify their render behavior.
You can also add context and an identifier to the translation.
It is used with [`useGT()`](/docs/next/api/strings/useGT) and [`getGT()`](/docs/next/api/strings/getGT) to pass variables to inline string translations.

<Callout>
  **Buildtime Translation:**
  Variables are not translated with [`useGT()`](/docs/next/api/strings/useGT) and [`getGT()`](/docs/next/api/strings/getGT), only the original string.
  See [`tx()`](/docs/next/api/strings/tx) for translating strings with dyanmic content.
</Callout>

## Reference

### Parameters

<TypeTable
  type={{
    "context?": {
        type: 'string',
        optional: true,
        default: 'undefined',
    },
    "id?": {
        type: 'string',
        optional: true,
        default: 'undefined',
    },
    "variables?": {
        type: 'Record<string, any>',
        optional: true,
        default: 'undefined',
    },
    "variablesOptions?": {
        type: 'Record<string, Intl.NumberFormatOptions | Intl.DateTimeFormatOptions>',
        optional: true,
        default: 'undefined',
    },
  }}
/>

### Description

| Prop | Description |
| ---- | ----------- |
| `context` | The context of the content (used for translation). |
| `id` | An optional identifier for use with the translation editor. |
| `variables` | An object where the keys identify where each value is mapped to in the string.|
| `variablesOptions` | An object where the keys identify the variable and the values define the variables behavior. See [`Intl.NumberFormatOptions`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) and [`Intl.DateTimeFormatOptions`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) for more information. |

---

## Examples

### Context

In order to add context to the string, we use the `context` prop.

```jsx title="Component.tsx"
// [!code word:context]
import { useGT } from 'gt-next/client';

const Component = () => {
  const t = useGT();
  return <div>{t('Hello, world!', { context: 'a formal greeting' })}</div>;
};
```


### Passing variables
In order to add a variable to the string, we use the `{variable-name}` syntax, where curleybraces wrap the name of the variable.

```jsx title="Component.tsx"
// [!code word:username]
import { useGT } from 'gt-next/client';

const Component = () => {
  const t = useGT();
  return <div>{t('Hello, {username}! How is your day?', { variables: { 'username' : 'Brian123' } })}</div>;
};
```

### Adding variable options

You can also customize how your variables render with the `variablesOptions` prop.
```jsx title="Component.tsx"
// [!code word:account-balance]
import { useGT } from 'gt-next/client';

const Component = () => {
  const t = useGT();
  return <div>
    { t(
      'Your account balance: {account-balance}!',
      {
        variables: { "account-balance" : 1000000 },
        variableOptions: { "account-balance": { style: 'currency', currency: 'USD' } }
      }
    ) }
  </div>;
};
```


---

## Notes
 * `InlineTranslationOptions` is used for string translations.
 * The `variables` object passes values to the text.
 * The `variablesOptions` object defines the behavior of the variables.


## Next steps
 * See [`useGT()`](/docs/next/api/strings/useGT) and [`getGT()`](/docs/next/api/strings/getGT) for more information on inline string translations.
 * See [`Intl.NumberFormatOptions`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) and [`Intl.DateTimeFormatOptions`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) for more information on formatting options.


---
title: RuntimeTranslationOptions
description: API Reference for the RuntimeTranslationOptions type
---

## Overview
Source: https://generaltranslation.com/en/docs/next/api/types/RuntimeTranslationOptions

The `RuntimeTranslationOptions` type is used to pass variables to inline translations and specify their render behavior.
You can also add a locale to specify a different language for the translation.
This is used with the [`tx()`](/docs/next/api/strings/tx) function.

<Callout>
  **Runtime Translation:**
  To translate a variable on demand, include them directly in the string passed to [`tx()`](/docs/next/api/strings/tx).
  Variables passed to `tx()` via the `options` object are not translated.
</Callout>

## Reference

### Parameters

<TypeTable
  type={{
    "locale?": {
        type: 'string',
        optional: true,
        default: 'undefined',
    },
    "variables?": {
        type: 'Record<string, any>',
        optional: true,
        default: 'undefined',
    },
    "variablesOptions?": {
        type: 'Record<string, Intl.NumberFormatOptions | Intl.DateTimeFormatOptions>',
        optional: true,
        default: 'undefined',
    },
  }}
/>

### Description

| Prop | Description |
| ---- | ----------- |
| `locale` | An optional locale to use for the translation. Will default to browser's most preferred locale that is supported by your app. |
| `variables` | An object where the keys identify where each value is mapped to in the string.|
| `variablesOptions` | An object where the keys identify the variable and the values define the variables behavior. See [`Intl.NumberFormatOptions`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) and [`Intl.DateTimeFormatOptions`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) for more information. |

---

## Examples


### Passing variables
In order to add a variable to the string, we use the `{variable-name}` syntax, where curleybraces wrap the name of the variable.

```jsx title="Component.tsx"
// [!code word:username]
import { tx } from 'gt-next/server';

const Component = () => {
  return <div>
    {tx(`Hello, {username}!`,{ variables: { 'username' : 'Brian123' } })}
  </div>;
};
```


### Adding variable options

You can also customize how your variables render with the `variablesOptions` prop.
```jsx title="Component.tsx"
// [!code word:account-balance]
import { tx } from 'gt-next/server';

const Component = () => {
  return <div>
    { tx(
      'Your account balance: {account-balance}!',
      {
        variables: { "account-balance" : 1000000 },
        variableOptions: { "account-balance": { style: 'currency', currency: 'USD' } }
      }
    ) }
  </div>;
};
```


### Translating variables
In order to translate a variable, include it directly in the string passed to `tx()`.

```jsx title="Component.tsx"
import { tx } from 'gt-next/server';

const Component = ({ hairColor }: { hairColor: string }) => {
  return <div>{tx(
    `Hello, {username}! Your haircolor is ${hairColor}`,
    { variables: { 'username' : 'Brian123' } }
  )}</div>;
};
```

Note that the variable `hairColor` gets translated, but `username` does not.


### Specifying a locale
You can specify a locale to use for the translation.
```jsx title="Component.tsx"
import { tx } from 'gt-next/server';

const Component = () => {
  return <div>{tx('Hello, world!', { locale: 'fr' })}</div>;
};
```
This will always be translated to french.

---

## Notes
 * `RuntimeTranslationOptions` is used for string translations at runtime.
 * The `variables` object passes values to the text.
 * The `variablesOptions` object defines the behavior of the variables.


## Next steps
 * See [`tx()`](/docs/next/api/strings/tx) for more information on inline string translations.
 * See [`Intl.NumberFormatOptions`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) and [`Intl.DateTimeFormatOptions`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) for more information on formatting options.


---
title: useLocale
description: API Reference for the useLocale hook
---
Source: https://generaltranslation.com/en/docs/next/api/utilities/useLocale


---
title: useLocaleSelector
description: API Reference for the useLocaleSelector hook
---
Source: https://generaltranslation.com/en/docs/next/api/utilities/useLocaleSelector


---
title: useLocales
description: API Reference for the useLocales hook
---
Source: https://generaltranslation.com/en/docs/next/api/utilities/useLocales


---
title: useSetLocale
description: API Reference for the useSetLocale hook
---
Source: https://generaltranslation.com/en/docs/next/api/utilities/useSetLocale


---
title: Next.js Quickstart
description: Easily internationalize your Next.js App with gt-next
---

## Overview
Source: https://generaltranslation.com/en/docs/next

This guide describes how to internationalize an existing [Next.js](https://nextjs.org) project that uses the [App Router](https://nextjs.org/docs#app-router-vs-pages-router).

For a project using the Pages Router, follow the [React docs](/docs/react/tutorials/quickstart).

We will cover 3 simple steps:

<Steps>
  <Step>
    Running the setup wizard
  </Step>
  <Step>
    Adding environment variables
  </Step>
  <Step>
    Cleaning up strings
  </Step>
</Steps>

<Callout>
  Are you using the Next.js pages router? Follow the [React Quickstart](/docs/react/tutorials/quickstart) guide instead.
</Callout>

---

## Setup

### 1. Running the setup wizard

The setup wizard will walk you through the process of internationalizing your project.

```bash
npx gtx-cli@latest init
```

To manually setup your project, follow the [manual setup guide](#manual-setup).

The setup wizard will:

1. Install the required libraries.
2. Configure your project's supported locales.
3. Wrap your project's JSX components with the `<T>` component.
4. Add `withGTConfig()` to your `next.config.js` file.
5. Generate a production API key and project ID for your project.

See the [setup wizard docs](/docs/cli/init) for more information.

### 2. Adding environment variables

The setup wizard will create a `.env.local` file for you in the root of your project containing your production API key and project ID.

However, in order to use `gt-next` in development mode, you will need to add a development API key instead of a production one.


<Steps>
  <Step>
    Navigate to the [Dashboard](https://generaltranslation.com/dashboard).
    Go to the **Developer Keys** page in the sidebar.
  </Step>

  <Step>
    Click **Create Dev API Key**.
  </Step>

  <Step>
    Add the Project ID and Development API key to your environment.
    ```bash title=".env.local" copy
    GT_API_KEY="YOUR_GT_API_KEY"
    GT_PROJECT_ID="YOUR_GT_PROJECT_ID"
    ```
  </Step>
</Steps>
<Callout type="warn">
  **Protect Your API Keys!**

  Development keys should **only** ever be used in development.
  Likewise, production keys should **only** ever be used in production.
  *Never commit your API keys to a public repository!*
</Callout>

### 3. Cleaning up strings

The setup wizard will wrap all of your project's JSX components with the `<T>` component.
However, you may notice that strings are unaffected.

For example, if you have a string constant like this:

```jsx title="Example.js" copy
export default function Example() {
  const greeting = "Hello, world!";
  return <p>{greeting}</p>;
}
```

The setup wizard will not touch this string.

To fix this, you can use the [`useGT()`](/docs/next/api/strings/useGT) hook and [`getGT()`](/docs/next/api/strings/getGT) function to translate the string.

```jsx title="Example.js" copy
import { useGT } from "gt-next/client";
export default function Example() {
  const t = useGT();
  return <p>{t("Hello, world!")}</p>;
}
```



---

## Let's Try It Out!

Congratulations! 🥳 Your app is now multilingual! Let's see it in action.

### See Your App in a Different Language [#see-your-app-in-a-different-language]

<Steps>
  <Step>
    Add the [`<LocaleSelector>`](/docs/next/api/components/localeSelector) component to your app.
    This will allow you to select a different language for your app.
    <Callout>
      **Tip:**
      You can also change your language in your browser settings.
    </Callout>
  </Step>
  <Step>
    Start your Next.js app in development mode.
    <Tabs items={["npm", "yarn", "bun", "pnpm"]}>
      <Tab value="npm">
      ```bash
      npm run dev 
      ```
      </Tab>
      <Tab value="yarn">
      ```bash 
      yarn run dev 
      ```
      </Tab>
      <Tab value="bun">
      ```bash
      bun run dev 
      ```
      </Tab>
      <Tab value="pnpm">
      ```bash
      pnpm run dev 
      ```
      </Tab>
    </Tabs>
  </Step>
  <Step>
    Open up your app in your preferred browser (usually at
    [http://localhost:3000](http://localhost:3000)).
  </Step>
</Steps>

### Troubleshooting

<Accordions>
  <Accordion title="My app's language is not changing, even though I've changed my browser's language.">
    **Browser Cookies**

    If you are deciding to test different languages by changing your browser's language, this issue may occur.

    Check your browser's cookies for your app.
    General translation uses cookies to store the user's language preference.
    The cookie is called `generaltranslation.locale`, and all you need to do is delete it.
    Then, just double check you are using the desired perferred language and then
    refresh the page.

    How to check cookies:
    * [Chrome](https://support.google.com/chrome/answer/95647)
    * [Firefox](https://support.mozilla.org/en-US/kb/delete-cookies-remove-info-websites-stored)
    * [Safari](https://support.apple.com/en-mn/guide/safari/sfri11471/16.0/mac/11.0)
    * [Edge](https://support.microsoft.com/en-us/microsoft-edge/delete-cookies-in-microsoft-edge-63947406-40ac-c3b8-57b9-2a946a29ae09)
  </Accordion>
  <Accordion title="Why do languages take a long time to load in dev?">
    **On-Demand Translation**

    You may notice when loading languages in development, translations will take a few seconds to be displayed.
    This happens because your app is being translated in real time.
    We refer to this process as an "on-demand translation".
    
    This **only happens in dev** so you can easily prototype your website in different languages.
    All translations are preloaded in production, so there will be no delay.
    Follow our guide on [shipping to production](/docs/next/tutorials/quickdeploy).
  </Accordion>
  <Accordion title="Why are some things translating and others not?">
    **JSX Translation**

    Right now, the wizard automatically adds `<T>` components around text content.
    We are currently working on a solution that automatically setup string translations.
    Until then, if you are rendering a string, please follow [this guide](/docs/next/reference/translating-strings) for translating strings.
  </Accordion>
  <Accordion title="Why are some translations inaccurate?">
    The most likely cause of an inaccurate translation is ambiguous wording.
    For example, "apple" can be a fruit or a technology company.

    To fix this, you can provide more context to the translation with the `context` prop.
    The [`<T>`](/docs/next/api/components/t), [`useGT()`](/docs/next/api/strings/useGT), and [`getGT()`](/docs/next/api/strings/getGT) functions all support a `context` prop.
    For example:
    ```jsx
    <T context="the technology company">Apple</T>
    ```    
  </Accordion>
</Accordions>

---

## Shipping to Production

Follow our guide on [shipping to production](/docs/next/tutorials/quickdeploy).

## Next steps
{/* - Learn about how to use dictionaries with [`useGT()`](/docs/next/reference/dictionary) */}
- See our [Next.js API reference](/docs/next/api/components/t) for detailed information about the `<T>` component and other available components.
- Improve your content with [`<Num>`](/docs/next/api/components/num), [`<Currency>`](/docs/next/api/components/currency),
 [`<Branch>`](/docs/next/api/components/branch), and [`<Plural>`](/docs/next/api/components/plural) components.
- Learn how to improve SEO with [i18n routing](/docs/next/reference/i18n-routing) (adding routes for each locale, e.g. `example.com/en`, `example.com/fr`) and [static site generation](/docs/next/reference/ssg).
- Mirror your app to support [right-to-left languages](/docs/next/reference/rtl) such as Arabic and Hebrew.


## Manual Setup [#manual-setup]

If you prefer to do the setup manually, follow the steps below.

### 1. Install libraries

Install the [gt-next](https://www.npmjs.com/package/gt-next) and [gtx-cli](https://www.npmjs.com/package/gtx-cli) libraries.

<Tabs items={["npm", "yarn", "bun", "pnpm"]}>
  <Tab value="npm">
  ```bash 
  npm i gt-next
  npm i gtx-cli --save-dev
  ``` 
  </Tab>
  <Tab value="yarn">
  ```bash 
  yarn add gt-next
  yarn add gtx-cli --dev
  ```
  </Tab>
  <Tab value="bun">
  ```bash 
  bun add gt-next
  bun add gtx-cli --dev
  ```
  </Tab>
  <Tab value="pnpm">
  ```bash 
  pnpm add gt-next
  pnpm add gtx-cli --save-dev
  ```
  </Tab>
</Tabs>


### 2. Add the `withGTConfig()` plugin

Add [`withGTConfig()`](/docs/next/api/config/withGTConfig) to your `next.config.js` file.
You can specify the languages you want to support by passing an array of [locale codes](/docs/reference/locale-strings#supported-locales).

```js title="next.config.js" copy
import { withGTConfig } from 'gt-next/config';

const nextConfig = {};

export default withGTConfig(nextConfig, {
  locales: ['pt', 'es'], // Support for Portuguese and Spanish
});
```


### 3. Add the `<T>` component

Wrap any nested JSX content in the [`<T>` component](/docs/next/api/components/t) to make it translatable.
For more information, check out the [guide on using `<T>` components](/docs/next/reference/t-reference).

```jsx title="Example.js" copy
import { T } from "gt-next";

export default function Example() {
  return (
    // [!code highlight]
    <T>
      <p>
        This gets translated.
      </p>
    </T>  // [!code highlight]
  );
}
```

Use the [`<Var>` component](/docs/next/api/components/var) to designate JSX content that should not be translated.

```jsx title="Example.js" copy
import { T, Var } from "gt-next";

export default function Example() {
  return (
    // [!code highlight]
    <T>
      <p>
        This gets translated. <Var>This does not.</Var>
      </p>
    </T>  // [!code highlight]
  );
}
```

For strings, you can use [`useGT()`](/docs/next/api/strings/useGT) or [`getGT()`](/docs/next/api/strings/getGT) for translation.

```jsx title="Example.js" copy
import { useGT } from "gt-next/client";
import { getGT } from "gt-next/server";

export default function Example() {
  const t = useGT(); // client side // [!code highlight]
  const t = await getGT(); // server side // [!code highlight]
  return (
    <p>
      {/* [!code highlight] */}
      {t("This gets translated.")}
    </p>
  );
}
```

### 4. Add your environment variables

Add your API key and Project ID to your local environment.

<Steps>
  <Step>
    Navigate to the [Dashboard](https://generaltranslation.com/en-US/signin).
    Go to the **Developer Keys** page in the sidebar.
  </Step>

  <Step>
    Click **Create Dev API Key**.
  </Step>

  <Step>
    Add the Project ID and Development API key to your environment.
    ```bash title=".env.local" copy
    GT_API_KEY="YOUR_GT_API_KEY"
    GT_PROJECT_ID="YOUR_GT_PROJECT_ID"
    ```
  </Step>
</Steps>

<Callout type="warn">
  **Protect Your API Keys!**

  Development keys should **only** ever be used in development.
  Likewise, production keys should **only** ever be used in production.
  *Never commit your API keys to a public repository!*
</Callout>


---
title: Changing Languages
description: How to change the language of your Next.js app
---

## Overview
Source: https://generaltranslation.com/en/docs/next/reference/change-language

In this guide, we'll show you how to change the language of your Next.js app.

If you have not yet setup your app with `gt-next`, please refer to the [setup guide](/docs/next) before continuing.

## Setup

There are three ways to change the language of your app using `gt-next`.

1. Using the [`useSetLocale()`](/docs/next/api/helpers/useSetLocale) hook
2. Using the [`<LocaleSelector>`](/docs/next/api/components/localeSelector) component
3. Using the [`useLocaleSelector()`](/docs/next/api/helpers/useLocaleSelector) hook

We'll cover all three methods in this guide.

## Using the `useSetLocale` hook

The `useSetLocale` hook is a client-side hook that allows you to change the language of your app. It must be used within a `GTProvider` component.

```tsx
import { useSetLocale } from 'gt-next/client';
export default function MyComponent() {
  const setLocale = useSetLocale();

  return <button onClick={() => setLocale('en')}>Set Locale</button>;
}
```

Simply provide the locale you want to change to as the argument to the callback function returned by the `useSetLocale` hook.

## Using the `<LocaleSelector>` component

The `<LocaleSelector>` component is a client-side component that allows you to change the language of your app. It must be used within a `GTProvider` component.

This is a bare-bones UI dropdown that displays all the locales you have enabled in your project, and allows users to select a different locale.

```tsx
'use client';
import { LocaleSelector } from 'gt-next/client';

export default function MyComponent() {
  return <LocaleSelector />;
}
```

## Using the `useLocaleSelector` hook

Alternatively, if you would like to create your own locale selector component, you can use the `useLocaleSelector` hook.

This hook returns the current locale, the list of locales, and the `useSetLocale` hook.

```tsx
import { useLocaleSelector } from 'gt-next/client';
```

See the [API reference](/docs/next/api/helpers/useLocaleSelector) for more information.

## Next steps

- Learn more about the [`useSetLocale`](/docs/next/api/helpers/useSetLocale) hook.
- Learn more about the [`<LocaleSelector>`](/docs/next/api/components/localeSelector) component.
- Learn more about the [`useLocaleSelector`](/docs/next/api/helpers/useLocaleSelector) hook.


---
title: The CLI Tool
description: The General Translations CLI tool 
---

## Overview
Source: https://generaltranslation.com/en/docs/next/reference/cli

This is a reference doc on the General Translation CLI tool.

The CLI tool is used for managing your project's translations.
It allows you to [generate translations](/docs/cli/translate), [generate translation templates](/docs/cli/generate), and [setup your project for translation](/docs/cli/setup).
Read more about `gtx-cli` [here](/docs/cli).

### Installation

<Tabs items={["npm", "yarn", "bun", "pnpm"]}>
  <Tab value="npm">
  ```bash 
  npm i gtx-cli --save-dev
  ``` 
  </Tab>
  <Tab value="yarn">
  ```bash 
  yarn add gtx-cli --dev
  ```
  </Tab>
  <Tab value="bun">
  ```bash 
  bun add gtx-cli --dev
  ```
  </Tab>
  <Tab value="pnpm">
  ```bash 
  pnpm add gtx-cli --save-dev
  ```
  </Tab>
</Tabs>

---

## What does the CLI tool do?

If you are using `gt-next`, you will primarily be concerned with the [`translate`](/docs/cli/translate) and [`setup`](/docs/cli/setup) commands.
The CLI tool is used for managing your project and your translations.

 * [The `translate` command](/docs/cli/translate) is meant to be added to the CD pipeline.
   It is used to scan your project for content to be translated.
   The content is then uploaded to a CDN or added to your app bundle to be used at runtime.
 * [The `setup` command ](/docs/cli/setup) is used to automatically integrate the General Translation library into your project.
   It will scan through your project and wrap any JSX content with a `<T>` component.



---
title: Dictionaries Reference
description: An overview of the Dictionary Pattern
---

## Overview
Source: https://generaltranslation.com/en/docs/next/reference/dictionary-reference

In this reference guide, we will introduce you to the dictionary pattern.
Please feel free to skip around this page as needed.
We will cover the following:
 * [What is a dictionary?](#what-is-a-dictionary)
 * [How to use dictionaries](#how-to-use-dictionaries)
 * [Loading dictionaries for other languages](#other-languages)
 * [Using dictionaries](#usage)
 * [Production considerations](#production-considerations)




---

## What is a dictionary?

General Translation allows translatable content to be stored in a dictionary file.
A dictionary is a nested object with string values that can be used to store translatable content.
This dictionary file (`.ts`, `.js`, or `.json`) is then used to generate a translation.

Dictionaries can be used standalone, or in conjunction with [`<T>`](/docs/next/api/components/t) components.

### Dictionary vs `<T>` Components

The dictionary pattern has a few advantages over the `<T>` component:

1. **Centralized Storage**: Dictionaries store all translatable content in a single file, making it easier to  manage and update.
2. **Historical Precedent**: The dictionary pattern is a common design pattern in the industry and is used by many other libraries.

At the same time, it has some disadvantages as well:

1. **Complexity**: Dictionaries are more complex to set up and use than the `<T>` component.
2. **Readability**: Dictionaries are less readable than the `<T>` component because the content is not inline.
3. **Maintainability**: Dictionaries are more difficult to maintain than the `<T>` component because the content is not inline, and is instead stored separately. This makes debugging and maintaining translations much more difficult.

Both design patterns are supported by our library and are not mutually exclusive.
You can use a dictionary alongside `<T>` components.

### Our advice

We recommend using the `<T>` component because of its simplicity especially if you are new to internationalization (i18n).
We offer dictionary support for those who prefer this design pattern from past experiences or for ease of integration with existing code bases.

---

## How to use dictionaries

In this section, we will show you how to set up a bare-bones dictionary implementation in your Next.js application.
We will walk through the following steps:

<Steps>
    <Step>
        Create a dictionary
    </Step>
    <Step>
        Reference the dictionary
    </Step>
</Steps>

### Step 1: Create a dictionary

The first step is to create a dictionary.
This is a `dictionary.js` (`.ts` or `.json`) file that contains all the content you want to translate. 
Create the dictionary in your `src/` directory.

<Files>
  <Folder name="src" defaultOpen>
    <Folder name="app">
      <Folder name="[locale]">
        <File name="layout.js" />
        <File name="page.js" />
        <Folder name="some-page">
          <File name="page.js" />
        </Folder>
      </Folder>
      <Folder name="api">
        <File name="route.js" />
      </Folder>
    </Folder>
    <File name="dictionary.js <--- Add dictionary file here" />
  </Folder>
  <File name="middleware.js" />
  <Folder name="public">
    <Folder name="images">
      <File name="logo.png" />
    </Folder>
  </Folder>
  <Folder name="styles">
    <File name="globals.css" />
  </Folder>
  <File name="next.config.js" />
</Files>

If you are not using a `src/` folder, you can also specify the directory of the dictionary in the [`next.config.js`](/docs/next/api/config/withGTConfig) file.

Add the following content to your `dictionary.js` file:

```js title="src/dictionary.js" copy
const dictionary = {
  greetings: {
    goodbye: 'Goodbye, World!'
  },
}
export default dictionary;
```

<Callout>
  You can also use a `dictionary.json` file to store your dictionary. This is useful if you are migrating from a different library or if you prefer to use JSON files.
  Here is an example of a `dictionary.json` file:

```json title="src/dictionary.json" copy
{
  "greetings": {
    "goodbye": "Goodbye, World!"
  }
}
``` 

</Callout>


### Step 2: Reference the dictionary

There are a few ways to use the dictionary, depending on the context where you are trying to use the dictionary.
For example, if you are in a client-side component, use the [`useDict()`](/docs/next/api/dictionary/useDict)
hook and for server-side components use [`await getDict()`](/docs/next/api/dictionary/getDict).

Here is an example of how to use the dictionary in a client-side component:

```jsx
"use client";
import { useDict } from 'gt-next/client';

export default function MyComponent() {

  const d = useDict(); // on the client side, you use the useDict hook

  return (
    <div>
      {d('greetings.hello')}
    </div>
  );
}
```

And here is an example of how to access the translations in a server-side component:

```jsx
import { getDict } from 'gt-next/server';

export default async function MyComponent() {

  const d = await getDict(); // on the server side, you have to await a promise

  return (
    <div>
      {d('greetings.hello')}
    </div>
  );
}
```

---

## Loading dictionaries for other languages [#other-languages]

By default, developers only provide a dictionary for the default language.

General Translation automatically generates dictionaries for other languages and loads them with the [`loadTranslations`](/docs/next/api/config/load-translations) function.

However, if you are migrating from another i18n library or already have dictionaries for other languages, you can pass them to the [`loadDictionary`](/docs/next/api/config/load-dictionary) function.

`gt-next` will automatically load the corresponding dictionary for the requested locale when using the `useDict()` hook or `getDict()` function.

See the [API Reference](/docs/next/api/config/load-dictionary) for more information.

---

## Using dictionaries [#usage]

### Variables

You can add variables to your dictionary by using the `{variable}` syntax:

```jsx title="src/dictionary.js" copy
// [!code word:name]
const dictionary = {
  greetings: {
    hello: 'Hello, {name}!',
    goodbye: 'Goodbye, {name}!'
  },
}
export default dictionary;
```
```jsx title="src/components/MyComponent.js" copy
// [!code word:name]
import { getDict } from 'gt-next/server';

export default async function MyComponent() {
  const d = await getDict();

  return (
    <div>
      {d('greetings.hello', { variables: { name: 'World' }})}
      {d('greetings.goodbye', { variables: { name: 'World' }})}
    </div>
  );
}
```

Read more about adding variables to your dictionary in [the `DictionaryTranslationOptions` type](/docs/next/api/types/DictionaryTranslationOptions).


### Prefixes

Additionally, with `useDict()` and `getDict()` you can pass in a prefix to the function to specify a shared path in the dictionary.
This is useful if you have a shared path in your dictionary that you want to use in multiple components.

```jsx
const dictionary = {
  greetings: {
    common: {
      hello: 'Hello, World!',
      goodbye: 'Goodbye, World!'
    },
  },
}
export default dictionary;
```

```jsx title="src/components/MyComponent.js" copy
import { getDict } from 'gt-next/server';

export default async function MyComponent() {
  // All translation paths such as 'hello' will be prefixed with 'greetings'
  const d = await getDict('greetings.common'); // [!code highlight]

  return (
    <div>
      {d('hello')} {/* hello -> greetings.common.hello */}
      {d('goodbye')} {/* goodbye -> greetings.common.goodbye */}
    </div>
  );
}
```


### Subsets with `<GTProvider>` [#prefixing-with-gtprovider]

You can also specify a prefix in the `<GTProvider>` component.
This will pass a subset of the dictionary to the client, so the whole dictionary does not have to be loaded.
This only applies to client side components.

```jsx title="layout.js" copy
import { GTProvider } from 'gt-next';

export default function RootLayout({ children }) {
    return (
        <html lang="en">
            <body>
                <GTProvider id="nested.dictionary.key"> // [!code highlight]
                    {children}
                </GTProvider> // [!code highlight]
            </body>
        </html>
    );
}
```

You still have to specify the entire path when referencing a key in the dictionary.
```jsx
"use client";

import { useDict } from 'gt-next/client';

export default function MyComponent() {
  const d = useDict();

  return (
    <div>
      {d('nested.dictionary.key.greeting')} // [!code highlight]
    </div>
  );
}
```

---

## Production considerations

### Deploying to production

Make sure to run the translate command before deploying to production, so that all translations are available at runtime.
We recommend adding it to your in your CD pipeline or as a part of your build script.
```json title="package.json" copy
{
  "scripts": {
    "build": "npx gtx-cli translate --languages fr es ja && <YOUR_BUILD_COMMAND>",
  }
}
```

That's it! You have successfully translated your application into French, Spanish, and Japanese.

For a more detailed guide on deploying your application, please refer to the [Deployment](/docs/next/tutorials/quickdeploy) guide.
For more information on the command, please refer to the [CLI Tool](/docs/cli/translate) reference guide.

### Behavior: Development vs Production

In development, the `d()` function will translate dictionary entries on-demand.
This means that when the component is rendered, it will perform a translation immediately.
We do this for convenience to make development with other languages easier.

To enable this behavior, just add a Dev API key to your environment.

In production, the `d()` function will translate content at build time.
This means that you have to run the translation command before deploying your application.

<Callout>
  **Tip:**
  If you want to simulate production behavior in development, just use a production API key in your development build.
</Callout>

---

## Notes
 * Dictionaries are an alternative to the `<T>` component. They can be used in conjunction with `<T>` components or standalone.
 * Dictionary translations occur at build time, so you have to add the [`translate`](/docs/cli/translate) command to your build process.
 * Dictionaries can be used with prefixes to specify a subset of the dictionary.

## Next steps
 * Learn about the [`<T>` component](/docs/next/api/components/t) and how to use it in your Next.js application.
 * Learn how to ship to production with our [deployment guide](/docs/next/tutorials/quickdeploy).

---
title: Config File
description: Configuration file for gt-next.
---
Source: https://generaltranslation.com/en/docs/next/reference/gt-config

🚧 This section is currently under construction. 🚧


---
title: gt.config.json
description: The `gt.config.json` file
---

## Overview
Source: https://generaltranslation.com/en/docs/next/reference/gtconfigjson

The `gt.config.json` file is in charge of storing your project's configuration.
It holds important information like your project's `projectId`, your supported locales, and more.
It also holds important internal information such as your project's `versionId`.


This file is read by (1) your [`withGTConfig()`](/docs/next/api/config/withgtconfig) component and (2) the [`gtx-cli translate`](/docs/cli/translate) command.
Because of this, we recommend storing your configuration in your `gt.config.json` file instead of passing it as a prop to your [`withGTConfig()`](/docs/next/api/config/withgtconfig) component.

Generally, anything that begins with an underscore (e.g. `_versionId`) is an internal property and should not be modified.
Everything else is fair game.

---

## Fields

| Field | Type | Description |
|-------|-------------|
| `projectId` | `string` | Unique identifier for your project in the GT system |
| `locales` | `string[]` | Array of supported locale codes for your project |
| `defaultLocale` | `string` | The primary locale code used as fallback when translations are missing |
| `cacheUrl` | `string` | URL endpoint for caching translation data |
| `runtimeUrl` | `string` | URL endpoint for runtime translation services |
| `stageTranslations` | `boolean` | Configuration for staging/preview translation features |
| `files` | `object` | Path to local translation files for development and testing |
| `_versionId` | `string` | Internal property used to track project version (do not modify) |


### `cacheUrl` and `runtimeUrl`

If you are storing your translations in the cloud, the `cacheUrl` is the base URL for the cache.
The `runtimeUrl` is the base URL for the runtime and only applies to development translations.

### `stageTranslations`

The `stageTranslations` is a flag used by the `gtx-cli` tool to mark your translations as requiring review.
This means that they must be manually approved before they can be deployed to production via the [`gtx-cli translate`](/docs/cli/translate) command.

### `files`

The `files` field specifies a path to locally stored translations (in contrast to storing them in the cloud).
Specifically, the `output` field specifies where the translations will be written to.

```json
{
  "files": {
    "gt": {
      "output": "public/_gt/[locale].json"
    }
  },
}
```



{/* 
### `_versionId`

Points to hit:
- internal
- you can specify your own version names */}


---

## Examples

### Specifying your locales

```json title="gt.config.json"
{
  "defaultLocale": "en", // Primary locale is English
  "locales": ["fr", "es"] // Secondary locales are French and Spanish
}
```


{/* ### Specifying your own versionId */}

---

## Notes
 * The `gt.config.json` file is used to specify your project's configuration.
 * It is read by both the [`withGTConfig()`](/docs/next/api/config/withgtconfig) component and the [`gtx-cli translate`](/docs/cli/translate) command.
 

## Next steps
 * Learn how to have your [translations added to your project's bundle](/docs/next/reference/local-tx).

---
title: i18n Configuration
description: Configuring i18n behavior in your Next.js application
---

## Overview
Source: https://generaltranslation.com/en/docs/next/reference/i18n-configuration

The [`withGTConfig()`](/docs/next/api/config/withGTConfig) function initializes General Translation (GT) settings for a Next.js application.
By passing props to this function, we can control the internationalization (i18n) behavior of the app.
This includes setting the default locale (a.k.a. the fallback language), supported locales, and other translation-related options.


## Adding the plugin

The first step is to add the `withGTConfig()` plugin function to your next config file.

### Locating your next config file

In the root directory of your project, there should be a file called `next.config.js` (or `.ts`, `.mjs`, `.cjs`).

<Files>
  <Folder name="my-app" defaultOpen={true}>
    <Folder name="src" defaultOpen>
      <Folder name="app">
        <File name="page.js" />
      </Folder>
      <Folder name="components">
        <File name="Header.js" />
        <File name="Footer.js" />
      </Folder>
    </Folder>
    <Folder name="public">
      <File name="favicon.ico" />
    </Folder>
    <File name="next.config.js" />
    <File name=".gitignore" />
    <File name="package.json" />
    <File name="README.md" />
  </Folder>
</Files>

### Add the plugin

Set up a basic configuration for the plugin in your `next.config.js` file.
This will fallback to the default values.

```js title="next.config.mjs" copy
import { withGTConfig } from 'gt-next/config';

const nextConfig = {}

export default withGTConfig(nextConfig);
```

## Some Examples

### Basic Usage

In this configuration, we specify that the app is available in `English`, `Spanish`, and `French`.
We also specify that the default language is `English`.
We also add the description `"A personal blog about technology and travel"`.
This description will accounted in every translation that is performed.

```js title="next.config.mjs" copy
import { withGTConfig } from 'gt-next/config'

const nextConfig = {}

export default withGTConfig(nextConfig, {
  defaultLocale: "en-US", // the default language of your app, usually "en" or "en-US"
  locales: ["en-US", "es", "fr"], // the languages your app is available in
  description: "A personal website for John Smith" // a natural language description of your site used to aid in translation
});
```

### Include Locales [#include-locales]

`withGTConfig()` allows you to specify a list of locales you would like to include.
For example, this configuration specifies that the app will be made available in English, Chinese, and Japanese.

This means that the app will only be available in these languages.
Any locales not included in this list will not be translated.
For instance, if a user tries to access the app in a language not listed, the app will default to the specified default locale.

<Callout>
    By default, your app can be translated into all available languages.
</Callout>

```js title="next.config.mjs"
import { withGTConfig } from 'gt-next/config'

const nextConfig = {}

export default withGTConfig(nextConfig, {
  defaultLocale: "en-US",
  locales: ["en-US", "zh", "jp"]
});

```

To see a list of supported locales, refer to the [Supported Locales](/docs/reference/locale-strings#supported-locales).
For a more detailed guide on selecting locales, refer to the [Locale Management Guide](/docs/next/reference/locale-management).

### Configuring `getLocale()`

`i18n` is a string that specifies a custom path to a file that defines a `getLocale()` function.
You can specify custom behavior for determining the user's locale by creating a file that exports a function called `getLocale()`.

```js title="myapp/next.config.mjs" copy
import { withGTConfig } from 'gt-next/config'

const nextConfig = {};

export default withGTConfig(nextConfig, {
  defaultLocale: "en-US", // the default language of your app, usually "en" or "en-US"
  i18n: "./i18n.js"
});
```


```js title="myapp/i18n.js" copy
import { cookies } from "next/headers";

export async function getLocale() {
  const cookieStore = await cookies();
  return cookieStore.get('myCustomLocaleCookie') || 'en';
}
```

### Preferred Provider [#preferred-provider]

`preferredModelProvider` allows you to specify a preferred model provider.
Currently, only Anthropic and OpenAI are enabled, but more providers will be added in the future.

We will route all your translations to your preferred LLM provider, but if your preferred model is not available or is not readily accessible, we will fallback on a different provider.

```js title="next.config.mjs" copy
import { withGTConfig } from 'gt-next/config'

const nextConfig = {};

export default withGTConfig(nextConfig, {
  defaultLocale: "en-US",
  preferredModelProvider: "anthropic"
});
```

---

## Notes
 * `withGTConfig()` allows you to configure the behavior of GT in your Next.js application.
 * You can specify the default locale, supported locales, and other translation-related options.


## Next Steps
 * Read the API documentation for [`withGTConfig()`](/docs/next/api/config/withGTConfig).

---
title: i18n Routing
description: A step by step guide on adding internationalization (i18n) routing to your application
---

## Overview
Source: https://generaltranslation.com/en/docs/next/reference/i18n-routing
This guide will walk you through adding i18n routing and localized paths to your Next.js application using `gt-next`'s built-in middleware.

### What is i18n Routing?

Creating new routes for each language has the advantage of making your website more user friendly and improve SEO.
i18n routing allows you to associate specific URLs with different locales.
For example, you can have `/en/airplanes` for English, `/zh/airplanes` for Chinese, and so on.

You can take this one step further with localized paths.
These are an extension of i18n routing that allow you to specify an alias path for a locale.
For example, you can specify `/en/airplanes` for English, `/zh/飞机` for Chinese, and so on.

---

## Set up i18n routing

We will take you through two easy steps to add i18n routing to your Next.js application:

<Steps>
    <Step>
        Add a dynamic route to your app folder.
    </Step>
    <Step>
        Create the middleware file.
    </Step>
</Steps>


### Step 1: Add a Dynamic Route [#dynamic-route]

Insert a directory in your app folder called `[locale]` (e.g., `app/[locale]`).
Include all of your pages and layouts under this directory.

<Files>
  <Folder name="my-app" defaultOpen={true}>
    <File name="middleware.js" />
    <Folder name="app" defaultOpen={true}>
      <Folder name="[locale]" defaultOpen={true}>
        <File name="layout.js" />
        <File name="page.js" />
        <Folder name="some-page">
          <File name="page.js" />
        </Folder>
      </Folder>
      <Folder name="api">
        <File name="route.js" />
      </Folder>
    </Folder>
    <Folder name="public">
      <Folder name="images">
        <File name="logo.png" />
      </Folder>
    </Folder>
    <Folder name="styles">
      <File name="globals.css" />
    </Folder>
    <File name="next.config.js" />
  </Folder>
</Files>

Ensure all special files inside `app/` are nested under `app/[locale]`.



### Step 2: Add the middleware file [#middleware]

In Next.js, create a file called `middleware.js` (or `.ts` if you are using TypeScript) inside the root directory.
If you are using the `src/` folder, place it in `src/middleware.js` (or `.ts`) instead.
Add the [`createNextMiddleware()`](/docs/next/api/middleware/createNextMiddleware) function to the file.

```js title="middleware.js" copy
import { createNextMiddleware } from 'gt-next/middleware'

export default createNextMiddleware();

export const config = {
  matcher: [
    /*
      * Match all request paths except for the ones starting with:
      * - api (API routes)
      * - _next (internal files)
      * - static files
      */
    "/((?!api|static|.*\\..*|_next).*)",
  ],
}
```

---

## Set up localized paths

You can specify localized paths through the `pathConfig` option in the middleware file.

```js title="middleware.js" copy
export default createNextMiddleware({
  pathConfig: {
    // You can specify a shared path (optional)
    // This will create "/en/about" and "/zh/about"
    "/about": "/about",

    // Specify localized paths
    // This will create "/en/airplanes" and "/zh/飞机"
    "/airplanes": {
      "zh": "/飞机",
    }

    // Add dynamic path parameters
    // This will create "/en/airports/123" and "/zh/飞机机场/123"
    "/airports/[id]": {
      "zh": "/飞机机场/[id]",
    }
  },
});
```
In this example we create a default path for `/en/about` and localized paths for `/en/airplanes` and `/en/airports/[id]`.
In Chinese, these will be aliased to `/zh/about`, `/zh/飞机` and `/zh/飞机机场/[id]` respectively.

<Callout>
  **Tip:**
  Because the `/about` path remains the same for all locales, you don't need to include it in the `pathConfig` object.
  Any paths that are not specified in the `pathConfig` object will use the same path for all locales following the locale prefix.
</Callout>


---

## Routing behavior

### Default locale prefixing
By default, your `defaultLocale` (a.k.a. your app's default language) will not be prefixed with a locale code in the url.
For example, if your default locale is `en` and you have a page at `/about`, it will be accessible at `/about` in English.
However, in Chinese, it will be accessible at `/zh/about` in Chinese.

If you do not want this behavior, it can be disabled by setting the `prefixDefaultLocale` to `false` in the middleware configuration.

### Locale detection and redirection
The middleware will detect the user's locale based on (1) the url path locale, (2) the referrer locale, (3) the accepted languages from the browser, and (4) finally the `defaultLocale`.
The user will then be redirected accordingly.


<Steps>
  <Step>
    Locale is always first checked from the url path.
    This means that if you visit `/zh/about`, your language will assume to be Chinese.
  </Step>
  <Step>
    If the page you visit is not prefixed by a locale, then the middleware will check the user's previous locale.
    For example, if you are on `/zh`, and you visit `/about`, your language will assume to be Chinese, and you will be redirected to `/zh/about`.
  </Step>
  <Step>
    If neither of these are available, then locale detection will fallback to the user's browser language.
    For instance, if someone's preferred language is Chinese, and they visit `/about` for the firs time, they will be redirected to `/zh/about`.
  </Step>
  <Step>
    If none of these conditions are met, then the `defaultLocale` will be used as the fallback.
  </Step>
</Steps>

If at any time a localized version of the page exists, they will be redirected to the localized url.
For instance, `/zh/airplanes` will always redirect to `/zh/飞机`.

#### Edge case: Localized paths without locale prefix

If you navigate to a localized path without the locale prefix (e.g., `/飞机`), the middleware will prefix that path with whatever it thinks your current locale is.

For example, visiting `/飞机` will only redirect to `/zh/飞机` if the middleware explicitly recognizes your locale as `zh`.
This is great but it only works when the middleware thinks your locale is `zh`.

Otherwise, your path will be prefixed with your current locale.
For example, visiting `/飞机` will redirect to `/en/飞机` if the middleware thinks your locale is `en`.
This will result in a 404.

We recommend always using the path from your `defaultLocale` for any links in your project.
This will always automatically redirect to the correct locale localized path.
```jsx
<Link href="/about">About</Link>
<Link href="/planes">Planes</Link>
<Link href="/airports/123">Airport 123</Link>
```

If you want to explicitly link to a different locale, then you can do so by using the localized path.
```jsx
<Link href="/zh/about">About in Chinese</Link>
<Link href="/zh/飞机">Planes in Chinese</Link>
<Link href="/zh/飞机机场/123">Airport 123 in Chinese</Link>
```


---


## Notes
 * i18n routing changes the URL structure of your application. Each language has its own URL.
 * The middleware file is required to handle the routing logic.
 * You can specify the supported locales in the middleware configuration and next config file.

## Next Steps
 * See the API docs for [`createNextMiddleware()`](/docs/next/api/middleware/createNextMiddleware).
 * Read more about [Locale Management](/docs/next/reference/locale-management).
 * Learn how to [Translate Your Application](/docs/next/reference/translate-your-application).

---
title: Local Translations
description: Setup local translations for your Next.js app
---

## Overview
Source: https://generaltranslation.com/en/docs/next/reference/local-tx

This guide will show you how to store translations in your Next.js app rather than using a CDN.
This means that translations will live in your app bundle.
This can lead to faster loader times and avoids reliance on external infrastructure.

In this document, we will (1) explain what are local translations and how they work and
(2) show you how to set up local translations for your Next.js app.

---

### What are local translations?

Local translations are stored in your app's bundle, as opposed to being fetched from a CDN (Content Distribution Network).

Let's say that you have added the [`gtx-cli translate`](/docs/cli/translate) command to your CD process.
This will generate JSON files containing translations for your app.
The final step is to get these translations out of our API and into your app.

There are two ways to do this:
 * **In your app's bundle:** After translations are generated, add them to your app's bundle.
 * **In a CDN (default):** Fetch from translations from a CDN at runtime.

### What are the benefits?

*Faster load times:* Local translations are served directly from your app,
meaning that they will load faster than translations served from a CDN.

*No reliance on external services:* Your apps ability to load translations is not dependent on the availability of a CDN.

### What are the drawbacks?

*Increased bundle size:* Local translations will increase your app's bundle size as they will be served alongside your app.
This means that your app may take slightly longer on first load.

*Locale management:* In order to add or remove support for locales, you will need to redeploy your app each time.

*Content management:* Much like locale management, if you want to change a translation (i.e., you do not like how your content has been phrased in a different language),
you must redeploy your app with the new translation.

---

## Setup

### Prerequisites

Make sure that you have followed the [Quick Start Guide](/docs/next/tutorials/quickstart).

### Steps

<Steps>
  <Step>
    Add a `loadTranslations.js` file under `./src` with the following content:

    ```js title="src/loadTranslations.js" copy
    export default async function loadTranslations(locale) {
      const t = await import(`../public/_gt/${locale}.json`);
      return t.default;
    }
    ```
  </Step>

  <Step>
    Run the following command, and when asked if you want to save translations on the GT CDN, select the "No" option.
    ```bash
    npx gtx-cli configure
    ```
    Then, run the translate command.
    ```bash
    npx gtx-cli translate
    ```
  </Step>
</Steps>

That's it! Your app will now only load translations from your local files.

{/* ---

## Using your own translations

To use your own translations (and not use the GT AI translation service), there are a few options:

**Option 1:** Create your own language dictionaries
**Option 2:** Modify files created by the [`gtx-cli generate`](/docs/cli/generate) command

### Option 1: Create your own language dictionaries

You can do this by marking the file with your preferred language as your dictionary file in `gt.config.json`.

For example, say that `./dictionary/en.json` is your base language file:
```json title="gt.config.json" copy
{
  "projectId": "your-project-id",
  "dictionary": "./dictionary/en.json",
  "locales": ["en", "fr", "de"],
  ...
}
```

And add your load translations function:
```js title="src/loadTranslations.js" copy
export default async function loadTranslations(locale) {
  const t = await import(`../public/locales/${locale}.json`);
  return t.default;
}
```

When you run the translate command, it will generate translations in the `./public/locales` directory.
```bash
npx gtx-cli translate --no-publish --translations-dir ./public/locales --dictionary ./dictionary/en.json
```

To access these translations, you can use [`useDict`](/docs/nest/api/dictionary/useDict) and [`getDict`](/docs/nest/api/dictionary/getDict) to access your translations.
You can read more about using dictionaries [here](/docs/next/reference/dictionary-reference).

```jsx title="pages/index.jsx" copy
import { useDict } from 'gt-next/client';
import { getDict } from 'gt-next/server';

export default function Home() {
  const d = useDict(); // client-side // [!code highlight]
  const d = await getDict(); // server-side // [!code highlight]
  return (
    <div>
      <h1>{d('identifier')}</h1> // [!code highlight]
    </div>
  );
}
```

For a more detailed guide, see the [custom translations reference](/docs/next/reference/dictionary-reference).


### Option 2: Modify files created by the `gtx-cli generate` command

🚧 This section is currently under construction. 🚧 */}


---


## Notes
 * Local translations are an alternative to fetching translations from a CDN.
 * You can customize [`loadTranslations()`](/docs/next/api/config/load-translations) to also load translations from other sources, such as your database or your own CDN.
 * The `gtx-cli configure` command configures your `gt.config.json` file to use local translations. See [gt.config.json](/docs/cli/reference/config) for more information.

## Next steps
 * See [`loadTranslations()`](/docs/next/api/config/load-translations) for more information on writing a custom translation loader.
 * If you want to write your own translations check out [custom translations](/docs/next/reference/stand-alone).
 * For more information on dictionary syntax, see the [dictionary reference](/docs/next/reference/dictionary-reference).

---
title: Manage Locales
description: How to manage your app's locales
---


## Overview
Source: https://generaltranslation.com/en/docs/next/reference/locale-management


This document provides guidance on how to manage locales in your Next.js application with the `gt-next`.
We will walk through configuring the list of locales you want to support, then triggering the generation of translations.

This library uses the [BCP-47 standard](/docs/reference/locale-strings) to define locales.
See a list of currently supported locales [here](/docs/reference/locale-strings#supported-locales).

---

## Configuring Locales

There are two ways to change your locales for production:
 1. The CLI tool
 2. The `gt.config.json` file (preferred)

In order for translation to be performed, you must add the translate command to your build script:

```json title="package.json" copy
{
  "scripts": {
    "build": "npx gtx-cli translate && next build"
  }
}
```

This will generate the necessary translations and store them in the cloud or in your local filesystem depending on your configuration.


### Managing locales with the CLI tool

The simplest way to manage locales is specifying them through the [`npx gtx-cli translate`](/docs/cli/translate) command by using the `--locales` flag.

```json title="package.json" copy
{
  "scripts": {
    "build": "npx gtx-cli translate --locales en-US zh jp && <YOUR_BUILD_COMMAND>"
  }
}
```

This will generate translations for Chinese (`zh`) and Japanese (`jp`).

### Using `gt.config.json` (preferred)

A more robust way of managing locales is by using the `gt.config.json` file.
you can specify the list of locales you want to support with the `locales` property.

```json title="gt.config.json" copy
{
  "locales": ["zh", "jp"],
}
```

---

## Whitelisted locales

As an optional feature, you can add a list of whitelisted locales.
This is accessible through the dashboard under the Project Locales page.
If you enable this feature, any attempts to call npx translate with non-whitelisted locales will fail.

---

## Notes
 * You can manage locales through the dashboard, the `gt.config.json` file, or the CLI tool.
 * Using `gt.config.json` or CLI tool to manage locales will disable the **Manage Locales** feature in the dashboard.


 ## Next Steps
 * Learn about the locale syntax in the [Locale Strings](/docs/reference/locale-strings) reference.

---
title: Right-to-Left Support
description: A step by step guide on adding Right-to-Left (RTL) support to your application
---

## Overview
Source: https://generaltranslation.com/en/docs/next/reference/rtl

While most languages are written left-to-right (LTR), some languages are written right-to-left (RTL).
These languages include Arabic, Hebrew, Persian, and Urdu which have a combined total of over 500 million speakers worldwide.

Look at the General Translation landing page in [English](https://generaltranslation.com/en-US/welcome)
and [Arabic](https://generaltranslation.com/ar/welcome) to illustrate the difference between ltr and rtl rendering.

## Guide

To add RTL support to your application, all we need to do to is determine the direction of the language and set the direction of
the text on the screen accordingly.

You can use the `getLocaleDirection()` function from `generaltranslation`
library to determine if a language goes `"rtl"` or `"ltr"`.

Use the `getLocale()` function to get the locale in the root layout, then add the `lang` and `dir` props to the `<html>` tag:

```javascript title="my-app/app/layout.tsx" copy
import { getLocale } from 'gt-next'
import { getLocaleDirection } from 'generaltranslation';

export default async function RootLayout({ children }) {
        
  const locale = await getLocale(); // e.g. "ar" for Arabic
  const dir = getLocaleDirection(locale); // e.g. "rtl" for "right-to-left"

  return (
    <html lang={locale} dir={dir}>
      <body> 
        {children}
      </body>
    </html>
  )
}
```

---
title: Static Site Generation
description: How to support static site generation for your i18n app
---

## Overview
Source: https://generaltranslation.com/en/docs/next/reference/ssg

This guide will show you how to setup your i18n app to support static site generation.

---

### What is static site generation?

[Static site generation](https://nextjs.org/docs/pages/building-your-application/rendering/static-site-generation) (SSG) is a feature of Next.js that allows you to generate static pages at build time.
This is useful for performance and SEO. 

## SSG for the `app` router

### Requirements

There are a few requirements to enable static site generation for your i18n app.
Depending on whether you are using the `app` or `pages` directory, the requirements are slightly different.

1. Your app must be using the Next.js app router.
2. Your app must support i18n routing (see [i18n routing](/docs/next/reference/i18n-routing))
3. Your app must be using local translations (see [local translations](/docs/next/reference/local-tx))

### Steps

<Steps>
  <Step>
    **Step 1:**
    First, make sure your app has a `<GTProvider>` component at the root layout.

    ```tsx title="app/[locale]/layout.tsx"
    import { GTProvider } from 'gt-next';
    ```
    Since the app is using i18n routing, the provider should be placed in the `[locale]/layout.tsx` file.
    
    <Accordions>
      <Accordion title="Why is this required?">
        SSG requires all parameters to be known at build time. This includes the locale for every statically generated page.
        Since the `<GTProvider>` component is responsible for providing the translation context to your app, it must know the locale.

        For the same reason, your app must be using i18n routing (since each route must correspond to a specific locale, for a specific page).
      </Accordion>
    </Accordions>
  </Step>
  <Step>
    **Step 2:**
    Next, make sure your app is using the `loadTranslations` function to load translations.
    Additionally, pass in the locale as a parameter to the `<GTProvider>`. You can obtain the locale from the `params` object.

    ```tsx title="app/[locale]/layout.tsx"
    import { loadTranslations } from '@/i18n/loadTranslations';
    import { GTProvider } from 'gt-next';

    export default async function RootLayout({
      children,
      params,
    }: {
      children: React.ReactNode;
      params: Promise<{ locale: string }>;
    }) {
      const { locale } = await params;
      return (
        <GTProvider loadTranslations={loadTranslations} locale={locale}>
          {children}
        </GTProvider>
      )
    }
    ```
  </Step>
  <Step>
    **Step 3:**
    Then, make sure all of your hooks and components are importing from `gt-next/client`.

    ```tsx
    import { useGT } from 'gt-next/client';
    import { T } from 'gt-next/client';
    ```
    <Callout type="info">
      This is important because hooks and components imported from `gt-next/client` never read headers, which don't exist at build time for statically generated pages.
    </Callout>
  </Step>
</Steps>

Make sure you have configured your Next.js app to use the [`getStaticParams` function](https://nextjs.org/docs/app/api-reference/functions/generate-static-params) correctly!

That's it! Your app should now support static site generation for multiple languages!

<Accordions>
  <Accordion title="My pages aren't being statically generated!">
    If you've followed the steps above and your pages are still not being statically generated, double check that all of your hooks and components are importing from `gt-next/client`.

    As a rule of thumb, anything that reads headers or cookies will prevent SSG. This means you can't use any of the following:
    - `await getGT()`
    - `await getLocale()`
    - `await getDict()`
    - `import { T } from 'gt-next'`
    
  </Accordion>
</Accordions>

## SSG for the `pages` router

🚧 This section is currently under construction. 🚧





---
title: Migrating to gt-next
description: Migrating from another i18n library to gt-next
---

## Overview
Source: https://generaltranslation.com/en/docs/next/reference/stand-alone

This guide will walk you through internationalizing your existing Next.js app using `gt-next` as a stand-alone i18n library.
This guide can also be used to help you migrate from another i18n library to `gt-next`.

All translations are stored in your project's repository and are managed by you.
Furthermore, you bring your own translations. This means you won't have to add API keys.

<Callout>
  If you would like to automatically generate translations for your JSON files, please refer to the [CLI tool](/docs/cli/tutorials/json).
</Callout>

### How it works

Translations can live in JSON files called "dictionaries" (`en.json`, `fr.json`, etc.).
The keys are used as references, and the values are the translated content:
```json title="public/dictionaries/en.json"
// [!code word:greeting]
{
  "greeting": "Hello, World!",
}
```

```json title="public/dictionaries/fr.json"
// [!code word:greeting]
{
  "greeting": "Bonjour, le monde!",
}
```

Translations are then referenced in your app with the [`useDict()`](/docs/next/api/dictionary/useGT) hook and [`getDict()`](/docs/next/api/dictionary/getDict) function:
```jsx title="components/MyComponent.js"
// [!code word:greeting]
import { useDict } from 'gt-next/client';
import { getDict } from 'gt-next/server';

export default function MyComponent() {
  const d = useDict(); // client-side
  const d = await getDict(); // server-side
  return (
    <div>
      <h1>{d('greeting')}</h1>
    </div>
  );
}
```

<Callout>
  **Note:** Because these translations are managed by you, you will need to update them manually as your app evolves.
  That means each time you add or change content, you will need to update your translation files.

  Consider using [`the CLI tool`](/docs/cli/tutorials/json) if you are interested in automating this process.
</Callout>

---


## Setup

### 1. Enable translations

Use the [`withGTConfig()`](/docs/next/api/config/with-gt-config) plugin to set up your Next.js app i18n behavior.

```jsx title="next.config.js" copy
import { withGTConfig } from 'gt-next';

const nextConfig = {
  // Your Next.js config
};

export default withGTConfig(nextConfig, {
  locales: ['en', 'fr'], // Supported locales (English, French)
});
```

### 2. Add the dictionary loader file

This [`loadDictionary()`](/docs/next/api/config/load-dictionary) is responsible for loading your translations.
All translations are stored in nested JSON files called dictionaries.

Here, we specify that our translation files are stored in the `/public/dictionaries/` directory.
```jsx title="src/loadDictionary.js" copy
export default async function loadDictionary(locale) {
  const t = await import(`../public/dictionaries/${locale}.json`);
  return t.default;
}
```

### 3. Wrap your app in a `<GTProvider>`
Wrap your app in a [`<GTProvider>`](/docs/next/api/components/gtprovider) to enable translation context.
This allows you to access translations in client-side components.


```jsx title="layout.js" copy
import { GTProvider } from 'gt-next';

export default function RootLayout({ children }) {
  return (
    <html>
      <body>
        {/* [!code highlight] */}
        <GTProvider>
          {children}
          {/* [!code highlight] */}
        </GTProvider>
      </body>
    </html>
  );
}
```

### 4. Create your translation files

Your translation files should be stored in the `./public/dictionaries` directory.
Each file should be named after the locale it represents, e.g. `en.json`, `fr.json`, etc.

```json title="public/dictionaries/en.json"
{
  "greeting": "Hello, World!",
}
```

Then add the corresponding French dictionary translation files:
```json title="public/dictionaries/fr.json"
{
  "greeting": "Bonjour, le monde!",
}
```

### 5. Use your translations!

You can now access your translations with [`useDict()`](/docs/next/api/dictionary/useDict) and [`getDict()`](/docs/next/api/dictionary/getDict).

```jsx title="components/MyComponent.js" copy
import { useDict } from 'gt-next/client';
import { getDict } from 'gt-next/server';

export default function MyComponent() {
  const d = useDict(); // client-side  // [!code highlight]
  const d = await getDict(); // server-side  // [!code highlight]
  return (
    <div>
     {/* en: "Hello, World!"  fr: "Bonjour, le monde!" */}
      <h1>{d('greeting')}</h1> // [!code highlight]
    </div>
  );
}
```

<Callout>
  **Tip:** For more information on dictionary syntax, such as inserting variables, see the [dictionary reference](/docs/next/reference/dictionary-reference).
</Callout>

---

## Compatibility

This guide helps you migrate from another i18n library to `gt-next`. The dictionary format is generally compatible with other libraries.

Our dictionaries support variables, dates, and number interpolation. See the [dictionary options](/docs/next/api/types/DictionaryTranslationOptions) for more information.

However, if your project is using complex syntax such as plurals or branches, you will need to convert those to the `gt-next` syntax.

See the [Branching Components](/docs/next/reference/using-branching-components) page for more information on the `gt-next` syntax.

---

## Notes
 * Use `gt-next` to manually manage translations in your project.
 * Translations are stored in JSON files called "dictionaries" (`en.json`, `fr.json`, etc.).
 * Use [`useDict()`](/docs/next/api/dictionary/useDict) and [`getDict()`](/docs/next/api/dictionary/getDict) to access your translations.

## Next steps
 * For more information on dictionary syntax, see the [dictionary reference](/docs/next/reference/dictionary-reference).
 * Consider using [`the translate command`](/docs/cli/tutorials/translate-json) if you are interested in automating the translation process.

---
title: <T> Reference
description: This is a detailed dive into the <T> component and the gt-next library.
---


## Overview
Source: https://generaltranslation.com/en/docs/next/reference/t-reference

This article will take an in depth dive into how to use the [`<T>` component](/docs/next/api/components/t) in the `gt-next` library.
Please feel free to skip around this page as needed.
We will cover the following:
 * [The `<T>` component](#what-is-the-t-component)
 * [Design patterns](#design-patterns)
 * [Production considerations](#production)
 * [Some examples](#examples)
 * [Common pitfalls](#common-pitfalls)

If you are looking for how to use [Variable Components](/docs/next/reference/using-variable-components) or [Branching Components](/docs/next/reference/using-branching-components), please refer to their respective articles.

---

## What is the `<T>` Component?

The `<T>` component is the primary way to translate text and content in the `gt-next` library.
It allows for inline translation of text and JSX structures, providing a more direct way to manage translations in your application.
This is often times more convenient for the developer as it allows for more direct control over the translation content.

The `<T>` component supports static text, JSX structures, and context-aware translations.
When no translation is available, it gracefully falls back to displaying the content in the application's default locale.

```jsx
<T>
  <p>Hello, world!</p>
</T>
```

---

## Design Patterns

In this section, we will detail common design patterns used with the `<T>` component.
This will also touch on topics that are tangentially related to the `<T>` component, but equally important, such as
string translation, translating content in advanced, and privacy concerns.

### Wrapping your `<T>` components in a `<GTProvider>` [#gtprovider]

`<T>` is used to translate static text and JSX structures.
For client-side components, `<T>` **MUST** be wrapped in a [`<GTProvider>`](/docs/next/api/components/gtprovider) at a higher level.
Our advice is to wrap your application in a `<GTProvider>` at the root level to provide this context.

```javascript copy
import { GTProvider } from 'gt-next';
import { getLocale } from "gt-next/server";

export default async function RootLayout({ children }) {
  const locale = await getLocale();
  return (
    <html lang={locale}>
      <body>
        <GTProvider>{children}</GTProvider> // [!code highlight]
      </body>
    </html>
  );
}
```

#### Exceptions: Server-Side `<T>` Components [#server-t]

For server-side rendering, the `<GTProvider>` is optional for `<T>` components.

```javascript copy
import { GTProvider } from 'gt-next';
import { getLocale } from "gt-next/server";

export default function RootLayout({ children }) {
  const locale = await getLocale();
  return (
    <html lang={locale}>
      <body>
        <T> Hello, world! </T>  // [!code highlight]
        
        <GTProvider>{children}</GTProvider> // [!code highlight]
      </body>
    </html>
  );
}
```

### Variables in `<T>` Components

Variables components can be used in `<T>` components to (1) display dynamic values and/or (2) mark content that should not be translated.
Think of things like a user's name: it's (1) different from person to person and (2) should not change even when the language changes.

```jsx title="DynamicGreeting.js" copy
import { T, Var } from 'gt-next';

export default function DynamicGreeting({ user }) {
  return (
    <T>
      Hello, <Var>{user.name}</Var>! // [!code highlight]
    </T>
  );
}
```

There are many variable components: [`<Var>`](/docs/next/api/components/var), [`<Num>`](/docs/next/api/components/num), [`<Currency>`](/docs/next/api/components/currency) and [`<DateTime>`](/docs/next/api/components/datetime).
Some of these will automatically reformat the content based on the user's locale. Others will simply mark the content as "do not translate".
Also, these components don't necessarily need to be wrapped in a `<T>` component to reformat content.

Read more about it in [this article about variable components](/docs/next/reference/using-variable-components).

### Branching in `<T>` Components

Branching components can be used to display different content based on conditions for translations.
These include [`<Plural>`](/docs/next/api/components/plural) and [`<Branch>`](/docs/next/api/components/branch) components.
We use these components because they allow for a more optimized translation process.

For example, the `<Plural>` component allows you to mark a sentences that should be pluralized when translation occurs.

```jsx title="Count.js" copy
import { T, Plural } from 'gt-next';

export default function Count({ num }) {
  return (
    <T>
      <Plural
        n={num} // <-- variable to check // [!code highlight]
        singular={<p>There is one item.</p>}  // [!code highlight]
        plural={<p>There are multiple items.</p>}  // [!code highlight]
      />
    </T>
  );
}
```

It is also useful as it standardizes your pluralization logic across your application in your base language.

You can specify different options depending on which component you use.
Read more about it in the [Branching Components](/docs/next/reference/using-branching-components) article.

### Translating Strings [#translating-strings]

If you want to translate just a string, you can use [`useGT()`](/docs/next/api/components/strings/useGT), [`getGT()`](/docs/next/api/components/strings/getGT), or [`tx()`](/docs/next/api/components/strings/tx).


[`useGT()`](/docs/next/api/components/strings/useGT) and [`getGT()`](/docs/next/api/components/strings/getGT) are used for translating strings at buildtime.
```jsx title="Greeting.js" copy
function Greeting() {
  const t = useGT();  // client side
  const t = await getGT(); // server side
  return <p>{t('Hello, my friend!')}</p>; // [!code highlight]
}
```

[`tx()`](/docs/next/api/components/strings/tx) is used for translating strings at runtime.
```jsx title="FavoriteFlavor.js" copy
function async FavoriteFlavor({ flavor }) {
  return <p>{await tx(`Your favorite ice cream flavor is ${flavor}`)}</p>; // [!code highlight]
}
```

For more information, you can refer to [our guide on translating strings](/docs/next/reference/translating-strings).

### Adding ids to `<T>` Components

A handy debugging trick is to add an `id` prop to your `<T>` components.
This allows you to track which translations are being used in your application.
It also allows you to use the [Translation Editor](/signin) to make changes to your translations without redeploying.

```jsx title="Greeting.js" copy
import { T } from 'gt-next';

export default function Greeting() {
  return (
    <T id="greeting">
      Hello, world!
    </T>
  );
}
```

---

## Production considerations [#production]

### Deploying to production

Make sure to run the translate command before deploying to production, so that all translations are available at runtime.
We recommend adding it to your in your CD pipeline or as a part of your build script.
```json title="package.json" copy
{
  "scripts": {
    "build": "npx gtx-cli translate --languages fr es ja && next build",
  }
}
```

That's it! You have successfully translated your application into French, Spanish, and Japanese.

For a more detailed guide on deploying your application, please refer to the [Deployment](/docs/next/tutorials/quickdeploy) guide.
For more information on the command, please refer to the [CLI Tool](/docs/cli/translate) reference guide.

### Behavior: Development vs Production

In development, the `<T>` component will translate content on-demand.
This means that when the component is rendered, it will perform a translation immediately.
We do this for convenience to make development with other languages easier.

To enable this behavior, just add a Dev API key to your environment.

In production, the `<T>` component will translate content at build time.
This means that you have to run the translation command before deploying your application.

<Callout>
  **Tip:**
  If you want to simulate production behavior in development, just use a production API key in your development build.
</Callout>

### Privacy Concerns

With some exceptions, all content wrapped in a `<T>` component is sent to the General Translation APIs for translation.
This might not be desirable for rendering sensitive data, such as usernames, account numbers, etc.

To circumvent this issue, use [Variable Components](/docs/next/reference/using-variable-components#privacy) to handle private information.
This ensures that no sensitive data is sent to the General Translation APIs for translation.
The localization of all content wrapped in any Variable Component is handled locally.

---

## Examples

### Basic Usage

The simplest use case for `<T>` is to translate static text.

```javascript copy
import { T } from 'gt-next';

export default function BasicUsage() {
  return (
    <T>
      Hello, world!
    </T>
  );
}
```

This example ensures that `"Hello, world!"` is translated based on the user's locale.
For example, in a Spanish locale, it may render as `"¡Hola, mundo!"`.


### Context

The `<T>` component supports additional context to refine translations.
Adding a context prop allows the same id to resolve to different translations depending on the context provided.
```javascript copy
import { T } from 'gt-next';

export default function FormalGreeting() {
  return (
    <T context="formal">
      Hi there!
    </T>
  );
}
```

For example, the context `"formal"` could yield a translation such as `"Good day, everyone!"`, while the same `id` without context might yield `"Hi there!"` in the other language.
Of course, no change would occur for the base language.

### Nested Components

The `<T>` component can also translate JSX structures.
Any children of the `<T>` will be translated.

```javascript copy
import { T } from 'gt-next';
import CustomButton from './CustomButton';

export default function Page() {
  return (
    <T>
      This will be translated
      <div>
        <div>
          <div>
            <div>
              <CustomButton>This text will also be translated!</CustomButton>
            </div>
          </div>
        </div>
      </div>
    </T>
  );
}
```

---

## Common Pitfalls

### Direct descendants only [#direct-text]

The `<T>` component only translates text passed directly as a child.
This means that if you have content inside a component that is not directly passed to `<T>`, it will not be translated.

Let's illustrate this with an example:

```javascript copy
function UntranslatedContent() {
  return (
    <p>This content is not translated</p>
  );
}

export default function DisplayGreetings() {
  return (
    <T>
      <h1>Hello, this text will be translated</h1>
      <UntranslatedContent />
    </T>
  );
}
```

In this example, the content inside `<UntranslatedContent>` will not be translated.
Only the content directly inside `<T>` will be translated, like the `<h1>` tag and its children.

This occurs because of how React renders components.
It is a bit complicated, but the gist is that React does not know the content of a component until it has rendered.
Therefore, the contents of components like `<UntranslatedContent>` are not translated.
However, any text directly between the two `<T>` tags will be translated.
<Callout>
    **Note:** A good rule of thumb is that any content that is *literally* between the two `<T>` in the file will be translated.
    You can always add another `<T>` to translate the content that is not being translated, though nesting `<T>` components is not recommended.
</Callout>

#### What's the fix?

Your first instinct might be to add an additional `<T>` component inside `<UntranslatedContent>`, but this is not recommended.
We discuss this more [below](#nested-t).

The solution is to always wrap the text in the `<T>` component directly, like so:

```javascript copy
function TranslatedContent() {
  return (
    <T>
      <p>This content <b>IS</b> translated</p>
    </T>
  );
}

export default function DisplayGreetings() {
  return (
    <>
      <T>
        <h1>Hello, this text will be translated</h1>
      </T>
      <TranslatedContent />
    </>
  );
}
```


#### What about variables? [#variables]

Variables are a little more complicated because they have the tendency to change their values.
We recommend using [Variable Components](/docs/next/reference/using-variable-components) for displaying dynamic values and [Branching Components](/docs/next/reference/using-branching-components) for conditional logic.

If you want to translate dynamic contents at runtime, checkout [`tx()`](/docs/next/api/components/strings/tx) and [`<Tx>`](/docs/next/api/components/tx).


### Nested `<T>` Components [#nested-t]

Nesting `<T>` components is not allowed.
Because of react's rendering system, this can lead to unexpected behavior and performance issues when translating on-demand.

Here is an example of **what not to do**:

```jsx copy
function SomeComponent() {
  return (
    <T>
      Hello, friend!
    </T>
  );
}

export default function NestedTranslation() {
  return (
    <T>
      <T> {/* Don't do this! */} // [!code highlight]
        Hello, world!
      </T>
      <SomeComponent /> {/* This still counts. Don't do this! */} // [!code highlight]
    </T>
  );
}
```

The solution here is to remove the outtermost `<T>` component.

### Conditional Content [#conditional-content]

Similar to [rendering variable content](#variables), conditional content within a `<T>` component needs to be handled properly.
It is always best practice to wrap the conditional content in a [Branching Component](/docs/next/reference/using-branching-components) to optimize the translation of content.

```jsx copy
import { T, Branch } from 'gt-next';

export default function Header({ user }) {
  return (
    <T>
      <h2>
        <Branch
          branch={user.hasAccount}
          true={<p>Welcome back, {user.name}!</p>}
          false={<p>Please log in to continue.</p>}
        />
      </h2>
    </T>
  );
}
```

## Notes
 * `<T>` components are used to translate arbitrary JSX Content.
 * Wrap your app with a [`<GTProvider>`](/docs/next/api/components/gtprovider) to enable translations in client components.
 * `<T>` translates contents at buildtime, not runtime. Development will perform on-demand translation for convenience, but this is not the case in production.

## Next Steps
 * Explore [Variable Components article](/docs/next/reference/using-variable-components) and [Branching Components guide](/docs/next/references/using-branching-components).
 * Learn about [translating strings](/docs/next/reference/translating-strings) in your application.
 * For runtime translation, check out [`tx()`](/docs/next/api/components/strings/tx) and [`<Tx>`](/docs/next/api/components/tx).



---
title: Branching Components
description: Comprehensive reference for Branching Components in gt-next
---

## Overview
Source: https://generaltranslation.com/en/docs/next/reference/using-branching-components

Branching Components in `gt-next` enable dynamic content rendering based on specific conditions. These components include:

- [`<Branch>`](/docs/next/api/components/branch): Renders content based on a matching `branch` prop.
- [`<Plural>`](/docs/next/api/components/plural): Renders content based on pluralization rules for a given number.

Both components provide powerful tools for managing conditional logic and dynamic content in localized applications.

In this reference, we will cover:
- What Branching Components are and how they work.
- Design patterns for using Branching Components effectively.
- Some examples of how to use each Branching Component.
- Common pitfalls to avoid when working with Branching Components.

---

## What Are Branching Components?

Branching Components dynamically choose which content to render based on a specific condition or value.

### `<Branch>` Component
The `<Branch>` component allows you to render different content based on a provided `branch` value.
If no matching branch is found, the fallback `children` content is rendered.

For example, the `<Branch>` component is perfect for conditional rendering based on application state, user preferences, or any dynamic data.

### `<Plural>` Component
The `<Plural>` component extends the functionality of `<Branch>` by handling pluralization and number agreement automatically.
It uses the provided `n` value to determine which plural form to display, based on locale-specific rules.

For example, the `<Plural>` component is ideal for rendering singular and plural text dynamically, such as "1 item" vs. "2 items."

---

## Design Patterns

### Branching Logic with `<Branch>` [#branch-logic]

The `<Branch>` component is used for flexible content switching based on a `branch` value.
You can define multiple possible branches, and the component will render the content corresponding to the matching branch key.

```javascript copy
import { T, Branch } from 'gt-next';

export default function UserStatus({ status }) {
  return (
    <T id="UserStatus">
      <Branch
        branch={status}
        active={<p>The user is active.</p>}
        inactive={<p>The user is inactive.</p>}
      >
        <p>Status unknown.</p>
      </Branch>
    </T>
  );
}
```
### Pluralization with `<Plural>` [#plural-logic]

The `<Plural>` component automates pluralization logic based on the value of `n`.
The component dynamically chooses the appropriate plural form for the given number and locale.

```javascript copy
import { T, Plural } from 'gt-next';

export default function ItemCount({ count }) {
  return (
    <T id="item_count">
      <Plural
        n={count}
        one={<>You have <Num>1</Num> item.</>}
        other={<>You have <Num>{count}</Num> items.</>}
      />
    </T>
  );
}
```

The available plural forms depend on the locale and follow [Unicode CLDR pluralization rules](https://cldr.unicode.org/index/cldr-spec/plural-rules).

---

## Examples

### `<Branch>` Example

The `<Branch>` component dynamically renders content based on the provided branch prop.
In this example, it displays different descriptions based on the user's subscription plan.
```javascript copy
import { Branch } from 'gt-next';

export default function SubscriptionDetails({ plan }) {
  return (
    <Branch
      branch={plan}
      free={<p>You are on the Free plan. Upgrade to unlock more features!</p>}
      premium={<p>You are enjoying the Premium plan with full access to features.</p>}
      enterprise={<p>You are on the Enterprise plan. Contact support for tailored solutions.</p>}
    >
      <p>No subscription plan detected.</p>
    </Branch>
  );
}
```

 * The branch prop determines which plan message to display.
 * If plan is `"free"`, `"premium"`, or `"enterprise"`, the corresponding message is shown.
 * If plan doesn't match any of these values, the fallback content (`"No subscription plan detected."`) is displayed.


### `<Plural>` Example

The `<Plural>` component dynamically handles singular and plural content based on the value of `n`.
This example displays the number of unread messages in a user's inbox.

```javascript copy
import { T, Plural, Num } from 'gt-next';

export default function UnreadMessages({ unreadCount }) {
  return (
    <T id="unread_messages">
      <Plural
        n={unreadCount}
        one={<>You have <Num>{unreadCount}</Num> unread message.</>}
        other={<>You have <Num>{unreadCount}</Num> unread messages.</>}
      />
    </T>
  );
}
```
 * The `n` prop specifies the number of unread messages.
 * If `unreadCount` is `1`, it renders: `"You have 1 unread message."`
 * For any other value, it renders: `"You have X unread messages."` where `X` is the value of `unreadCount` formatted by `<Num>`.

---

## Common Pitfalls

### Missing Branch Values [#missing-branch]

If a branch value is not provided or does not match any keys, the `<Branch>` component will render the fallback children content.
Always ensure that the possible branch keys match the values passed to the branch prop.

```javascript copy
import { Branch } from 'gt-next';

export default function StatusMessage({ status }) {
  return (
    <Branch
      branch={status}
      active={<p>The user is active.</p>}
      inactive={<p>The user is inactive.</p>}
    >
      <p>Status unknown.</p>
    </Branch>
  );
}
```
If `status` is `undefined` or a value other than `active` or `inactive`, the fallback content `“Status unknown.”` will be displayed.


### Missing Plural Forms [#plural-locale]

Remember to specify all necessary plural forms in your fallback language.
This is how `gt-next` ensures that your application always has fallback content to display.

---

## Notes
 * Branching Components are essential for managing dynamic and localized content in applications.
 * The `<Branch>` component is highly flexible and can adapt to various conditions and states.
 * The `<Plural>` component simplifies pluralization by adhering to locale-specific rules automatically.
 * Always include a fallback `children` prop for better error handling and user experience.

## Next Steps
 * Check out [`<Branch>`](/docs/next/api/components/branch) and [`<Plural>`](/docs/next/api/components/plural) in the API Reference for more details.
 * Learn more about pluralization rules and branching logic in [Unicode CLDR Pluralization Rules](https://cldr.unicode.org/index/cldr-spec/plural-rules).
 * Explore [Variable Components](/docs/next/reference/using-variable-components) in our reference guide.

---
title: Variable Components
description: Comprehensive reference for Variable Components in gt-next
---

## Overview
Source: https://generaltranslation.com/en/docs/next/reference/using-variable-components

Variable Components in `gt-next` allow you to insert dynamic, untranslatable content into translations.
These components include:

- [`<Var>`](/docs/next/api/components/var): For rendering variables.
- [`<Num>`](/docs/next/api/components/num): For formatting numbers with localization.
- [`<Currency>`](/docs/next/api/components/currency): For formatting currency values with localization.
- [`<DateTime>`](/docs/next/api/components/datetime): For formatting dates and times.

These components are used inside `<T>` components or as part of template dictionary entries to ensure dynamic content is displayed accurately and consistently.

In this reference, we will cover:
 * What Variable Components are and how they work.
 * Design patterns for using Variable Components in your applications.
 * Some examples of how to use each Variable Component.
 * Common pitfalls to avoid when working with Variable Components.


## What Are Variable Components?

Variable Components are used to wrap dynamic content.
This includes user names, numerical values, dates, and currencies.
These components are essential for maintaining the integrity of localized content, as they allow you to format and display dynamic values in a way that aligns with the user's locale.

Each Variable Component has specialized behavior:

- [`<Var>`](/docs/next/api/components/var): Displays general variables, such as user names or identifiers.
- [`<Num>`](/docs/next/api/components/num): Formats numerical values according to locale-specific rules.
- [`<Currency>`](/docs/next/api/components/currency): Formats currency values with symbols and localization rules.
- [`<DateTime>`](/docs/next/api/components/datetime): Formats dates and times using locale-specific conventions.

While JSX content and strings are translated via the General Translation APIs, Variable Components are completely handled locally.
This means that the content within these components is never sent to the translation service, ensuring data privacy and security.

While the `<Var>` component is used for as a catch all for general variables, the `<Num>`, `<Currency>`, and `<DateTime>` components are used for specific types of data that require localization formatting.
For these, we use the [JS i18n API](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl) to format the content according to the user's locale.


---

## Design Patterns

### Wrapping Variable Components in `<T>` [#variable-in-t]

Variable Components are often wrapped within a `<T>` component or as part of a dictionary entry.
This ensures that the surrounding content is translated while the variable content is rendered dynamically and unaltered.

```javascript copy
import { T, Var } from 'gt-next';

export default function UserGreeting({ user }) {
  return (
    <T id="greeting">
      Hello, <Var>{user.name}</Var>!
    </T>
  );
}
```


### Variable Components and Localization [#localization]

Certain Variable Components, such as `<Num>`, `<Currency>`, and `<DateTime>`, include built-in localization support.
These components automatically format their content based on the user's locale or additional options passed as props.

For example:
* [`<Num>`](/docs/next/api/components/Num) can display numbers with localized decimal separators.
* [`<Currency>`](/docs/next/api/components/Currency) can format values with the correct currency symbol and positioning.
* [`<DateTime>`](/docs/next/api/components/DateTime)can format dates and times according to locale-specific rules.

You can also override the default locale and formatting options by passing props directly to these components.

### Data Privacy [#privacy]

As mentioned above, Variable Components handle all reformatting locally; therefore, no information is sent to the General Translation APIs for translation.
This is perfect for keeping sensitive data, such as user names or account numbers, private and secure.

Each Variable Component handles formatting differently and should be used for specific types of private content:
* [`<Var>`](/docs/next/api/components/var): Private information that does not change format based on locale: e.g., user names, account numbers.
* [`<Num>`](/docs/next/api/components/Num): Private numerical values that should be formatted according to locale: e.g., order quantities, age, distance.
* [`<Currency>`](/docs/next/api/components/Currency): Private currency values that should be formatted according to locale: e.g., transaction amounts, account balances.
* [`<DateTime>`](/docs/next/api/components/DateTime): Private date and time values that should be formatted according to locale: e.g., account creation dates, order timestamps.

It should be noted that the same is not true for [Branching Components](/docs/next/reference/using-branching-components)
and [`<T>` components](/docs/next/reference/t-reference), which do send data to the General Translation APIs for translation.

---

## Examples

### `<Var>` Example

Because the `<Var>` component does not reformat content, it is almost exclusively wrapped in a `<T>` component.

In this example we see that passing a variable to the `value` field or passing a variable as a child of the `<Var>` component have the same effect.
As with any other component, the `<Var>` component can be used to wrap any arbitrary JSX content.

```jsx
import { T, Var } from 'gt-next';

export default function UserGreeting({ user }) {
  return (
    <T id="greeting">
      Hello, <Var>{user.name}</Var>!
      Your address is <Var value={user.addr} />
    </T>
  );
}
```

### `<Num>` Example
Unlinke the `<Var>` component, the `<Num>` component is used to format numerical values according to locale-specific rules.
In this example, we can see how the `<Num>` component can be used both as a child of a `<T>` component and as a standalone component.

```jsx
import { T, Num } from 'gt-next';
import { Badge } from '@components/custom/cart/Badge';

export default function OrderSummary({ order }) {
  return (
    <>
      <T id="orderSummary">
        You have <Num value={order.quantity} /> items in your cart.
      </T>
      <Badge>
        <Num>{order.quantity}</Num>
      </Badge>
    </>
  );
}
```

### `<Currency>` Example
The `<Currency>` component takes a numeric value and formats it according to the provided currency string.
In this example, we see how the `<Currency>` component can be used both as a child of a `<T>` component and as a standalone component.

```jsx
import { T, Currency } from 'gt-next';
import { Badge } from '@components/custom/cart/Badge';

export default function OrderSummary({ order }) {
  return (
    <>
      <T id="orderSummary">
        Your total is <Currency currency={"USD"}>{order.total}</Currency>.
      </T>
      <Badge>
        <Currency value={order.total} currency={"USD"} />
      </Badge>
    </>
  );
}

```

### `<DateTime`> Example

The `<DateTime>` component formats date and time values according to the user's locale.
Again, we see how the `<DateTime>` component can be used both as a child of a `<T>` component and as a standalone component.

```jsx
import { T, DateTime } from 'gt-next';

export default function OrderSummary({ order }) {
  return (
    <T id="orderSummary">
      Your order was placed on <DateTime value={order.date} />
    </T>
    <DateTime>{order.date}</DateTime>
  );
}
```

---

## Common Pitfalls

### Ignoring Localization Options [#localization-options]

For `<Currency>`, make sure to pass the `currency` prop to specify the currency type.
This ensures that the correct currency symbol and formatting are used when displaying the value.

Other components, such as `<Num>` and `<DateTime>`, also have optional props that allow you to customize the formatting as well.

## Notes
 * Variable Components are essential for maintaining displaying dynamic and private content in translations.
 * All reformatting is done locally ensuring that no sensitive data is sent to the General Translation APIs.
 * Components like [`<Num>`](/docs/next/api/components/num), [`<Currency>`](/docs/next/api/components/currency), and [`<DateTime>`](/docs/next/api/components/datetime) provide localization features to ensure accurate formatting
 whereas the [`<Var>`](/docs/next/api/components/var) component is used for general variables that do not require reformatting.

## Next Steps
 * Explore conditional logic in [Branching Components](/docs/reference/using-branching-components).
 * Learn more about formatting options for specific Variable Components in the [API Reference](/docs/api/components/var).

---
title: Setup
description: Set up a tutorial project
---
Source: https://generaltranslation.com/en/docs/next/tutorials/dictionary/setup

🚧 This section is currently under construction. 🚧

For more information about the Template Dictionary Design Pattern, check out our [reference guide](/docs/next/reference/dictionary).

---
title: Using Branches
description: Let's add some plurals and conditional behavior
---
Source: https://generaltranslation.com/en/docs/next/tutorials/examples/currency-converter/branches

---
title: Add gt-next
description: Let's get your project ready for translation!
---


## Introduction
Source: https://generaltranslation.com/en/docs/next/tutorials/examples/currency-converter/preptx

Congratulations on setting up your NextJS project! Now, let's get it ready for translation using `gt-next`.

Right now your project is a normal, non-internationalized project that can only be read in one language.
However, before we can start translating, we need to add the library to your project and set up your environment.

### Install `gt-next`
Next, let's add the `gt-next` library to your project. You can do this by running the following command:

```bash copy
npm i gt-next
```

### Set up your environment
Create a `.env` file in the root of your project and add your api key and project id.

```env copy
GT_API_KEY="YOUR_GT_API_KEY"
GT_PROJECT_ID="YOUR_GT_PROJECT_ID"
```

If you have not set up your project yet, just log in to your [General Translation account](https://wwww.generaltranslation.com/signin).
Open the *DEV* API Keys page and create a new *DEV* API key.
Finally, copy the *DEV* API key and project ID and paste them into your `.env` file.

## Conclusion
By now, everything should be ready and set up to start translating.
All we have to do now is add the `<T>` component to our project and start translating!


---
title: Setup
description: Set up a tutorial project
---

## Introduction
Source: https://generaltranslation.com/en/docs/next/tutorials/examples/currency-converter/setup

This is a more in depth tutorial guide on how to set up a very simple NextJS Project using `gt-next`.
We will take you from start to finish, including setting up the project then translating it.
Over the course of this tutorial we will build our way up from simple to more advanced concepts.
This tutorial assumes you have a general understanding of Typescript, Next.js, and React.

Here is a list of items that we will cover in this tutorial:
* Setting up a new Next.js project
* Using the `<T>` component to translate an app
* Using variable components like `<Var>`, `<Currency>`, `<DateTime>`, and `<Num>` to translate dynamic content
* Using branch components like `<Plural>`, and `<Branch>` to translate conditional content
* Using i18n routing in your app

Our app will be a simple app that will allow us to check the conversion rate between currencies.
We will only use inline styling and only the `gt-next` library to keep things as bare-bones as possible.
This example was built based off of the [Currency Converter](https://www.geeksforgeeks.org/how-to-create-a-currency-converter-app-in-reactjs/) tutorial on GeeksforGeeks.

## Set Up Your Next App

First, let's create a new NextJS app. You can do this by running the following command:

```bash copy
npx create-next-app@latest
```
This will take you to the set up wizard, where you can choose the name of your app and the template you want to use.
For this tutorial, use the name `currencies` and select `Yes` when asked if you want to use TypeScript.

Navigate to the project directory, and let's start the app!

```bash copy
cd currencies
npm install
npm run dev
```

This will start the app on `http://localhost:3000`.

## Let's Add Some Content!

Now that we have our app set up, let's overwrite the content of our app to display a simple currency converter.
Just copy and paste the following code into the `src/app/page.tsx` file and `src/app/layout.tsx` files.


Don't worry too much about how it works for now.
All this code does is simulate a fetch to a currency exchange API and displays the exchange rate between two currencies.

<Tabs items={['layout.tsx', 'page.tsx']}>
<Tab value="page.tsx">
```jsx title="src/app/page.tsx" copy
"use client";

import { useEffect, useState, useCallback } from "react";

// A map between two currencies and their exchange rate (from -> to)
type ExchTable = Record<string, Record<string, number>>;

const EXCH_RATES: ExchTable = {
  usd: { usd: 1, inr: 73.5, eur: 0.85, jpy: 105.45, gbp: 0.72 },
  inr: { usd: 0.014, inr: 1, eur: 0.012, jpy: 1.46, gbp: 0.01 },
  eur: { usd: 1.18, inr: 85.5, eur: 1, jpy: 123.5, gbp: 0.85 },
  jpy: { usd: 0.0095, inr: 0.68, eur: 0.0081, jpy: 1, gbp: 0.0068 },
  gbp: { usd: 1.39, inr: 99.5, eur: 1.17, jpy: 146.5, gbp: 1 },
};

// some styles for button
const buttonStyle = {
  backgroundColor: "#007bff",
  color: "white",
  border: "none",
  padding: "10px 20px",
  cursor: "pointer",
  borderRadius: "5px",
  fontSize: "16px",
  margin: "20px",
};

/**
 * This function is meant to simulate an api fetch request to get the current exchange.
 * Waits for 1 second before returning the exchange rate.
 * @returns the exchange rate between two currencies
 */
async function fetchExchangeRate(from: string, to: string): Promise<number> {
  await new Promise((resolve) => setTimeout(resolve, 1000));
  return EXCH_RATES[from][to];
}

function Page() {
  // exch rates
  const [info, setInfo] = useState<ExchTable>({});
  const options = ["usd", "inr", "eur", "jpy", "gbp"];

  // currencies
  const [from, setFrom] = useState("usd");
  const [to, setTo] = useState("inr");

  // values
  const [input, setInput] = useState(0);
  const [output, setOutput] = useState(0);

  // Function to convert the currency
  const convert = useCallback(() => {
    if (info?.[from]?.[to]) {
      const rate = info[from][to];
      setOutput(input * rate);
    } else {
      setOutput(0);
    }
  }, [info, input, to, from]);

  // Calling the api whenever from or to currency changes
  useEffect(() => {
    // If the exchange rate is already present, then convert
    if (info?.[from]?.[to]) {
      convert();
      return;
    }
    // Fetch the exchange rate
    (async () => {
      const response = await fetchExchangeRate(from, to);
      // Enter new response without overwriting old info
      setInfo((prevInfo) => ({
        ...prevInfo,
        [from]: {
          ...(prevInfo?.[from] || undefined),
          [to]: response,
        },
      }));
    })();
  }, [from, to, convert, info]);

  // Call convert whenever a user switches the currency
  useEffect(() => {
    convert();
  }, [info, convert]);

  // Function to switch between two currency
  function flip() {
    const temp = from;
    setFrom(to);
    setTo(temp);
  }

  return (
    <div style={{ margin: "0 auto", width: "50%", textAlign: "center" }}>
      <div style={{ margin: "20px 0", paddingBottom: "20px" }}>
        <h1 style={{ fontSize: "2.5em", fontWeight: "bold" }}>
          Currency Converter
        </h1>
      </div>
      <div style={{ flex: 2, textAlign: "center", margin: "20px 0" }}>
        <h3>Amount</h3>
        <input
          type="text"
          placeholder="Enter the amount"
          style={{ textAlign: "center" }}
          onChange={(e) => {
            setInput(Number(e.target.value));
          }}
        />
      </div>
      <div
        style={{ display: "flex", justifyContent: "center", margin: "20px 0" }}
      >
        <div style={{ flex: 1, textAlign: "center" }}>
          <label htmlFor="from">
            <h3>From</h3>
          </label>
          <select
            name="from"
            id="from"
            value={from}
            onChange={(e) => setFrom(e.target.value)}
          >
            {options.map((option) => (
              <option key={option} value={option}>
                {option.toUpperCase()}
              </option>
            ))}
          </select>
        </div>
        <div style={{ flex: 1, textAlign: "center" }}>
          <button
            onClick={() => {
              flip();
            }}
            style={buttonStyle}
          >
            Switch
          </button>
        </div>
        <div style={{ flex: 1, textAlign: "center" }}>
          <label htmlFor="to">
            <h3>To</h3>
          </label>
          <select
            name="to"
            id="to"
            value={to}
            onChange={(e) => setTo(e.target.value)}
          >
            {options.map((option) => (
              <option key={option} value={option}>
                {option.toUpperCase()}
              </option>
            ))}
          </select>
        </div>
      </div>
      <div style={{ margin: "0 auto", width: "50%", textAlign: "center" }}>
        <button
          onClick={() => {
            convert();
          }}
          style={buttonStyle}
        >
          Convert
        </button>
        <h2>Converted Amount:</h2>
        <p>{input + " " + from + " = " + output.toFixed(2) + " " + to}</p>
      </div>
    </div>
  );
}

export default Page;
```
</Tab>
<Tab value="layout.tsx">
```jsx title="src/app/layout.tsx" copy
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Currency Converter",
  description: "A simple currency converter",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}

```
</Tab>
</Tabs>
## Conclusion

Now you have a normal NextJS app set up and ready to be translated using `gt-next`.

---
title: Using the <T> Component
description: Let's do some translation!
---



## Overview
Source: https://generaltranslation.com/en/docs/next/tutorials/examples/currency-converter/t

It's finally time to do some translating!
Once you set up your `<T>` components, you can translate your app into any language you want!

Really this breaks down into two steps:
<Steps>
  <Step>
    Adding the `<GTProvider>` component
  </Step>
  <Step>
    Adding the `<T>` component
    </Step>
</Steps>


## Add the `<GTProvider>` Component

Let's start by adding the `<GTProvider>` component to your app.
The nice thing is that this only has to be done once.

```jsx title="src/app/layout.tsx" copy
import { GTProvider } from 'gt-next' // [!code highlight]
...
export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <GTProvider> // [!code highlight]
            {children}
        </GTProvider> // [!code highlight]
      </body>
    </html>
  );
}

```

<Callout>
  **Why do we need the `<GTProvider>` component?**

  The `<GTProvider>` is responsible for passing translations from the server to the client.
  Any time we want to render a `<T>` component on the client side, we need to wrap it in a `<GTProvider>`.

  You can read more about the `<GTProvider>` component [here](/docs/next/reference/t-reference#gtprovider).
</Callout>


## Add the `<T>` Component

The part you have been waiting for...

Now all we have to do is put a `<T>` at the top of the content and a closing `</T>` at the end.
Don't forget to add a unique identifier string to act as the id for the translation.

```jsx title="src/app/page.tsx" copy
import { T } from 'gt-next' // [!code highlight]
...
function Page() {
  ...

  return (
    <T id="currency-converter"> // [!code highlight]
      ...
    </T> // [!code highlight]
  );
}

export default Page;
```

And that's it! You're now ready to start translating your app!




---
title: Using Variables
description: Let's add some variables to our translations
---
Source: https://generaltranslation.com/en/docs/next/tutorials/examples/currency-converter/variables

---
title: Speedrun Next.js
description: Let's speedrun creating a new app and internationalizing it with GT.
---

## Overview
Source: https://generaltranslation.com/en/docs/next/tutorials/examples/next-speedrun

In this guide, we'll go over two things:
 - Creating a new Next.js app
 - Internationalizing it with General Translation

In total, this should take less than 10 minutes.


## Prerequisites

We assume that you either have experience using React in some capacity and are familiar with Typescript.

---

## Step 1: Create a new Next.js app

First, navigate to the directory of your choice in terminal and run the following command:

```bash copy
npx create-next-app next-quickstart --ts --tailwind --eslint --app --use-npm --src-dir
```

A set up wizard will appear, you can just select the default value for each option.


## Step 2: Install the libraries

Navigate to your Next.js project's root directory and run:

```bash copy
cd next-quickstart
npm i gt-next
npm i gtx-cli --save-dev
```

## Step 3: Add your environment variables.

Navigate to the [Dashboard](https://generaltranslation.com/en-US/signin).
Go to the Dev Api Keys page on the nav bar and create a new API key and Project ID.
Then add them to your `.env` file.

```bash copy
GT_API_KEY="YOUR_GT_API_KEY"
GT_PROJECT_ID="YOUR_GT_PROJECT_ID"
```

## Step 4: Run the CLI tool

Run the CLI tool to setup your codebase for translation.

```bash copy
npx gtx-cli setup
```

## Step 5: Modify the root layout

Modify the `lang` prop in the `<html>` tag in the `src/app/layout.tsx` file.

It should use `await getLocale()` to get the current locale.

```javascript title="src/app/layout.tsx" copy
import { GTProvider, getLocale } from "gt-next"; // [!code highlight]
...
export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const locale = await getLocale(); // [!code highlight]
  return (
    <html lang={locale}> // [!code highlight]
      <GTProvider>
        <body
          className={`${geistSans.variable} ${geistMono.variable} antialiased`}
        >
        {children}
        </body>
      </GTProvider>
    </html>
  );
}
```


## Step 6: Start your app

Your app is internationalized! 🎉
Let's test it!


Let's change your browser's language settings.
 * Change your language in [Chrome](https://support.google.com/chrome/answer/173424)
 * Change your language in [Firefox](https://support.mozilla.org/en-US/kb/use-firefox-another-language)
 * Change your language in [Edge](https://support.microsoft.com/en-us/microsoft-edge/use-microsoft-edge-in-another-language-4da8b5e0-11ce-7ea4-81d7-4e332eec551f)

Start your Next.js app.
```bash copy
npm run dev
```

Open up your app in your preferred browser (usually at [http://localhost:3000](http://localhost:3000)).
If you have set up everything correctly, you should see your app in the language you set in your browser.

---

## Troubleshooting
<Accordions>
    <Accordion title="My app's language is not changing, even though I've changed my browser's language.">
        **Browser Cookies**

        Check your browser's cookies for your app.
        General translation uses cookies to store the user's language preference.
        The cookie is called `generaltranslation.locale`, and all you need to do is delete it.
        It will be under `localhost:3000`.
        Then, just double check you are using the desired perferred language and then
        refresh the page.

        After this, you won't have to worry about clearing the cookies.

        How to check cookies:
        * [Chrome](https://support.google.com/chrome/answer/95647)
        * [Firefox](https://support.mozilla.org/en-US/kb/delete-cookies-remove-info-websites-stored)
        * [Safari](https://support.apple.com/en-mn/guide/safari/sfri11471/16.0/mac/11.0)
        * [Edge](https://support.microsoft.com/en-us/microsoft-edge/delete-cookies-in-microsoft-edge-63947406-40ac-c3b8-57b9-2a946a29ae09)
    </Accordion>
</Accordions>

---

## Notes
 * Translate arbitrary jsx with the `<T>` component.
 * If translation is not working when you change your language, check your browser's cookies.

## Next steps
 * Star our GitHub repo [gt-next](https://github.com/General-Translation/gt-next).
 * Set up [Right to Left language support](https://generaltranslation.com/docs/next/reference/rtl).
 * Try a more [advanced example](/docs/next/tutorials/examples/currency-converter/setup).

---
title: Deploy to Production (5m)
description: Let's deploy your Next.js app with GT.
---

## Overview
Source: https://generaltranslation.com/en/docs/next/tutorials/quickdeploy

This is a short tutorial to help you deploy your Next.js app with GT.

We will do this in 3 steps:
<Steps>
  <Step>
    Add your production API keys.
  </Step>
  <Step>
    Run the `gtx-cli configure` command to configure your project.
  </Step>
  <Step>
    Add the translate command to your build script.
  </Step>
</Steps>

## Prerequisites

Make sure that you have followed the [Quick Start Guide](/docs/next/tutorials/quickstart) to set up your Next.js app with GT.

## Step 1: Add your production API keys 🔑

Add your **production** API key and Project ID to your production environment variables.

From your [dashboard](https://generaltranslation.com/signin), go to **API Keys** in the sidebar.
Click on **Create API Key**, and add them to your production envrionment.

```bash copy
GT_API_KEY="YOUR_GT_API_KEY"
GT_PROJECT_ID="YOUR_GT_PROJECT_ID"
```

<Callout type="warn">
    **Protect Your API Keys!**

    Production keys should **only** ever be used in production.
    Likewise, development keys should **only** ever be used in development.
    *Never commit your API keys to a public repository!*
</Callout>

## Step 2: Run the `gtx-cli configure` command 🔧

Run the `gtx-cli configure` command to configure your project.

```bash copy
npx gtx-cli configure
```

<Callout>
  If you do not want your translations to be hosted on the GT CDN, select "No" when asked.
  You will also need to configure the [`loadTranslations()`](/docs/next/api/config/load-translations) function.
</Callout>


## Step 3: Add the translate command to your build script 🏗️

The next step is to add the [translate command](/docs/cli/translate) to your build script.

```json title="package.json" copy
{
  "scripts": {
    "build": "npx gtx-cli translate && <...YOUR_BUILD_COMMAND...>"
  }
}
```

That's it! You are now ready to deploy your Next.js with GT!

---

## Next steps
 * See the [CLI docs](/docs/cli/tutorials/quickstart) for more information on the CLI tool.
 * Follow this guide on [How to Manage Locales](/docs/next/reference/locale-management).
 * Learn how to [Translate Strings](/docs/next/reference/translating-strings).
 * Learn about the [`<T>` component](/docs/usage/t).


---
title: Next.js Quickstart
description: Easily internationalize your Next.js App with gt-next
---

## Overview
Source: https://generaltranslation.com/en/docs/next/tutorials/quickstart

This guide describes how to internationalize an existing [Next.js](https://nextjs.org) project that uses the [App Router](https://nextjs.org/docs#app-router-vs-pages-router).

For a project using the Pages Router, follow the [React docs](/docs/react/tutorials/quickstart).

We will cover 3 simple steps:

<Steps>
  <Step>
    Running the setup wizard
  </Step>
  <Step>
    Adding environment variables
  </Step>
  <Step>
    Cleaning up strings
  </Step>
</Steps>

<Callout>
  Are you using the Next.js pages router? Follow the [React Quickstart](/docs/react/tutorials/quickstart) guide instead.
</Callout>

---

## Setup

### 1. Running the setup wizard

The setup wizard will walk you through the process of internationalizing your project.

```bash
npx gtx-cli@latest init
```

To manually setup your project, follow the [manual setup guide](#manual-setup).

The setup wizard will:

1. Install the required libraries.
2. Configure your project's supported locales.
3. Wrap your project's JSX components with the `<T>` component.
4. Add `withGTConfig()` to your `next.config.js` file.
5. Generate a production API key and project ID for your project.

See the [setup wizard docs](/docs/cli/init) for more information.

### 2. Adding environment variables

The setup wizard will create a `.env.local` file for you in the root of your project containing your production API key and project ID.

However, in order to use `gt-next` in development mode, you will need to add a development API key instead of a production one.


<Steps>
  <Step>
    Navigate to the [Dashboard](https://generaltranslation.com/dashboard).
    Go to the **Developer Keys** page in the sidebar.
  </Step>

  <Step>
    Click **Create Dev API Key**.
  </Step>

  <Step>
    Add the Project ID and Development API key to your environment.
    ```bash title=".env.local" copy
    GT_API_KEY="YOUR_GT_API_KEY"
    GT_PROJECT_ID="YOUR_GT_PROJECT_ID"
    ```
  </Step>
</Steps>
<Callout type="warn">
  **Protect Your API Keys!**

  Development keys should **only** ever be used in development.
  Likewise, production keys should **only** ever be used in production.
  *Never commit your API keys to a public repository!*
</Callout>

### 3. Cleaning up strings

The setup wizard will wrap all of your project's JSX components with the `<T>` component.
However, you may notice that strings are unaffected.

For example, if you have a string constant like this:

```jsx title="Example.js" copy
export default function Example() {
  const greeting = "Hello, world!";
  return <p>{greeting}</p>;
}
```

The setup wizard will not touch this string.

To fix this, you can use the [`useGT()`](/docs/next/api/strings/useGT) hook and [`getGT()`](/docs/next/api/strings/getGT) function to translate the string.

```jsx title="Example.js" copy
import { useGT } from "gt-next/client";
export default function Example() {
  const t = useGT();
  return <p>{t("Hello, world!")}</p>;
}
```



---

## Let's Try It Out!

Congratulations! 🥳 Your app is now multilingual! Let's see it in action.

### See Your App in a Different Language [#see-your-app-in-a-different-language]

<Steps>
  <Step>
    Add the [`<LocaleSelector>`](/docs/next/api/components/localeSelector) component to your app.
    This will allow you to select a different language for your app.
    <Callout>
      **Tip:**
      You can also change your language in your browser settings.
    </Callout>
  </Step>
  <Step>
    Start your Next.js app in development mode.
    <Tabs items={["npm", "yarn", "bun", "pnpm"]}>
      <Tab value="npm">
      ```bash
      npm run dev 
      ```
      </Tab>
      <Tab value="yarn">
      ```bash 
      yarn run dev 
      ```
      </Tab>
      <Tab value="bun">
      ```bash
      bun run dev 
      ```
      </Tab>
      <Tab value="pnpm">
      ```bash
      pnpm run dev 
      ```
      </Tab>
    </Tabs>
  </Step>
  <Step>
    Open up your app in your preferred browser (usually at
    [http://localhost:3000](http://localhost:3000)).
  </Step>
</Steps>

### Troubleshooting

<Accordions>
  <Accordion title="My app's language is not changing, even though I've changed my browser's language.">
    **Browser Cookies**

    If you are deciding to test different languages by changing your browser's language, this issue may occur.

    Check your browser's cookies for your app.
    General translation uses cookies to store the user's language preference.
    The cookie is called `generaltranslation.locale`, and all you need to do is delete it.
    Then, just double check you are using the desired perferred language and then
    refresh the page.

    How to check cookies:
    * [Chrome](https://support.google.com/chrome/answer/95647)
    * [Firefox](https://support.mozilla.org/en-US/kb/delete-cookies-remove-info-websites-stored)
    * [Safari](https://support.apple.com/en-mn/guide/safari/sfri11471/16.0/mac/11.0)
    * [Edge](https://support.microsoft.com/en-us/microsoft-edge/delete-cookies-in-microsoft-edge-63947406-40ac-c3b8-57b9-2a946a29ae09)
  </Accordion>
  <Accordion title="Why do languages take a long time to load in dev?">
    **On-Demand Translation**

    You may notice when loading languages in development, translations will take a few seconds to be displayed.
    This happens because your app is being translated in real time.
    We refer to this process as an "on-demand translation".
    
    This **only happens in dev** so you can easily prototype your website in different languages.
    All translations are preloaded in production, so there will be no delay.
    Follow our guide on [shipping to production](/docs/next/tutorials/quickdeploy).
  </Accordion>
  <Accordion title="Why are some things translating and others not?">
    **JSX Translation**

    Right now, the wizard automatically adds `<T>` components around text content.
    We are currently working on a solution that automatically setup string translations.
    Until then, if you are rendering a string, please follow [this guide](/docs/next/reference/translating-strings) for translating strings.
  </Accordion>
  <Accordion title="Why are some translations inaccurate?">
    The most likely cause of an inaccurate translation is ambiguous wording.
    For example, "apple" can be a fruit or a technology company.

    To fix this, you can provide more context to the translation with the `context` prop.
    The [`<T>`](/docs/next/api/components/t), [`useGT()`](/docs/next/api/strings/useGT), and [`getGT()`](/docs/next/api/strings/getGT) functions all support a `context` prop.
    For example:
    ```jsx
    <T context="the technology company">Apple</T>
    ```    
  </Accordion>
</Accordions>

---

## Shipping to Production

Follow our guide on [shipping to production](/docs/next/tutorials/quickdeploy).

## Next steps
{/* - Learn about how to use dictionaries with [`useGT()`](/docs/next/reference/dictionary) */}
- See our [Next.js API reference](/docs/next/api/components/t) for detailed information about the `<T>` component and other available components.
- Improve your content with [`<Num>`](/docs/next/api/components/num), [`<Currency>`](/docs/next/api/components/currency),
 [`<Branch>`](/docs/next/api/components/branch), and [`<Plural>`](/docs/next/api/components/plural) components.
- Learn how to improve SEO with [i18n routing](/docs/next/reference/i18n-routing) (adding routes for each locale, e.g. `example.com/en`, `example.com/fr`) and [static site generation](/docs/next/reference/ssg).
- Mirror your app to support [right-to-left languages](/docs/next/reference/rtl) such as Arabic and Hebrew.


## Manual Setup [#manual-setup]

If you prefer to do the setup manually, follow the steps below.

### 1. Install libraries

Install the [gt-next](https://www.npmjs.com/package/gt-next) and [gtx-cli](https://www.npmjs.com/package/gtx-cli) libraries.

<Tabs items={["npm", "yarn", "bun", "pnpm"]}>
  <Tab value="npm">
  ```bash 
  npm i gt-next
  npm i gtx-cli --save-dev
  ``` 
  </Tab>
  <Tab value="yarn">
  ```bash 
  yarn add gt-next
  yarn add gtx-cli --dev
  ```
  </Tab>
  <Tab value="bun">
  ```bash 
  bun add gt-next
  bun add gtx-cli --dev
  ```
  </Tab>
  <Tab value="pnpm">
  ```bash 
  pnpm add gt-next
  pnpm add gtx-cli --save-dev
  ```
  </Tab>
</Tabs>


### 2. Add the `withGTConfig()` plugin

Add [`withGTConfig()`](/docs/next/api/config/withGTConfig) to your `next.config.js` file.
You can specify the languages you want to support by passing an array of [locale codes](/docs/reference/locale-strings#supported-locales).

```js title="next.config.js" copy
import { withGTConfig } from 'gt-next/config';

const nextConfig = {};

export default withGTConfig(nextConfig, {
  locales: ['pt', 'es'], // Support for Portuguese and Spanish
});
```


### 3. Add the `<T>` component

Wrap any nested JSX content in the [`<T>` component](/docs/next/api/components/t) to make it translatable.
For more information, check out the [guide on using `<T>` components](/docs/next/reference/t-reference).

```jsx title="Example.js" copy
import { T } from "gt-next";

export default function Example() {
  return (
    // [!code highlight]
    <T>
      <p>
        This gets translated.
      </p>
    </T>  // [!code highlight]
  );
}
```

Use the [`<Var>` component](/docs/next/api/components/var) to designate JSX content that should not be translated.

```jsx title="Example.js" copy
import { T, Var } from "gt-next";

export default function Example() {
  return (
    // [!code highlight]
    <T>
      <p>
        This gets translated. <Var>This does not.</Var>
      </p>
    </T>  // [!code highlight]
  );
}
```

For strings, you can use [`useGT()`](/docs/next/api/strings/useGT) or [`getGT()`](/docs/next/api/strings/getGT) for translation.

```jsx title="Example.js" copy
import { useGT } from "gt-next/client";
import { getGT } from "gt-next/server";

export default function Example() {
  const t = useGT(); // client side // [!code highlight]
  const t = await getGT(); // server side // [!code highlight]
  return (
    <p>
      {/* [!code highlight] */}
      {t("This gets translated.")}
    </p>
  );
}
```

### 4. Add your environment variables

Add your API key and Project ID to your local environment.

<Steps>
  <Step>
    Navigate to the [Dashboard](https://generaltranslation.com/en-US/signin).
    Go to the **Developer Keys** page in the sidebar.
  </Step>

  <Step>
    Click **Create Dev API Key**.
  </Step>

  <Step>
    Add the Project ID and Development API key to your environment.
    ```bash title=".env.local" copy
    GT_API_KEY="YOUR_GT_API_KEY"
    GT_PROJECT_ID="YOUR_GT_PROJECT_ID"
    ```
  </Step>
</Steps>

<Callout type="warn">
  **Protect Your API Keys!**

  Development keys should **only** ever be used in development.
  Likewise, production keys should **only** ever be used in production.
  *Never commit your API keys to a public repository!*
</Callout>


---
title: Translating Strings
description: How to translate strings
---

## Overview
Source: https://generaltranslation.com/en/docs/next/tutorials/translating-strings

This guide is a step by step tutorial on how to translate strings in your Next.js app using
[`useGT()`](/docs/next/api/strings/useGT), [`getGT()`](/docs/next/api/strings/getGT), and [`tx()`](/docs/next/api/strings/tx).

## Prerequisites

We assume that you already have installed `gt-next` in your project and have followed or are currently following the [Quick Start Guide](/docs/next/tutorials/quickstart).

## Translating Strings

### Client Side Components
For any client side strings, use [`useGT()`](/docs/next/api/strings/useGT).
Remember that `useGT()` must be called within a child component of [`<GTProvider>`](/docs/next/api/components/gtprovider).

```jsx title="src/components/MyComponent.jsx" copy
import { useGT } from 'gt-next/client';

export default function MyComponent() {
  const t = useGT(); // [!code highlight]
  return (
    <div>
      <h1>{t('This is a string that gets translated')}</h1> // [!code highlight]
    </div>
  );
}
```

### Server Side Components
For any server side strings, use [`getGT()`](/docs/next/api/strings/getGT).

```jsx title="src/pages/index.jsx" copy
import { getGT } from 'gt-next/server';

export default async function Home() {
  const t = await getGT(); // [!code highlight]
  return (
    <div>
      <h1>{t('This is a string that gets translated')}</h1> // [!code highlight]
    </div>
  );
}
```
<Callout>
  **Note:**
  When in development, if you are translating content at runtime, you will have to refresh the page to see the translated version of a string from [`getGT()`](/docs/next/api/strings/getGT).
  **This does not happen in production.**
</Callout>

### Adding Variables
Variables are values that may change, but do not get translated.
To add variables to your strings, use the following pattern:

```jsx title="MyComponent.jsx" copy
import { useGT } from 'gt-next/client';

export default function MyComponent() {
  const t = useGT();
  return (
    <div>
      <h1>{t('Hello there, {username}', { variables: { username: 'Brian123' }})}</h1> // [!code highlight]
    </div>
  );
}
```

This works with both [`useGT()`](/docs/next/api/strings/useGT) and [`getGT()`](/docs/next/api/strings/getGT).

### Dynamic Content
Say that you have a string that changes.
You can use the [`tx()`](/docs/next/api/strings/tx) function to translate the string at runtime.

```jsx title="MyComponent.jsx" copy
import { tx } from 'gt-next/server';

export default async function MyComponent({ username }) {
  const translation = await tx(`Hello, ${username}. How is your day?`); // [!code highlight]
  return (
    <div>
      <h1>{translation}</h1> // [!code highlight]
    </div>
  );
}
```

<Callout>
  **Note:**
  The [`tx()`](/docs/next/api/strings/tx) function is only available on the server side, and should only be used when necessary.
  Runtime translation often creates a delay.
  Use [`getGT()`](/docs/next/api/strings/getGT) or [`useGT()`](/docs/next/api/strings/useGT) whenever possible to translate before deployment.
</Callout>

---

## Notes
 * For translating strings, use [`useGT()`](/docs/next/api/strings/useGT), [`getGT()`](/docs/next/api/strings/getGT), and [`tx()`](/docs/next/api/strings/tx).
 * `useGT()` and `getGT()` translate before deployment, whereas `tx()` translates at runtime. Use `tx()` sparingly.
 * Variables can be added to strings using the `{ variables: { key: value } }` pattern.

## Next Steps
 * Return to the [Quick Start Guide](/docs/next/tutorials/quickstart) to finish setting up your project for translation.
 * See the API reference for [`useGT()`](/docs/next/api/strings/useGT), [`getGT()`](/docs/next/api/strings/getGT), and [`tx()`](/docs/next/api/strings/tx).


---
title: <Branch>
description: API Reference for the <Branch> component
---

## Overview
Source: https://generaltranslation.com/en/docs/react/api/components/branch

The `<Branch>` component allows you to add conditional logic to a translation.

```jsx
const status = 'active';
<Branch branch={status}
    active={<p>The user is active.</p>}
    inactive={<p>The user is inactive.</p>}
/>
```
You pass a value to the `branch` parameter, and this gets matched with an output value based on the keys you provide.

## Reference

### Props

<TypeTable
  type={{
    "branch": {
        description: 'The name of the branch to render.',
        type: 'string',
        optional: false,
    },
    "children?": {
        description: 'Fallback content',
        type: 'any',
        optional: true,
        default: 'undefined',
    },
    "name?": {
        type: 'string',
        optional: true,
        default: 'undefined',
    },
    "[key]: string": {
        type: 'string | JSX.Element',
        optional: false,
    },
  }}
/>

The `[key]: string` syntax indicates arbitrary keys representing potential branches.
For example, branches like `active` and `inactive` can be added as parameters.

| Prop       | Description                                                                 |
|------------|-----------------------------------------------------------------------------|
| `branch`     | The name of the branch to render.                                           |
| `children`   | Fallback content to render if no matching branch is found.                  |
| `[key]: string` | Branches representing possible content for the given branch value. Each key corresponds to a branch, and its value is the content to render. |

### Returns

`JSX.Element` containing the content corresponding to the specified branch or the fallback content.

### Throws

`Error` if the `branch` prop is not provided or is invalid.

## Examples

### Basic usage
`<Branch>` needs to have a different output for each possible value of the `branch` prop.

In this example, the `user.hairColor` value is used to determine the output.
We have defined props `black`, `brown`, and `blonde` to match the possible values of `user.hairColor`.
```jsx title="BranchExample.jsx" copy
import { Branch } from 'gt-react';

export default function HairColor({ user }) {
  return (
    <Branch branch={user.hairColor} // [!code highlight]
      black={<p>Their hair is dark.</p>}
      brown="Their hair is in the middle." // (you can pass a string if you prefer)
      blonde={<p>Their hair is light.</p>}
    />
  );
}
```

### Fallback content
The `children` will always be used as a fallback if no prop matches the value passed to `branch`.

```jsx title="BranchExample.jsx" copy
import { Branch } from 'gt-react';

export default function HairColor({ user }) {
  return (
    <Branch branch={user.hairColor}
      black={<p>Their hair is dark.</p>}
      brown={<p>Their hair is in the middle.</p>}
      blonde={<p>Their hair is light.</p>}
    >
      <p>Their hair is unknown.</p> // [!code highlight]
    </Branch>
  );
}
```


### Translating `<Branch>`

If you want to translate the content, simply wrap it in a `<T>` component.

```jsx title="BranchExample.jsx" copy
import { T, Branch } from 'gt-react';

export default function HairColor({ user }) {
  return (
    <T id="example"> // [!code highlight]
      <Branch branch={user.hairColor}
        black={<p>Their hair is dark.</p>}
        brown={<p>Their hair is in the middle.</p>}
        blonde={<p>Their hair is light.</p>}
      >
        <p>Their hair is unknown.</p> 
      </Branch>
    </T> // [!code highlight]
  );
}
```

### Adding variables
If you want to render dynamic values in the branch, make sure to wrap them in `<Currency>`, `<DateTime>`, `<Num>`, or `<Var>` components.

```jsx title="BranchExample.jsx" copy
import { Branch, T, Var } from 'gt-react';

export default function HairColor({ user }) {
  return (
    <T id="example">
      <Branch branch={user.hairColor}
        black={<p>Their hair is dark.</p>}
        brown={<p>Their hair is in the middle.</p>}
        blonde={<p>Their hair is light.</p>}
      >
        <p>Unhandled hair color: <Var>{user.hairColor}</Var></p> // [!code highlight]
      </Branch>
    </T>
  );
}
```

---


## Notes
 * The keys for branches can be any string value that matches the branch prop. This flexibility makes it easy to adapt `<Branch>` to a wide range of use cases.
 * Combine `<Branch>` with other components, such as `<T>` for translations and [variable components](/docs/react/reference/using-branching-components) for dynamic content, to create rich and localized interfaces.

## Next steps
 * For more advanced usage and examples, refer to [Using Branching Components](/docs/react/reference/using-branching-components).
 * To learn more about variable components like `<Currency>`, `<DateTime>`, `<Num>`, and `<Var>`, see the [Using Variable Components](/docs/react/reference/using-variable-components) documentation.

---
title: <Currency>
description: API Reference for the <Currency> component
---

## Overview
Source: https://generaltranslation.com/en/docs/react/api/components/currency

The `<Currency>` component renders a numerical value as a currency.
The number is formatted based on the current locale and any optional parameters passed.
The currency component only handles formatting and does not perform any exchange rate calculations.

```jsx
<Currency>{100}</Currency>
// Output: $100.00
```

All reformatting is handled locally using the [`Intl.NumberFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) library.

## Reference

### Props

<TypeTable
  type={{
    "children?": {
        type: 'any',
        optional: true,
        default: 'undefined',
    },
    "name?": {
        type: 'string',
        optional: true,
        default: 'undefined',
    },
    "value?": {
        decription: 'Optional value. children will be used for value if not provided.',
        type: 'string | number',
        optional: true,
        default: 'undefined',
    },
    "currency?": {
        type: 'string',
        optional: true,
        default: '"USD"',
    },
    "options?": {
        type: 'Intl.NumberFormatOptions',
        optional: true,
        default: '{}',
    },
    "locales?": {
        type: 'string[]',
        optional: true,
        default: 'undefined',
    },
  }}
/>

### Description
| Prop      | Description                                                                                                                                            |
|-----------|--------------------------------------------------------------------------------------------------------------------------------------------------------|
| `children`  | The content to render inside the component. Typically a number representing the value to be formatted as currency. If provided, it takes precedence over the `value` prop. |
| `name`      | Optional name for the currency field, used for metadata purposes.                                                                                      |
| `value`     | The default value for the currency. Will fallback to children if not provided. Can be a string or number. Strings will be parsed into numbers before formatting.                                  |
| `currency`  | The currency type, such as "USD" or "EUR". This determines the symbol and formatting used for the currency.                                            |
| `options`   | Optional formatting options for the currency, following the [`Intl.NumberFormatOptions` specification](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat). Use this to define styles such as maximum fraction digits, grouping, etc. |
| `locales`   | Optional locales to specify the formatting locale. If not provided, the default user's locale is used. Read more about specifying locales [here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).                                            |

### Returns

`JSX.Element` containing the formatted currency as a string.

---

## Examples
### Basic example

The `<Currency>` component can be used to display localized currency values.

```jsx title="PriceDisplay.jsx" copy
import { Currency } from 'gt-react'; // [!code highlight]

export default function PriceDisplay(item) {
    return (
        <Currency> {item.price} </Currency> // [!code highlight]
    );
}
```

### Specifying currency
Here we are displaying the price in Euros.

```jsx title="PriceDisplay.jsx" copy
import { Currency } from 'gt-react';

export default function PriceDisplay(item) {
  return (
    <Currency currency="EUR"> {item.price} </Currency> // [!code highlight]
  );
}
```

### Translating `<Currency>` components
Say that you want the currency to be displayed in a sentence that is also translated.
You can wrap the `<Currency>` component in a `<T>` component.

```jsx title="PriceDisplay.jsx" copy
import { T, Currency } from 'gt-react';

export default function PriceDisplay(item) {
  return (
    <T id="itemPrice"> // [!code highlight]
      The price is <Currency> {item.price} </Currency>.
    </T> // [!code highlight]
  );
}
```

### Custom formatting

Here we are displaying the price in GBP that specifies exactly decimal places and uses the narrow symbol for the currency (i.e., "$100" rather than "US$100").
Read more about the [Intl.NumberFormatOptions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) for more options.

```jsx title="PriceDisplay.jsx" copy
import { Currency } from 'gt-react';

export default function PriceDisplay(item) {
  return (
    <Currency
      currency="GBP"
      options={{ // [!code highlight]
        currencyDisplay: 'narrowSymbol', // [!code highlight]
        minimumFractionDigits: 2, // [!code highlight]
        maximumFractionDigits: 2, // [!code highlight]
      }} // [!code highlight]
    >
      {item.price}
    </Currency>
  );
}
```

---


## Notes
 * The `<Currency>` component is used to format currency values based on the current locale and any optional parameters passed.
 * The currency component only handles formatting and does not perform any exchange rate calculations.
 * The contents of the `<Currency>` component will not be sent to the API for translation.
   All reformatting is done locally using the [`Intl.NumberFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) library.

## Next Steps
 * For more details and usage examples of the `<Currency>` component and other variable components like `<Num>`, `<DateTime>`, and `<Var>`,
   see the [Using Variable Components](/docs/react/reference/using-variable-components) documentation.

---
title: <DateTime>
description: API Reference for the <DateTime> component
---

## Overview
Source: https://generaltranslation.com/en/docs/react/api/components/datetime

The `<DateTime>` component renders a formatted date or time string, supporting customization such as formatting options and locale.
The date or time is formatted according to the current locale and any optional parameters passed.

```jsx
<DateTime>{1738010355}</DateTime>
// Output: 1/27/2025
```

All formatting is handled locally using the [`Intl.DateTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) library.

## Reference

### Props

<TypeTable
  type={{
    "children?": {
        description: 'Date content to be formatted.',
        type: 'any',
        optional: true,
        default: 'undefined',
    },
    "name?": {
        type: 'string',
        optional: true,
        default: 'undefined',
    },
    "value?": {
        type: 'string | number | Date',
        optional: true,
        default: 'undefined',
    },
    "options?": {
        type: 'Intl.DateTimeFormatOptions',
        optional: true,
        default: '{}',
    },
    "locales?": {
        type: 'string[]',
        optional: true,
        default: 'undefined',
    },
  }}
/>

### Description
| Prop Name | Description |
|-----------|-------------|
| `children` | The content to render inside the component. Typically a date or time value. If provided, it takes precedence over the `value` prop. |
| `value`    | The default value for the date or time. Can be a string, number (timestamp), or Date object. |
| `options`  | Optional formatting options for the date or time, following the [`Intl.DateTimeFormatOptions` specification](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat). Use this to define styles such as weekday names, time zones, and more. |
| `locales`  | Optional locales to specify the formatting locale. If not provided, the user's locale is used. Read more about specifying locales [here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).|

### Returns

`JSX.Element` containing the formatted date or time as a string.

---
## Examples

### Basic usage
The `<DateTime>` component can be used to display localized date or time values.

```jsx title="EventDate.jsx" copy
import { DateTime } from 'gt-react';

export default function EventDate(event) {
    return (
        <DateTime> {event.date} </DateTime>. // [!code highlight]
    );
}
```

### Specifying locales
The `<DateTime>` component can be used to display date or time values in a specific locale.

```jsx title="EventDate.jsx" copy

import { DateTime } from 'gt-react';

export default function EventDate(event) {
    return (
        <DateTime locales={['fr-FR']}> {event.date} </DateTime>. // [!code highlight]
    );
}
```


### Translating `<DateTime>`
Say that you want the datetime to be displayed in a sentence that is also being translated.
You can wrap the `<DateTime>` component in a `<T>` component.
```jsx title="EventDate.jsx" copy
import { T, DateTime } from 'gt-react';

export default function EventDate(event) {
    return (
        <T id="eventDate">
            The time of the event is <DateTime> {event.date} </DateTime>. // [!code highlight]
        </T>
    );
}
```

### Custom formatting
The `<DateTime>` component supports custom formatting options.
```jsx title="EventDate.jsx" copy
import { DateTime } from 'gt-react';

export default function EventDate(event) {
    return (
        <DateTime options={{
            dateStyle: 'full', // [!code highlight]
            timeStyle: 'long', // [!code highlight]
            timeZone: 'Australia/Sydney', // [!code highlight]
        }}>
            {event.date}
        </DateTime>.
    );
}
```

---

## Notes
 * The `<DateTime>` component is a variable component that can be used to format date and time values.
 * The component uses the [`Intl.DateTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) library for formatting.

## Next Steps
 * For more details and usage examples of the `<DateTime>` component and other variable components like `<Currency>`, `<Num>`, and `<Var>`,
  see the [Using Variable Components](/docs/react/reference/using-variable-components) documentation.

---
title: <GTProvider>
description: API Reference for the <GTProvider> component
---

## Overview
Source: https://generaltranslation.com/en/docs/react/api/components/gtprovider

The `<GTProvider>` component provides General Translation (GT) context to its children, enabling them to access translated content.
It is required for any client-side translations on your application.

### When to Use

- Wrap your entire application in `<GTProvider>` to enable translations on the client.
- When working with dictionaries, optionally specify an `id` to limit the dictionary data sent to the client, optimizing performance for large dictionaries.
- The `<GTProvider>` component is used for both [inline `<T>`](/docs/react/reference/t-reference) and [dictionaries](/docs/react/reference/dictionary-reference).

## Reference

### Props

<TypeTable
  type={{
    "children": {
      type: 'ReactNode',
      optional: false,
    },
    "projectId": {
      type: 'string',
      optional: true,
    },
    "id?": {
      type: 'string',
      optional: true,
      default: 'undefined',
    },
    "dictionary?": {
      type: 'Dictionary',
      optional: true,
      default: 'defaultDictionary',
    },
    "locales?": {
      type: 'string[]',
      optional: true,
    },
    "defaultLocale?": {
      type: 'string',
      optional: true,
      default: 'libraryDefaultLocale',
    },
    "locale?": {
      type: 'string',
      optional: true,
    },
    "cacheUrl?": {
      type: 'string',
      optional: true,
      default: "'https://cdn.gtx.dev'",
    },
    "runtimeUrl?": {
      type: 'string',
      optional: true,
      default: "'https://runtime.gtx.dev'",
    },
    "renderSettings?": {
      type: 'RenderSettings',
      optional: true,
      default: 'defaultRenderSettings',
    },
    "_versionId?": {
      type: 'string',
      optional: true,
    },
    "devApiKey?": {
      type: 'string',
      optional: true,
    },
    "metadata?": {
      type: 'object',
      optional: true,
    },
  }}
/>

### Description

| Prop | Description |
|-----------|-------------|
| `children` | Any component or the parents of any component that needs to translate or access translation information on the client side. These should include any components using `<T>`, `useGT`, or other translation utilities. |
| `projectId?` | The project ID required for General Translation cloud services. |
| `id?` | The ID of a nested dictionary to limit the data sent to the client. This is useful for large projects with extensive dictionaries. |
| `dictionary?` | The translation dictionary for the project. |
| `locales?` | The list of approved locales for the project. |
| `defaultLocale?` | The default locale to use if no other locale is found. |
| `locale?` | The current locale, if already set. |
| `cacheUrl?` | The URL of the cache service for fetching translations. |
| `runtimeUrl?` | The URL of the runtime service for fetching translations. |
| `renderSettings?` | The settings for rendering translations. |
| `_versionId?` | The version ID for fetching translations. |
| `devApiKey?` | The API key for development environments. |
| `metadata?` | Additional metadata to pass to the context. |

### Returns

`React.JSX.Element|undefined` containing the children that were passed to this component.

## Examples

### Basic usage

Wrap your application in `<GTProvider>` to add translation to your app.
Don't forget to add a [list of supported locales](/docs/reference/locale-strings#supported-locales) to enable translation.


```jsx title="index.js" copy
import { StrictMode } from "react";
import { createRoot } from "react-dom/client";
import "./index.css";
import App from "./App.tsx";
import { GTProvider } from "gt-react";

createRoot(document.getElementById("root")!).render(
  <StrictMode>
    <GTProvider locales={['es', 'fr']}> // Enable Spanish and French // [!code highlight]
      <App />
    </GTProvider> // [!code highlight]
  </StrictMode>
);
```

### Dictionaries

You can also pass a dictionary to the `<GTProvider>` component and then access it with the [`useDict()`](/docs/next/api/components/dictionary/useDict) hook.

```jsx title="index.js" copy
import dictionary from "./dictionary.js";

createRoot(document.getElementById("root")!).render(
  <StrictMode>
    <GTProvider locales={['es', 'fr']} dictionary={dictionary}> // [!code highlight]
      <App />
    </GTProvider>
  </StrictMode>
);
```

For more information on using dictionaries, check out this [guide](/docs/react/reference/dictionary-reference).

### Adding configuration

If you're not a fan of passing props directly to the `<GTProvider>` component, you can create a configuration file and pass it to the component.
It also directly integrates with the [`gtx-cli translate` command](/docs/cli/translate), so you don't have to specify things like locales manually as a parameter.

```json title="gt.config.json" copy
{
  "projectId": "your-project-id",
  "locales": ["es", "fr"],
  "defaultLocale": "en-US",
  "_versionId": "translation-version-id" // allows for rolling back to previous translations (autogenerated by the CLI)
}
```

All you have to do is just pass this to the `<GTProvider>` component.

```jsx title="index.js" copy
import config from "../gt.config.json";

createRoot(document.getElementById("root")!).render(
  <StrictMode>
    <GTProvider {...config}> // [!code highlight]
      <App />
    </GTProvider>
  </StrictMode>
);
```

### Custom translation loader

You can use the `loadTranslations` prop to load translations from a custom source.
This is useful when you need to load translations from a different source, such as a custom API.

```jsx title="index.js" copy
import loadTranslations from "./loadTranslations";

createRoot(document.getElementById("root")!).render(
  <StrictMode>
    <GTProvider locales={['es', 'fr']} loadTranslations={loadTranslations}> // [!code highlight]
      <App />
    </GTProvider>
  </StrictMode>
);
```

### Render settings

Render settings controls the loading behavior for translations.
There are two fields: `timeout` and `method`.

- `timeout` is the number of milliseconds to wait for a translation to load before showing a fallback (default: `8000ms`).
- `method` is the method to use to load translations (`"skeleton"`, `"replace"`, or `"default"`).

```jsx title="index.js" copy
<GTProvider renderSettings={{ method: "skeleton", timeout: 1000 }}>
  <App />
</GTProvider>
```

Each render setting dictates different loading behavior:
`"skeleton"` will return `null` until the translations are loaded.
`"replace"` will return the fallback content until the translations are loaded.
`"default"` will return `null` until the translations are loaded, unless the fallback locale has the same language as the current locale (i.e., `en-US` and `en-GB`).
In this case, it will return the fallback content immediately until the translations are loaded.





---

## Notes
 * The `<GTProvider>` must wrap all [`<T>` components](/docs/react/api/components/t) and other translation-related functions. Learn more [here](/docs/react/reference/t-reference#gtprovider).

## Next steps
 * Learn more about the [`<T>` component](/docs/react/reference/t-reference) for translating text and components.
 * Check out translation components and functions: [`<T>`](/docs/react/api/components/t), [`useGT()`](/docs/react/api/strings/useGT), or [`useDict()`](/docs/react/api/dictionary/useDict).

---
title: <LocaleSelector>
description: API Reference for the <LocaleSelector> component
---

## Overview
Source: https://generaltranslation.com/en/docs/react/api/components/localeSelector

The `<LocaleSelector>` component is used to select the user's locale.
It is a client side component that provides a dropdown to select the locale.

## Reference

### Returns

A component that allows the user to select their locale.

---

## Examples

### Basic Usage

```jsx
import { LocaleSelector } from 'gt-react';

export default function MyComponent() {
    return (
        <LocaleSelector />
    );
}
```

---

## Notes
* The `<LocaleSelector>` component allows you to select a different locale for your app.
* The `<LocaleSelector>` component is not available in the server component.

## Next Steps

* Learn more about the [`useLocale()`](/docs/react/api/helpers/useLocale) hook.
* Learn more about locale strings [here](/docs/reference/locale-strings).


---
title: <Num>
description: API Reference for the <Num> component
---
## Overview
Source: https://generaltranslation.com/en/docs/react/api/components/num

The `<Num>` component renders a formatted number string in the user's locale, and can be customized with formatting options.
```jsx
<Num>{100}</Num>
// Output: 100
```
All reformatting is handled locally using the [`Intl.NumberFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) library.


## Reference

### Props

<TypeTable
  type={{
    "children?": {
        type: 'any',
        optional: true,
        default: 'undefined',
    },
    "name?": {
        type: 'string',
        optional: true,
        default: 'undefined',
    },
    "value?": {
        type: 'string | number',
        optional: true,
        default: 'undefined',
    },
    "options?": {
        type: 'Intl.NumberFormatOptions',
        optional: true,
        default: '{}',
    },
    "locales?": {
        type: 'string[]',
        optional: true,
        default: 'undefined',
    },
  }}
/>

### Description
| Prop     | Description                                                                                                                                       |
|----------|---------------------------------------------------------------------------------------------------------------------------------------------------|
| `children` | The content to render inside the component. Typically a number, which will be formatted according to the current locale and options. If provided, it takes precedence over the `value` prop. |
| `name`     | Optional name for the number field, used for metadata purposes.                                                                                   |
| `value`    | The default value for the number. Can be a string or number. Strings will be parsed into numbers before formatting.                               |
| `options`  | Optional formatting options for the number, following the [`Intl.NumberFormatOptions`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) specification. Use this to define styles such as currency, decimal precision, etc. |
| `locales`   | Optional locales to specify the formatting locale. If not provided, the default user's locale is used. Read more about specifying locales [here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).                                            |

### Returns

`JSX.Element` containing the formatted number as a string.

---

## Examples

### Basic Example
In this example, `item.quantity` will be reformatted according to the user's locale.

```jsx title="QuantityDisplay.jsx" copy
import { Num } from 'gt-react';

export default function Inventory(item) {
  return (
    <Num> {item.quantity} </Num>  // [!code highlight]
  );
}
```

### Specifying locales
By default, locales are determined by the user's browser settings,
but you can explicitly set the locale for the `<Num>` component.

```jsx title="PriceDisplay.jsx" copy
import { Num } from 'gt-react';

export default function CountDisplay(item) {
  return (
    <Num locales={['fr-FR']}> {item.count} </Num> // [!code highlight]
  );
}
```

### Translating `<Num>` components
Let's say that you want your number to be in a larger sentence that gets translated.
Just add the `<T>` components around the content.

```jsx title="DynamicPriceDisplay.jsx" copy
import { T, Num } from 'gt-react';

export default function DynamicPriceDisplay(item) {
  return (
    <T id="price">
      There are <Num> {item.count} </Num> units available. // [!code highlight]
    </T>
  );
}
```

### Custom formatting
`<Num>` uses the [`Intl.NumberFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) library for formatting.
```jsx
import { Num } from 'gt-react';

export default function CustomFormat(number) {
  return (
    <Num
      options={{ style: "decimal", maximumFractionDigits: 2 }}
    >
      {number}
    </Num>
  );
}
```

---

## Notes
 * The `<Num>` component is used to format numbers according to a user's locale.
 * When inside of a `<T>` component, make sure to wrap all dynamic numbers in a `<Num>` component.

## Next steps
 * For more details and usage examples of the `<Num>` component and other variable components like `<Currency>`, `<DateTime>`, and `<Var>`,
   see the [Using Variable Components](/docs/react/reference/using-variable-components) documentation.

---
title: <Plural>
description: API Reference for the <Plural> component
---

## Overview
Source: https://generaltranslation.com/en/docs/react/api/components/plural

We use the `<Plural>` component for handling conjugating sentences.
Think of the difference between the sentences: "You have one item." and "You have two items."

In English, you have to define two different sentences based on the number of items.
In other languages, you have to define up to six.

```jsx
const count = 1;
<Plural n={count}
  singular={You have one item.}
  plural={You have some items.}
/>
```

## Reference

### Props

<TypeTable
  type={{
    "n": {
      description: 'The number used to determine the plural form.',
      type: 'number',
      optional: false,
    },
    "children?": {
      description: 'Fallback when no plural forms match',
      type: 'any',
      optional: true,
      default: 'undefined',
    },
    "locales?": {
      type: 'string[]',
      optional: true,
      default: 'undefined',
    },
    "[key]: string": {
      type: 'string | JSX.Element',
      optional: false,
    },
  }}
/>

The `[key]: string` syntax indicates arbitrary keys representing potential pluralization branches.
For example, branches like `singular` and `plural` can be added as parameters.

### Description
| Prop Name | Description |
|-----------|-------------|
| `n` | The number used to determine the plural form. This is required for pluralization. |
| `children` | Fallback content to render if no matching plural branch is found. |
| `locales`   | Optional locales to specify the formatting locale. If not provided, the default user's locale is used. Read more about specifying locales [here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).                                            |
| `[key]: string` | Branches representing plural forms. The exact branches depend on the locale. |


### Returns

`JSX.Element` containing the content corresponding to the plural form of `n`, or the fallback content.

### Throws

`Error` if `n` is not provided or is not a valid number.

---

## Which forms should I add?

You only need to use the plural forms in your language.

The possible forms are: `"singular"`, `"plural"`, `"dual"`, `"zero"`, `"one"`, `"two"`, `"few"`, `"many"`, `"other"`.

 * If you are a developer using `"en-US"`, only use two: `"singular"` and `"plural"`.
 * If you are a developer in `"zh-CN"`, only use `"other"`.

Read more about the different forms [here](https://cldr.unicode.org/index/cldr-spec/plural-rules).


---

## Examples

### Basic usage
Use the `<Plural>` component to handle pluralization.

```jsx title="BasicExample.jsx" copy
import { Plural } from 'gt-react';

export default function ItemCount({ count }) {
  return (
    <Plural n={count} // [!code highlight]
      singular={You have one item.}
      plural={You have some items.}
    />
  );
}
```

### Fallbacks
You can provide a fallback in case the value passed to `n` has no matching branches.

```jsx title="FallbackExample.jsx" copy
import { Plural } from 'gt-react';

export default function ItemCount({ count }) {
  return (
    <Plural n={count}
      singular={You have one item.}
    >
      You have some items. // [!code highlight]
    </Plural>
  );
}
```

### Translating plurals
All you have to do to translate, is add the `<T>` component.

```jsx title="PluralExample.jsx" copy
import { T, Plural } from 'gt-react';

export default function ItemCount({ count }) {
  return (
  <T id="itemCount">
    <Plural n={count}
      singular={You have an item.} // [!code highlight]
      plural={You have some items.} // [!code highlight]
    />
  );
}
```

### Adding variables
What if we want to add some variables to the pluralized sentence?

```jsx title="PluralExample.jsx" copy
import { T, Plural, Num } from 'gt-react';

export default function ItemCount({ count }) {
  return (
    <Plural n={count}
      singular={You have <Num>{count}</Num> item.} // [!code highlight]
      plural={You have <Num>{count}</Num> items.} // [!code highlight]
    />
  );
}
```

When inside of a `<T>` component, wrap all dynamic content with a `<Currency>`, `<DateTime>`, `<Num>`, or `<Var>`.
```jsx
<T id="itemCount">
  <Plural n={count}
    singular={You have <Num>{count}</Num> item.} // [!code highlight]
    plural={You have <Num>{count}</Num> items.} // [!code highlight]
  />
</T>
```

---

## Notes
 * The `<Plural>` component is used to handle pluralization.
 * The available plural branches (e.g., one, other, few, many) depend on the locale and follow [Unicode CLDR pluralization rules](https://cldr.unicode.org/index/cldr-spec/plural-rules).

## Next steps
 * For more examples, check out the reference doc on branching components [here](/docs/react/reference/using-branching-components).
 * For more advanced usage, combine `<Plural>` with variable components like `<Currency>`, `<DateTime>`, `<Num>`, and `<Var>`. Read more about variable components [here](/docs/react/reference/using-variable-components).


For a deeper dive into pluralization and branching, visit [Using Branching Components](/docs/react/reference/using-branching-components).

---
title: <T>
description: API Reference for the <T> component
---

## Overview
Source: https://generaltranslation.com/en/docs/react/api/components/t

The `<T>` component is the main translation method in `gt-react`.

```jsx
<T id="example"> // [!code highlight]
    Today, I went to
    {" the store"}
    <p>
        to <b>buy</b> some <i>groceries</i>.
    </p>
</T> // [!code highlight]
```

The `<T>` component supports translating plain text as well as complex JSX structures.
Additionally, it provides features for handling variables, plurals, and context-specific translations.

<Callout>
**Buildtime Translation:**
`<T>` translations occur at buildtime.
This means translation happens before deployment to reduce latency.
Make sure to follow the [deployment guide here](/docs/react/tutorials/quickdeploy).
</Callout>



## Reference

### Props
<TypeTable
  type={{
    "children": {
        type: 'any',
        optional: false,
    },
    "id": {
        type: 'string',
        optional: false,
    },
    "context?": {
        type: 'string',
        optional: true,
        default: 'undefined',
    },
  }}
/>

### Descriptions
| Prop            | Description                                                                                     |
|-----------------|-------------------------------------------------------------------------------------------------|
| `children`  | The content to be translated. This can include plain text or JSX structures.                    |
| `id`        | A unique identifier for the translation string. This ensures consistent translation across your app. |
| `context`   | Additional context to refine the translation. Useful for resolving ambiguous phrases.           |

### Returns


`React.JSX.Element|undefined` which contains the rendered translation or fallback content based on the provided configuration.

---

## Behavior

### Production
During the CD process, any children inside of a `<T>` will be translated before your application is deployed.
This ensures fast load times for all locales, but it can only translate content known at build time.

Once generated, translations are either (1) stored in the CDN or (2) stored in your app's build output, according to your configuration.
From there, the translated content is served to your users.
If a translation is not found, it will fallback to the originial content.

Make sure to follow the [deployment guide here](/docs/react/tutorials/quickdeploy).

### Development
During development, the `<T>` function will translate content on demand.
This is useful for prototyping what your app will look like in different languages.
Remember to add a Dev API key to your environment to enable this behavior.

While loading, `<T>` will return undefined unless languages are similar (en-US vs en-GB), though this behavior can be customized with render settings.
If an error occurs, `<T>` will return the original content.

You will see a delay during on-demand translation in development.
This delay will not occur during for production builds as everything will already be translated.

---

## Examples

### Basic usage

The `<T>` component can translate simple strings using an `id` and its children.
Remember, the `<T>` component must be used inside a [`<GTProvider>`](/docs/react/reference/t-reference#gtprovider) to access the translations.

```jsx title="SimpleTranslation.jsx" copy
import { T } from 'gt-react';

export default function Greeting() {
    return (
        <T id="greeting"> // [!code highlight]
            Hello, world!
        </T> // [!code highlight]
    );
}
```


### With variables
The `<T>` component can include variables for dynamic content within translations.

```jsx title="DynamicGreeting.jsx" copy
import { T, Var } from 'gt-react';

export default function DynamicGreeting(user) {
    return (
        <T id="greeting">
            Hello, <Var>{user.name}</Var>! // [!code highlight]
        </T>
    );
}
```

### With plurals
The `<T>` component also supports pluralization using the `<Plural>` component.

```jsx title="ItemCount.jsx" copy
import { T, Plural } from 'gt-react';

export default function ItemCount({ count }) {
    return (
        <T id="item_count">
            <Plural n={count}  // [!code highlight] 
                singular={<>You have an item.</>}  // [!code highlight] 
                plural={<>You have items.</>}  // [!code highlight] 
            />  // [!code highlight]
        </T>
    );
}
```

### Limitations

The `<T>` component does not translate content that is dynamic.

```jsx title="DynamicContent.jsx" copy
import { T } from 'gt-react';

export default function DynamicContent({greeting}) {
    return (
        <T>
            {greeting} // will create an error // [!code highlight]
        </T>
    );
}
```

The `<T>` function translates its descendants.

```jsx title="Example.jsx" copy
import { T } from 'gt-react';

const ValidTranslation = ({ children }) => (<div><b>{children}</b></div>);

const InvalidTranslation = ({ children }) => (<div><b>No translation</b></div>);

export default function Example() {
    return (
        <T>
            <div><b>This is valid!</b></div> // will be translated // [!code highlight]

            <ValidTranslation> // will be translated // [!code highlight]
                Hello, world! // [!code highlight]
            </ValidTranslation> // [!code highlight]

            <InvalidTranslation /> // will not be translated
        </T>
    );
}
```
<Callout>
    **Note:** A good rule of thumb is that any content that is *literally* between the two `<T>` in the file will be translated.
    You can always add another `<T>` to translate the content that is not being translated, though nesting `<T>` components is not recommended.
</Callout>

---

## Notes
 * The `<T>` component is designed for translating content in your application. It is the primary method for localization in `gt-react`.
 * Use the `<T>` component to translate plain text or JSX structures, including variables and pluralization.
 * Ensure the `<T>` component is wrapped in a [`<GTProvider>`](/docs/react/reference/t-reference#gtprovider) to access the translation context.

## Next steps
 * Look into more advanced features like on-demand translation, variables, context, and handling plurals, refer to the [`<T>` Design Patterns](/docs/react/reference/t-reference) documentation.
 * For translating strings, look into [`useGT()`](/docs/react/api/strings/useGT).
 * Checkout [using variable components](/docs/react/reference/using-variable-components) and [using branching components](/docs/react/reference/using-branching-components) for more advanced translation patterns.

---
title: <Var>
description: API Reference for the <Var> component
---

## Overview
Source: https://generaltranslation.com/en/docs/react/api/components/var
The `<Var>` component is used to render content that should not be translated.
This is useful for rendering variables, code snippets, or other content that should not be translated.
Additionally, this is useful for rendering content that should be kept private such as API Keys or personal information.

```jsx
<Var>{user.name}</Var>
```

The `<Var>` component is always used inside of a `<T>` component.
Think of it as a catch all for dynamic values that do not fit in to the category of `<Currency>`, `<DateTime>`, or `<Num>`.

## Reference

### Props

<TypeTable
    type={{
        "children?": {
            type: 'JSX.Element',
            optional: true,
            default: 'undefined',
        },
        "name?": {
            type: 'string',
            optional: true,
            default: 'undefined',
        },
        "value?": {
            type: 'string',
            optional: true,
            default: 'undefined',
        },
    }}
/>

### Description
| Prop      | Description                                                                                                                                            |
|-----------|--------------------------------------------------------------------------------------------------------------------------------------------------------|
| `children`  | The content to render inside the component. If provided, it will take precedence over value. |
| `value`     | Optional default value to be displayed if children is not provided. Can be a string.                                  |


### Returns
`JSX.Element` containing the content that should not be translated.

---

## Examples

### Basic example
The `<Var>` component must be used inside of a `<T>` component.
```jsx title="Address.jsx" copy
import { T, Var } from 'gt-react'

export default function Example(user) {
  return (
    <T>
      Translate this text!
      Your name is: <Var>{user.name}</Var> // [!code highlight]
      <Var><p>Do not translate this text</p></Var> // [!code highlight]
    </T>
  );
}
```

---

## Notes
 * Variable Components are essential for maintaining untranslatable, dynamic content in translations.
 * Always use Variable Components within a `<T>` component.
 * Components like `<Num>`, `<Currency>`, and `<DateTime>` provide localization features to ensure accurate formatting.

## Next Steps
 * For a more in depth discussion and usage examples for the `<Var>` component and other variable components like `<Currency>`, `<DateTime>`, and `<Num>`,
  see [Using Variable Components](/docs/react/reference/using-variable-components) documentation.
 * Learn more about formatting options for specific Variable Components in the [API Reference](/docs/react/api/components/var).


---
title: loadDictionary()
description: API Reference for the loadDictionary() function.
---

## Overview
Source: https://generaltranslation.com/en/docs/react/api/config/load-dictionary

`loadDictionary()` will load a translation json file for a given locale.

This function is intended for those who which to use `gt-react` as a stand-alone i18n library.

This function is primarily used to migrate existing projects with i18n to General Translation while keeping their existing translations.


If multiple translations exist, translations from dictionaries loaded by `loadDictionary()` will always take precedence over others.
`loadDictionary()` only supports the use of JSON files with string translations.


## Reference

### Parameters
<TypeTable
  type={{
    "locale": {
        type: 'string',
        optional: false,
    },
  }}
/>

### Description
| Type | Description |
| ---- | ----------- |
| `locale` | The locale for which translations should be loaded. |

### Returns

A `Promise<any>` that resolves to dictionary mapping ids to translations for the given locale.

---

## Setup

Generally, you will load the dictionary from the `./public/locales` directory.

Define your `loadDictionary()` in a file.
Make sure to have the function return a promise that resolves to an object with translations for the given locale.

```jsx title="src/loadDictionary.js"
export default async function loadDictionary(locale) {
  const translations = await import(`../public/locales/${locale}.json`);
  return translations.default;
}
```

Then pass it to your `<GTProvider>` component:

```jsx title="src/App.js"
import { GTProvider } from 'gt-react';
import loadDictionary from './loadDictionary';

<GTProvider loadDictionary={loadDictionary}>
  <App />
</GTProvider>
```


<Callout>
  **Question:** What's the difference between [`loadTranslations()`](/docs/react/api/config/load-translations) and [`loadDictionary()`](/docs/react/api/config/load-dictionary)?

  * [`loadTranslations()`](/docs/react/api/config/load-translations) is used to define custom loading behavior for fetching translations for your app.
  This could be getting translations from a CDN, a database, or your app's bundle.
  These are usually machine generated translations, managed by the cli tool, and not very user friendly to edit.
  * [`loadDictionary()`](/docs/react/api/config/load-dictionary) is intended for implementations of `gt-react` as a standalone library.
  Users bring their own translations and no translation infrastructure is used.
</Callout>

---

## Notes
 * `loadDictionary()` is used to load custom translations for your app.
 * Dictionaries loaded by `loadDictionary()` will take precedence over translations loaded by [`loadTranslations()`](/docs/react/api/config/load-translations).

## Next steps
 * If you want to write your own translations check out [custom translations](/docs/react/reference/stand-alone).
 * See [`loadTranslations()`](/docs/react/api/config/load-translations) for more information on writing a custom translation loader.



---
title: loadTranslations()
description: API Reference for the loadTranslations() function.
---

## Overview
Source: https://generaltranslation.com/en/docs/react/api/config/load-translations

The `loadTranslations()` function is the primary way to customize translation loading behavior.

In production, your translations need to be stored so that they can be rendered in your app.
By default, your translations will be stored in the GT CDN.
You can specify a `loadTranslations()` function to get translations from a different source, such as:
 * From your app's bundle (most common)
 * From a database
 * From an API
 * From a different CDN

We have integrated support for loading translations from local files in your app's bundle.
Follow [this guide](/docs/react/reference/local-tx) to set up local translations in your React app.

## Reference

### Parameters
<TypeTable
  type={{
    "locale": {
        type: 'string',
        optional: false,
    },
  }}
/>

### Description
| Type | Description |
| ---- | ----------- |
| `locale` | The locale for which translations should be loaded. |

### Returns

A `Promise<any>` that resolves to either a string or JSX object containing the translations for the given locale.

---

## Setup

You must import the `loadTranslations()` function and assign it as a prop to the `<GTProvider>` component.

```jsx title="src/index.js"
import loadTranslations from './loadTranslations';

createRoot(document.getElementById("root")!).render(
  <StrictMode>
    <GTProvider locales={['es', 'fr']} loadTranslations={loadTranslations}> // [!code highlight]
      <App />
    </GTProvider>
  </StrictMode>
);
```

---

## Examples

### Load translations from local files

When configured to use [local translations](/docs/react/reference/local-tx), the [`gtx-cli translate`](/docs/cli/translate) command, translations are saved to the `./src/_gt` directory.

```js title="loadTranslations.js"
export default async function loadTranslations(locale) {
  const translations = await import(`./_gt/${locale}.json`);
  return translations.default;
};
```

### Load translations from your own CDN

```js title="loadTranslations.js"
export default async function loadTranslations(locale) {
  try {
    const translations = await fetch(`https://your-cdn.com/translations/${locale}.json`);
    const data = await translations.json();
    return data;
  } catch (e) {
    console.error(e);
    return {};
  }
};
```

---

## Notes
 * `loadTranslations()` gives you the ability to customize how translations are loaded in your app in production.
 * Its most common use case is for adding [local translations](/docs/react/reference/local-tx)

## Next steps
 * Learn about why you might want to use [local translations](/docs/react/reference/local-tx)

---
title: useDict()
description: API Reference for the useDict hook
---

## Overview
Source: https://generaltranslation.com/en/docs/react/api/dictionary/useDict

`useDict()` is used to access string translations from the [translation dictionary](/docs/react/reference/dictionary-reference).
It must be used within a component wrapped by a [`<GTProvider>`](/docs/react/api/components/gtprovider).

```jsx
const d = useDict(); // Get the translation function
d('greeting.hello'); // pass the id to get a translation
```


<Callout>
  `useDict()` uses a [dictionary](/docs/react/reference/dictionary-reference) to store all content for translation.
  This is different from using the [`<T>` component](/docs/react/reference/t-reference) for translation.
  If you are interested in only using `<T>` components for translation, then this document is not relevant.
</Callout>

## Reference

### Parameters

<TypeTable
  type={{
    "id?": {
        type: 'string',
        optional: true,
        default: 'undefined',
    },
  }}
/>

### Description

| Prop | Description |
| ---- | ----------- |
| `id` | An optional prefix to prepend to all translation keys. This is useful for working with nested dictionary values.|


### Returns

A translation function `d()` that, given an id, will return the translated version of the corresponding entry

```jsx
(id: string, options?: DictionaryTranslationOptions) => React.ReactNode
```

| Name                  | Type | Description                                                                 |
|-----------------------|--|-----------------------------------------------------------------------------|
| `id`             | `string` | The id of the entry to be translated                                     |
| `options?`            | [`DictionaryTranslationOptions`](/docs/react/api/types/DictionaryTranslationOptions) | Translation options to customize the behavior of `d()`. |

---

## Examples

### Basic Usages
Every entry in your dictionary gets translated.

```jsx title="dictionary.jsx" copy
const dictionary = {
  greeting: "Hello, Bob", // [!code highlight]
};
export default dictionary;
```

When we want to access these entries, we call `useDict()`.
This returns a function that accepts the key of a translation from the dictionary.

You must pass the dictionary to the `GTProvider` component.

```jsx title="TranslateGreeting.jsx" copy
import { useDict } from 'gt-react';
import dictionary from "./dictionary.json"

export default async function TranslateGreeting() {
  const d = useDict(); // [!code highlight]
  return (
    <GTProvider dictionary={dictionary}>
      <p>
        {d('greeting')} // [!code highlight]
      </p>
    </GTProvider>
  );
}
```

### Using variables [#variables]
In order to pass values, you must (1) assign an identifier and (2) reference the identifier when calling the `d()` function.

In this example, we use `{}` to pass variables to the translations.
In the dictionary, we assign identifier `{userName}`.

```jsx title="dictionary.jsx" copy
// [!code word:userName]
const dictionary = {
  greeting: "Hello, {userName}!", // [!code highlight]
};
export default dictionary;
```

```jsx title="TranslateGreeting.jsx" copy
// [!code word:userName]
import { useDict } from 'gt-react';

export default async function TranslateGreeting() {
  const d = useDict();
  
  // Hello Alice!
  const greetingAlice = d('greeting', { userName: "Alice" }); // [!code highlight]

  return (
    <p>
      {greetingAlice} // Hello, Alice // [!code highlight]
    </p>
  );
}
```

### Using prefixes

We can use prefixes to only translate a subset of the dictionary.
```jsx  title="dictionary.jsx" copy
const dictionary = {
  prefix1: { // [!code highlight]
    prefix2: { // [!code highlight]
      greeting: "Hello, Bob",
    }
  }
};
export default dictionary;
```
Because we added the value `'prefix1.prefix2'` to the `useDict` hook, all of the keys are prefixed with `prefix1.prefix2`:
```jsx title="UserDetails.jsx" copy
import { useDict } from 'gt-react';

export default function UserDetails() {
  const d = useDict('prefix1.prefix2'); // [!code highlight]
  return (
    <div>
      <p>{d('greeting')}</p> // greeting => prefix1.prefix2.greeting // [!code highlight]
    </div>
  );
}
```
--- 
## Notes
 * The `useDict()` function allows you to access dictionary translations.
 * The `useDict()` hook can only be used within a component wrapped by a [`<GTProvider>` component](/docs/react/api/components/gtprovider).

## Next Steps
 * Learn more about using dictionaries in the [dictionaries reference](/docs/react/reference/dictionary-reference).

---
title: useDefaultLocale()
description: API Reference for the useDefaultLocale hook
---

## Overview
Source: https://generaltranslation.com/en/docs/react/api/helpers/useDefaultLocale

The `useDefaultLocale` hook retrieves the application's default locale from the [`<GTProvider>` context](/docs/react/api/components/gtprovider).
This locale represents the fallback language for your app and is typically used when a user's preferred locale is unavailable.

<Callout>
    Ensure your app is wrapped in a [`<GTProvider>`](/docs/react/api/components/gtprovider).
</Callout>

See [`<GTProvider>`](/docs/react/api/config/gtprovider) for configuration.
If no default locale is specified it defaults to `'en-US'`.


## Reference

### Returns

A string representing the application's default locale, e.g., `'en-US'`.

---

## Examples

### Basic Usage

Retrieve the application's default locale and display it in your component.

```jsx title="DefaultLocale.jsx" copy
import { useDefaultLocale } from 'gt-react';

export default function DefaultLocale() {
    const defaultLocale = useDefaultLocale();// [!code highlight]

    return <p>Default locale: {defaultLocale}</p>; // Display the default locale
}
```

## Notes
 * The `useDefaultLocale()` hook relies on the [`<GTProvider>`](/docs/react/api/components/gtprovider) to access the context.
   Ensure your app is wrapped with a provider at the root level.
 * Learn more about locale strings [here](/docs/reference/locale-strings).

## Next Steps
 * See [`useLocale`](/docs/react/api/helpers/useLocale) to retrieve the user's locale.

---
title: useLocale()
description: API Reference for the useLocale hook
---

## Overview
Source: https://generaltranslation.com/en/docs/react/api/helpers/useLocale

The `useLocale` hook retrieves the user's current locale from the [`<GTProvider>` context](/docs/react/api/components/gtprovider).
The returned locale is [formatted as a string](/docs/reference/locale-strings), e.g., `'en-US'`.

<Callout>
    Ensure your app is wrapped in a [`<GTProvider>`](/docs/react/api/components/gtprovider).
</Callout>

## Reference

### Returns

A string representing the user's current locale, e.g., `'en-US'`.

---

## Fallback behavior
When an unsupported locale is requested, a fallback locale will be selected.

For instance, in the event of an unsupported locale,
if (1) the user has configured multiple preferred locales in their browser settings,
and (2) one of these locales are supported by your application,
then the locale will fallback to the best language.

Additionally, if no possible fallback locales are available,
but two locales share the same language (e.g., `en-US` and `en-GB`),
then the locale will fallback to the supported locale that shares the same language.

If neither condition can be met, then the the default locale will be used.

See [`<GTProvider>`](/docs/react/api/config/gtprovider) for information on configuring supported locales.

---

## Examples

### Basic Usage

Retrieve the current locale and display it in your component.

```jsx title="CurrentLocale.jsx" copy
import { useLocale } from 'gt-react';

export default function CurrentLocale() {
    const locale = useLocale(); // [!code highlight]
    return <p>Current locale: {locale}</p>;
}
```

---


## Notes
 * The `useLocale()` hook relies on the [`<GTProvider>`](/docs/react/api/components/gtprovider) to access the context.
   Ensure your app is wrapped with a provider at the root level.
 * Learn more about locale strings [here](/docs/reference/locale-strings).

## Next Steps
 * Learn how to manage and specify supported locales in your application with [locale management](/docs/react/reference/local-management).
 * To access the fallback language, see [`useDefaultLocale()`](/docs/react/api/helpers/useDefaultLocale).

---
title: useLocaleSelector()
description: API Reference for the useLocaleSelector hook
---

## Overview
Source: https://generaltranslation.com/en/docs/react/api/helpers/useLocaleSelector

This hook returns the current locale, the list of locales, and the [`useSetLocale()`](/docs/react/api/helpers/useSetLocale) hook.
This is meant for easy use when creating your own locale selector component.

If you don't want to implement your own, you can use the [`<LocaleSelector>`](/docs/react/api/components/localeSelector) component instead.

## Reference

### Returns

An object containing the current locale, the list of locales, and the [`useSetLocale()`](/docs/react/api/helpers/useSetLocale) hook.

---

## Examples

### `<LocaleSelector>`

This is the example implementation of the [`<LocaleSelector>`](/docs/react/api/components/localeSelector) component.

```jsx
export default function LocaleSelector({
  locales: _locales,
  ...props
}: {
  locales?: string[];
  [key: string]: any;
}): React.JSX.Element | null {
  // Get locale selector properties
  const { locale, locales, setLocale } = useLocaleSelector(
    _locales ? _locales : undefined
  );

  // Get display name
  const getDisplayName = (locale: string) => {
    return capitalizeLanguageName(
      getLocaleProperties(locale).nativeNameWithRegionCode
    );
  };

  // If no locales are returned, just render nothing or handle gracefully
  if (!locales || locales.length === 0 || !setLocale) {
    return null;
  }

  return (
    <select
      {...props}
      // Fallback to an empty string if currentLocale is undefined
      value={locale || ''}
      onChange={(e) => setLocale(e.target.value)}
    >
      {/* Optional fallback for when no locale is set */}
      {!locale && <option value='' />}

      {locales.map((locale) => (
        <option key={locale} value={locale} suppressHydrationWarning>
          {getDisplayName(locale)}
        </option>
      ))}
    </select>
  );
}
```

---

## Notes

- This hook is client-side only.
- Learn more about locale strings [here](/docs/reference/locale-strings).

## Next Steps

- Learn more about the [`<LocaleSelector>`](/docs/react/api/components/localeSelector) component.
- Learn more about the [`useLocale()`](/docs/react/api/helpers/useLocale) hook.


---
title: useSetLocale()
description: API Reference for the useSetLocale hook
---

## Overview
Source: https://generaltranslation.com/en/docs/react/api/helpers/useSetLocale

The `useSetLocale` hook is used to set the user's locale.
This is client-side only, and it must be wrapped in a [`<GTProvider>`](/docs/react/api/components/gtprovider) component.

## Reference

### Returns

A function that sets the user's locale.

---

## Examples

### Basic Usage

```jsx
import { useSetLocale } from 'gt-react';

export default function MyComponent() {
  const setLocale = useSetLocale();

  return <button onClick={() => setLocale('en')}>Set Locale</button>;
}
```

---

## Notes

- The `useSetLocale()` is used to set the user's locale.
- Learn more about locale strings [here](/docs/react/reference/locale-strings).

## Next Steps

- Learn more about the [`<GTProvider>`](/docs/react/api/components/gtprovider) component.
- Learn more about the [`useLocale()`](/docs/react/api/helpers/useLocale) hook.


---
title: useGT()
description: API Reference for the useGT() string translation function
---

## Overview
Source: https://generaltranslation.com/en/docs/react/api/strings/useGT

The `useGT()` function is a hook for translating strings at build time.

```jsx
const t = useGT();

<p>{  t('This text will be translated')  }</p>;
```

<Callout>
**Buildtime Translation:**
`useGT()` translations occur at buildtime, before your app deploys.
Though you can pass variables to the translated string, you can only translate content known at build time.
</Callout>

## Reference
### Parameters
None

### Returns

A callback function, `t()`, which translates the provided content.

```jsx
(content: string, options?: InlineTranslationOptions) => string
```

| Name                  | Type | Description                                                                 |
|-----------------------|--|-----------------------------------------------------------------------------|
| `content`             | `string` | The string content to be translated.                                     |
| `options?`            | [`InlineTranslationOptions`](/docs/react/api/types/InlineTranslationOptions) | Translation options to customize the behavior of `t()`. |

---

## Behavior


### Production
During the CD process, any content inside of a `t()` function will be translated before your application is deployed.
This ensures fast load times for all locales, but it can only translate content known at build time.

Once generated, translations are either (1) stored in the CDN or (2) stored in your app's build output, according to your configuration.
From there, the translated content is served to your users.
If a translation is not found, it will fallback to the originial content.

Make sure to follow the [deployment guide here](/docs/react/tutorials/quickdeploy).

### Development
During development, the `t()` function will translate content on demand.
This is useful for prototyping what your app will look like in different languages.
Remember to add a Dev API key to your environment to enable this behavior.

You will see a delay during on demand translation in development.
This will not occur during for production builds.

---


## Example

### Basic Usage
You can use `useGT()` to translate strings.

```javascript copy
import { useGT } from 'gt-react';

export default function TranslateGreeting() {
  const t = useGT();

  return (
    <p>
      {t('Hello, Alice!')}
    </p>
  );
}
```
Note: "Alice" will be translated to the user's preferred language.


### Using variables [#variables]
You can pass variables to dictionary translations.

```javascript copy
import { useGT } from 'gt-react';

export default function TranslateGreeting() {
  const t = useGT();

  return (
    <p>
      {t('Hello, {name}!', { variables: { name: 'Alice' } })}
    </p>
  );
}
```
Note: "Alice" will not translated to the user's preferred language because it is a variable.

---

## Notes
 * The `useGT()` function is a hook for translating strings.
 * The `useGT()` hook can only be used within a component wrapped by a [`<GTProvider>` component](/docs/react/api/components/gtprovider).
 * Translations strings with `useGT()` happen before runtime, during the build process (unless in development).

## Next steps
 * See [`useDict()`](/docs/react/api/dictionary/useDict) for translating strings using a dictionary.
 * See [`InlineTranslationOptions`](/docs/react/api/types/InlineTranslationOptions) for more information on customizing translations.

---
title: DictionaryTranslationOptions
description: API Reference for the DictionaryTranslationOptions type
---

## Overview
Source: https://generaltranslation.com/en/docs/react/api/types/DictionaryTranslationOptions

The `DictionaryTranslationOptions` type is used to pass variables to dictionary entries and specify their render behavior.
It is used with [`useDict()`](/docs/react/api/dictionary/useDict) to pass variables to dictionary entries.


<Callout>
  **Buildtime Translation:**
  `useDict()` translations occur at buildtime; however, variables are never translated.
  Instead, they are inserted into the translation with formatting.
  Make sure to follow the [deployment guide here](/docs/next/tutorials/quickdeploy).
</Callout>


## Reference


### Parameters

<TypeTable
  type={{
    "variables?": {
        type: 'Record<string, any>',
        optional: true,
        default: 'undefined',
    },
    "variablesOptions?": {
        type: 'Record<string, Intl.NumberFormatOptions | Intl.DateTimeFormatOptions>',
        optional: true,
        default: 'undefined',
    },
  }}
/>

### Description

| Prop | Description |
| ---- | ----------- |
| `variables` | An object where the keys identify where each value is mapped to in the dictionary entry.|
| `variablesOptions` | An object where the keys identify the variable and the values define the variables behavior. See [`Intl.NumberFormatOptions`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) and [`Intl.DateTimeFormatOptions`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) for more information. |


---

## Examples

### Passing variables

In order to pass a variable to the dictionary entry, we need to do two things: (1) add a variable to the entry and (2) reference said variable in the [`d()`](/docs/react/api/dictionary/useGT) invocation.

First, we add a variable to the dictionary entry with the following syntax: `{username}`.
`username` is the name of the variable.
```jsx title="dictionary.ts"
// [!code word:username]
const dictionary = {
  greeting: {
    hello: 'Hello, {username}!',
  },
};

export default dictionary;
```

Next, we reference the variable:
```jsx title="Component.tsx"
// [!code word:username]
import { useDict } from 'gt-react';

const Component = () => {
  const d = useDict();
  return <div>{d('greeting.hello', { variables: { username : 'Brian123' } })}</div>;
};
```

### Adding variable options

Variable options allow you to customize how a variable is rendered.
It uses the same syntax as the `variables` object.

```jsx title="dictionary.ts"
// [!code word:account-balance]
const dictionary = {
  account: {
    balance: 'Your account balance: {account-balance}!',
  },
};

export default dictionary;
```

Next, we reference the variable:
```jsx title="Component.tsx"
// [!code word:account-balance]
import { useDict } from 'gt-react';

const Component = () => {
  const d = useDict();
  return <div>
    { d(
      'account.balance',
      {
        variables: { "account-balance" : 1000000 },
        variableOptions: { "account-balance": { style: 'currency', currency: 'USD' } }
      }
    ) }
  </div>;
};
```



---

## Notes
 * The `variables` object passes values to a dictionary entry.
 * The `variablesOptions` object defines the behavior of the variables.

### Next steps
 * See [dictionaries](/docs/react/reference/dictionary-reference) for more information on dictionaries and common practices.
 * See [`useDict()`](/docs/react/api/dictionary/useDict) for more information on dictionaries interface.
 * See [`Intl.NumberFormatOptions`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) and [`Intl.DateTimeFormatOptions`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) for more information on formatting options.


---
title: InlineTranslationOptions
description: API Reference for the InlineTranslationOptions type
---

## Overview
Source: https://generaltranslation.com/en/docs/react/api/types/InlineTranslationOptions

The `InlineTranslationOptions` type is used to pass variables to inline translations and specify their render behavior.
You can also add context and an identifier to the translation.
It is used with [`useGT()`](/docs/react/api/strings/useGT) to pass variables to inline string translations.

<Callout>
  **Buildtime Translation:**
  `useGT()` translations occur at buildtime; however, variables are never translated.
  Instead, they are inserted into the translation with formatting.
  Make sure to follow the [deployment guide here](/docs/next/tutorials/quickdeploy).
</Callout>

## Reference

### Parameters

<TypeTable
  type={{
    "context?": {
        type: 'string',
        optional: true,
        default: 'undefined',
    },
    "id?": {
        type: 'string',
        optional: true,
        default: 'undefined',
    },
    "variables?": {
        type: 'Record<string, any>',
        optional: true,
        default: 'undefined',
    },
    "variablesOptions?": {
        type: 'Record<string, Intl.NumberFormatOptions | Intl.DateTimeFormatOptions>',
        optional: true,
        default: 'undefined',
    },
  }}
/>

### Description

| Prop | Description |
| ---- | ----------- |
| `context` | The context of the content (used for translation). |
| `id` | An optional identifier for use with the translation editor. |
| `variables` | An object where the keys identify where each value is mapped to in the string.|
| `variablesOptions` | An object where the keys identify the variable and the values define the variables behavior. See [`Intl.NumberFormatOptions`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) and [`Intl.DateTimeFormatOptions`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) for more information. |

---

## Examples

### Context

In order to add context to the string, we use the `context` prop.

```jsx title="Component.tsx"
// [!code word:context]
import { useGT } from 'gt-react';

const Component = () => {
  const t = useGT();
  return <div>{t('Hello, world!', { context: 'a formal greeting' })}</div>;
};
```


### Passing variables
In order to add a variable to the string, we use the `{variable-name}` syntax, where curleybraces wrap the name of the variable.

```jsx title="Component.tsx"
// [!code word:username]
import { useGT } from 'gt-react';

const Component = () => {
  const t = useGT();
  return <div>{t('Hello, {username}! How is your day?', { variables: { 'username' : 'Brian123' } })}</div>;
};
```

### Adding variable options

You can also customize how your variables render with the `variablesOptions` prop.
```jsx title="Component.tsx"
// [!code word:account-balance]
import { useGT } from 'gt-react';

const Component = () => {
  const t = useGT();
  return <div>
    { t(
      'Your account balance: {account-balance}!',
      {
        variables: { "account-balance" : 1000000 },
        variableOptions: { "account-balance": { style: 'currency', currency: 'USD' } }
      }
    ) }
  </div>;
};
```


---

## Notes
 * `InlineTranslationOptions` is used for string translations.
 * The `variables` object passes values to the text.
 * The `variablesOptions` object defines the behavior of the variables.


## Next steps
 * See [`useGT()`](/docs/react/api/strings/useGT) for more information on inline string translations.
 * See [`Intl.NumberFormatOptions`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) and [`Intl.DateTimeFormatOptions`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) for more information on formatting options.


---
title: React Quickstart
description: Easily internationalize your React App with gt-react
---

## Overview
Source: https://generaltranslation.com/en/docs/react

This guide describes how to internationalize an existing [React](https://react.dev) project.

We will cover 4 simple steps:

<Steps>
  <Step>
    Running the setup wizard
  </Step>
  <Step>
    Adding the GTProvider
  </Step>
  <Step>
    Adding environment variables
  </Step>
  <Step>
    Cleaning up strings
  </Step>
</Steps>


---

### 1. Running the setup wizard

The setup wizard will walk you through the process of internationalizing your project.

```bash
npx gtx-cli@latest init
```

To manually setup your project, follow the [manual setup guide](#manual-setup).

The setup wizard will:

1. Install the required libraries.
2. Configure your project's supported locales.
3. Wrap your project's JSX components with the `<T>` component.
4. Generate a production API key and project ID for your project.

See the [setup wizard docs](/docs/cli/init) for more information.

### 2. Adding the GTProvider

Add the [`<GTProvider>`](/docs/react/api/components/gtprovider) component to your app.
Spread the config JSON object into the `config` prop.

```jsx title="App.js" copy
import { GTProvider } from "gt-react";
import MyApp from "./MyApp";
import config from "./gt.config.json";

export default function App() {
  return (
    // [!code highlight]
    <GTProvider {...config}> 
      <MyApp />
    </GTProvider> // [!code highlight]
  );
}
```

<Callout>
  For some React frameworks, the setup wizard will automatically add the GTProvider to your app.
  If this is the case, you can skip this step.
</Callout>

### 3. Adding environment variables 

The setup wizard will create a `.env.local` file for you in the root of your project containing your production API key and project ID.

However, in order to use `gt-react` in development mode, you will need to add a development API key instead of a production one.


<Steps>
    <Step>
        Navigate to the [Dashboard](https://generaltranslation.com/dashboard).
            * Navigate to the **Developer Keys** page in the sidebar.
    </Step>

    <Step>
        Click **Create Dev API Key** then copy the API key and Project ID to your clipboard.
    </Step>
    <Step>
        Add the Project ID and API Key to your environment variables.
        Depending on your React framework, the environment variables may look slightly different.
        These instructions are for **DEVELOPMENT ENVIRONMENTS ONLY**.
        <Tabs items={["Vite", "Next.js Pages Router", "Gatsby", "RedwoodJS",  "create-react-app", "Other"]}>
            <Tab value="Vite">
            ```bash copy
            VITE_GT_API_KEY="YOUR_GT_DEV_API_KEY"
            VITE_GT_PROJECT_ID="YOUR_GT_PROJECT_ID"
            ```
            </Tab>
            <Tab value="Gatsby">
            ```bash copy
            GATSBY_GT_API_KEY="YOUR_GT_DEV_API_KEY"
            GATSBY_GT_PROJECT_ID="YOUR_GT_PROJECT_ID"
            ```
            </Tab>
            <Tab value="RedwoodJS">
            ```bash copy
            REDWOOD_ENV_GT_API_KEY="YOUR_GT_DEV_API_KEY"
            REDWOOD_ENV_PROJECT_ID="YOUR_GT_PROJECT_ID"
            ```
            </Tab>
            <Tab value="Next.js Pages Router">
            ```bash copy
            NEXT_PUBLIC_GT_API_KEY="YOUR_GT_DEV_API_KEY"
            NEXT_PUBLIC_GT_PROJECT_ID="YOUR_GT_PROJECT_ID"
            ```
            </Tab>
            <Tab value="create-react-app">
            ```bash copy
            REACT_APP_GT_API_KEY="YOUR_GT_DEV_API_KEY"
            REACT_APP_GT_PROJECT_ID="YOUR_GT_PROJECT_ID"
            ```
            </Tab>
            <Tab value="Other">
            Many react frameworks each have a unique way of exporting environment variables to the client.
            In development environments, both `GT_API_KEY` and `GT_PROJECT_ID` need to be exported to the client.

            We have added support for a few libraries so far,
            but please let us know if your framework is not listed by creating an issue on our [GitHub repository](https://github.com/generaltranslation/gt/issues/new).
            </Tab>
        </Tabs>
    </Step>
</Steps>
<Callout type="warn">
    **Protect Your API Keys!**

    React environment variables are often bundled into your application at build time and are publicly visible in the client-side code.
    For security reasons, you should:
    
    - Only use development API keys during local development
    - Only use production API keys with the CLI tool for deployment
    - **Never include any API keys as environment variables in production**
</Callout>


### 4. Cleaning up strings

The setup wizard will wrap all of your project's JSX components with the `<T>` component.
However, you may notice that strings are unaffected.

For example, if you have a string constant like this:

```jsx title="Example.js" copy
export default function Example() {
  const greeting = "Hello, world!";
  return <p>{greeting}</p>;
}
```

The setup wizard will not touch this string.

To fix this, you can use the [`useGT()`](/docs/react/api/strings/useGT) hook to translate the string.

```jsx title="Example.js" copy
import { useGT } from "gt-react";
export default function Example() {
  const t = useGT();
  return <p>{t("Hello, world!")}</p>;
}
```

---

## Let's try it out!

Congratulations! 🥳 Your app is now multilingual! Let's see it in action.

### See Your App in a Different Language

<Steps>
  <Step>
    Add the [`<LocaleSelector>`](/docs/react/api/components/localeSelector) component to your app.
    This will allow you to select a different language for your app.
    <Callout>
      **Tip:**
      You can also change your language in your browser settings.
    </Callout>
  </Step>
  <Step>
    Start your React app in development mode.
    <Tabs items={["npm", "yarn", "bun", "pnpm"]}>
      <Tab value="npm">
      ```bash
      npm run dev 
      ```
      </Tab>
      <Tab value="yarn">
      ```bash 
      yarn run dev 
      ```
      </Tab>
      <Tab value="bun">
      ```bash
      bun run dev 
      ```
      </Tab>
      <Tab value="pnpm">
      ```bash
      pnpm run dev 
      ```
      </Tab>
    </Tabs>
  </Step>
  <Step>
    Open up your app in your preferred browser (usually at
    [http://localhost:3000](http://localhost:3000)).
  </Step>
</Steps>

### Troubleshooting

<Accordions>
  <Accordion title="My app's language is not changing, even though I've changed my browser's language.">
    **Browser Cookies**

    If you are deciding to test different languages by changing your browser's language, this issue may occur.

    Check your browser's cookies for your app.
    General translation uses cookies to store the user's language preference.
    The cookie is called `generaltranslation.locale`, and all you need to do is delete it.
    Then, just double check you are using the desired perferred language and then
    refresh the page.

    How to check cookies:
    * [Chrome](https://support.google.com/chrome/answer/95647)
    * [Firefox](https://support.mozilla.org/en-US/kb/delete-cookies-remove-info-websites-stored)
    * [Safari](https://support.apple.com/en-mn/guide/safari/sfri11471/16.0/mac/11.0)
    * [Edge](https://support.microsoft.com/en-us/microsoft-edge/delete-cookies-in-microsoft-edge-63947406-40ac-c3b8-57b9-2a946a29ae09)

    If this does not work, make sure that the list of locales in your [`<GTProvider>`](/docs/react/api/components/gtprovider) is up to date.
  </Accordion>
  <Accordion title="Why do new languages take a long time to load?">
    **On-Demand Translation**

    You may notice when loading languages in development, translations will take a few seconds to be displayed.
    This happens because your app is being translated in real time.
    We refer to this process as an "on-demand translation".
    
    This **only happens in dev** so you can easily prototype your website in different languages.
    All translations are preloaded in production, so there will be no delay.
    Follow our guide on [shipping to production](/docs/next/tutorials/quickdeploy).
  </Accordion>
  <Accordion title="Why are some things translating and others not?">
    **JSX Translation**

    Right now, the setup tool automatically adds `<T>` components around text content.
    We are currently working on a solution that will automatically setup string translations.
    Until then, if you are rendering a string, please follow [this guide](/docs/react/reference/translating-strings) for translating strings.
  </Accordion>
  <Accordion title="Why are some translations inaccurate?">
    The most likely cause of an inaccurate translation is ambiguous wording.
    For example, "apple" can be a fruit or a technology company.

    To fix this, you can provide more context to the translation with the `context` prop.
    The [`<T>`](/docs/react/api/components/t) and [`useGT()`](/docs/react/api/strings/useGT) functions support a `context` prop.
    For example:
    ```jsx
    <T context="the technology company">Apple</T>
    ```    
  </Accordion>
</Accordions>

---

## Shipping to Production

Follow our guide on [shipping to production](/docs/react/tutorials/quickdeploy).

---

## Next steps
 * See our [React API reference](/docs/react/api/components/t) for detailed information about the `<T>` component and other available components.


## Manual Setup [#manual-setup]

If you prefer to do the setup manually, follow the steps below.

### 1. Install libraries

Install the [gt-react](https://www.npmjs.com/package/gt-react) and [gtx-cli](https://www.npmjs.com/package/gtx-cli) libraries.

<Tabs items={["npm", "yarn", "bun", "pnpm"]}>
  <Tab value="npm">
  ```bash 
  npm i gt-react
  npm i gtx-cli --save-dev
  ``` 
  </Tab>
  <Tab value="yarn">
  ```bash 
  yarn add gt-react
  yarn add gtx-cli --dev
  ```
  </Tab>
  <Tab value="bun">
  ```bash 
  bun add gt-react
  bun add -d gtx-cli
  ```
  </Tab>
  <Tab value="pnpm">
  ```bash 
  pnpm add gt-react
  pnpm add -D gtx-cli
  ```
  </Tab>
</Tabs>


### 2. Select languages

[`<GTProvider>`](/docs/react/api/components/gtprovider) is used to configure the behavior of `gt-react`. 
It should be placed as high up in your app as possible, ideally at the root.

Just pass a list of [locale codes](/docs/reference/locale-strings#supported-locales) to add them to your app.

```jsx title="App.js" copy
import { GTProvider } from "gt-react";
import MyApp from "./MyApp";

export default function App() {
  return (
    // French and Chinese support 
    // [!code highlight]
    <GTProvider locales={['fr', 'zh']}> 
      <MyApp />
    </GTProvider> // [!code highlight]
  );
}
```

For a full list of `<GTProvider>` props and extended documentation, see the [API reference](/docs/react/api/components/gtprovider).

### 3. Add the `<T>` component

Wrap any nested JSX content in the [`<T>` component](/docs/react/api/components/t) to make it translatable.
For more information, check out the [guide on using `<T>` components](/docs/react/reference/t-reference).

```jsx title="Example.js" copy
import { T } from "gt-react";

export default function Example() {
  return (
    // [!code highlight]
    <T>
      <p>
        This gets translated.
      </p>
    </T>  // [!code highlight]
  );
}
```

Use the [`<Var>` component](/docs/react/api/components/var) to designate JSX content that should not be translated.

```jsx title="Example.js" copy
import { T, Var } from "gt-react";

export default function Example() {
  return (
    // [!code highlight]
    <T>
      <p>
        This gets translated. <Var>This does not.</Var>
      </p>
    </T>  // [!code highlight]
  );
}
```

For strings, you can use [`useGT()`](/docs/react/api/strings/useGT) for translation.

```jsx title="Example.js" copy
import { useGT } from "gt-react";

export default function Example() {
  const t = useGT(); // [!code highlight]
  return (
    <p>
      {/* [!code highlight] */}
      {t("This gets translated.")}
    </p>
  );
}
```

### 4. Add your environment variables

Add your API key and Project ID to your environment variables.

<Steps>
    <Step>
        Navigate to the [Dashboard](https://generaltranslation.com/dashboard).
            * Navigate to the **Developer Keys** page in the sidebar.
    </Step>

    <Step>
        Click **Create Dev API Key** then copy the API key and Project ID to your clipboard.
    </Step>
    <Step>
        Add the Project ID and API Key to your environment variables.
        Depending on your React framework, the environment variables may look slightly different.
        These instructions are for **DEVELOPMENT ENVIRONMENTS ONLY**.
        <Tabs items={["Vite", "Next.js Pages Router", "Gatsby", "RedwoodJS",  "create-react-app", "Other"]}>
            <Tab value="Vite">
            ```bash copy
            VITE_GT_API_KEY="YOUR_GT_DEV_API_KEY"
            VITE_GT_PROJECT_ID="YOUR_GT_PROJECT_ID"
            ```
            </Tab>
            <Tab value="Gatsby">
            ```bash copy
            GATSBY_GT_API_KEY="YOUR_GT_DEV_API_KEY"
            GATSBY_GT_PROJECT_ID="YOUR_GT_PROJECT_ID"
            ```
            </Tab>
            <Tab value="RedwoodJS">
            ```bash copy
            REDWOOD_ENV_GT_API_KEY="YOUR_GT_DEV_API_KEY"
            REDWOOD_ENV_PROJECT_ID="YOUR_GT_PROJECT_ID"
            ```
            </Tab>
            <Tab value="Next.js Pages Router">
            ```bash copy
            NEXT_PUBLIC_GT_API_KEY="YOUR_GT_DEV_API_KEY"
            NEXT_PUBLIC_GT_PROJECT_ID="YOUR_GT_PROJECT_ID"
            ```
            </Tab>
            <Tab value="create-react-app">
            ```bash copy
            REACT_APP_GT_API_KEY="YOUR_GT_DEV_API_KEY"
            REACT_APP_GT_PROJECT_ID="YOUR_GT_PROJECT_ID"
            ```
            </Tab>
            <Tab value="Other">
            Many react frameworks each have a unique way of exporting environment variables to the client.
            In development environments, both `GT_API_KEY` and `GT_PROJECT_ID` need to be exported to the client.

            We have added support for a few libraries so far,
            but please let us know if your framework is not listed by creating an issue on our [GitHub repository](https://github.com/generaltranslation/gt/issues/new).
            </Tab>
        </Tabs>
    </Step>
</Steps>
<Callout type="warn">
    **Protect Your API Keys!**

    React environment variables are often bundled into your application at build time and are publicly visible in the client-side code.
    For security reasons, you should:
    
    - Only use development API keys during local development
    - Only use production API keys with the CLI tool for deployment
    - **Never include any API keys as environment variables in production**
</Callout>



---
title: Changing Language
description: How to change the language of your React app
---

## Overview
Source: https://generaltranslation.com/en/docs/react/reference/change-language

In this guide, we'll show you how to change the language of your React app.

If you have not yet setup your app with `gt-react`, please refer to the [setup guide](/docs/react) before continuing.

## Setup

There are three ways to change the language of your app using `gt-react`.

1. Using the [`useSetLocale()`](/docs/react/api/helpers/useSetLocale) hook
2. Using the [`<LocaleSelector>`](/docs/react/api/components/localeSelector) component
3. Using the [`useLocaleSelector()`](/docs/react/api/helpers/useLocaleSelector) hook

We'll cover all three methods in this guide.

## Using the `useSetLocale` hook

The `useSetLocale` hook is a client-side hook that allows you to change the language of your app. It must be used within a `GTProvider` component.

```tsx
import { useSetLocale } from 'gt-react';
export default function MyComponent() {
  const setLocale = useSetLocale();

  return <button onClick={() => setLocale('en')}>Set Locale</button>;
}
```

Simply provide the locale you want to change to as the argument to the callback function returned by the `useSetLocale` hook.

## Using the `<LocaleSelector>` component

The `<LocaleSelector>` component is a client-side component that allows you to change the language of your app. It must be used within a `GTProvider` component.

This is a bare-bones UI dropdown that displays all the locales you have enabled in your project, and allows users to select a different locale.

```tsx
import { LocaleSelector } from 'gt-react';

export default function MyComponent() {
  return <LocaleSelector />;
}
```

## Using the `useLocaleSelector` hook

Alternatively, if you would like to create your own locale selector component, you can use the `useLocaleSelector` hook.

This hook returns the current locale, the list of locales, and the `useSetLocale` hook.

```tsx
import { useLocaleSelector } from 'gt-react';
```

See the [API reference](/docs/react/api/helpers/useLocaleSelector) for more information.

## Next steps

- Learn more about the [`useSetLocale`](/docs/react/api/helpers/useSetLocale) hook.
- Learn more about the [`<LocaleSelector>`](/docs/react/api/components/localeSelector) component.
- Learn more about the [`useLocaleSelector`](/docs/react/api/helpers/useLocaleSelector) hook.


---
title: The CLI Tool
description: The General Translations CLI tool 
---

## Overview
Source: https://generaltranslation.com/en/docs/react/reference/cli

This is a reference doc on the General Translation CLI tool.
Read more about `gtx-cli` [here](/docs/cli).

For a step by step guide, check out the [Deploying to Production](/docs/react/tutorials/quickdeploy) guide.

## Installation

<Tabs items={["npm", "yarn", "bun", "pnpm"]}>
  <Tab value="npm">
  ```bash 
  npm i gtx-cli --save-dev
  ``` 
  </Tab>
  <Tab value="yarn">
  ```bash 
  yarn add gtx-cli --dev
  ```
  </Tab>
  <Tab value="bun">
  ```bash 
  bun add gtx-cli --dev
  ```
  </Tab>
  <Tab value="pnpm">
  ```bash 
  pnpm add gtx-cli --save-dev
  ```
  </Tab>
</Tabs>

## What does the CLI tool do?

The CLI tool is used for managing your project and your translations.
There are a two main commands you should be aware of: `translate` and `setup`.

 * [The `translate` command](/docs/cli/translate) is meant to be added to the CD pipeline.
   It is used to scan your project for content to be translated.
   The content is then uploaded to a CDN or added to your app bundle to be used at runtime.
 * [The `setup` command ](/docs/cli/setup) is used to automatically integrate the General Translation library into your project.
   It will scan through your project and wrap any JSX content with a `<T>` component.

### Translating

To use the CLI tool, run the following command from the root of your project:

```bash title="shell" copy
npx gtx-cli translate
```

<Callout type="warn">
    **For Production Use Only!**

    Because this CLI tool publishes translated content to the CDN, it is meant to only be used for production builds and **should not be used in development**.
    Before running this command, please make sure you are on the branch that will be used for production.
    Remember to also specify your production API key and Project ID in your environment variables.
</Callout>

### Flags


<TypeTable
  type={{
    "--api-key": {
        description:
            'Production API key',
        type: 'string',
        optional: true,
    },
    "--project-id": {
        description:
            'The project ID',
        type: 'string',
        optional: true,
    },
    "--options": {
        description:
            'Path to the GT options file',
        type: 'string',
        optional: true,
        default: 'gt.config.json',
    },
    "--new": {
        description:
            'New locales to translate your project into',
        type: 'string',
        optional: true,
    },
    "--dictionary": {
        description:
            'Path to the dictionary file',
        type: 'string',
        optional: true,
    },
    "--dry-run": {
        description:
            'Dry run the command',
        type: 'boolean',
        optional: true,
        default: 'false',
    },
    "--ignore-errors": {
        description:
            'Ignore errors and force translation for valid content',
        type: 'boolean',
        optional: true,
        default: 'false',
    },
    "--inline": {
        description:
            'Include inline <T> tags in addition to the dictionary',
        type: 'boolean',
        optional: true,
        default: 'true',
    },
  }}
/>

When running the CLI tool for the first time, it will attempt to create a `gt.config.json` file in the root of your project.
This file contains metadata about your project that is used to translate your content.

---

## Setup

Additionally, the CLI tool can automatically scan and setup your project for translation.
If you are using General Translation for the first time, we recommend running the setup to get started.

```bash title="shell" copy
npx gtx-cli setup
```

<Callout type="warn">
    **Stash your changes!**

    This will modify your codebase, so make sure to either stash or commit your changes first.
</Callout>

Running this command will wrap `<T>` components around the top level of JSX elements which contain translatable content.

It will also wrap any non-static content with `<Var>` components. 

Here are some examples of what the scan will convert:


<Tabs items={["Example 1", "Example 2", "Example 3", "Example 4", "Example 5"]}>
  <Tab value="Example 1">


  ```jsx
  <div>Hello, World!</div>
  ```

  Will be converted to:

  ```jsx
  <T id="">Hello, World!</T>
  ```

  </Tab>
  <Tab value="Example 2">


  ```jsx
  <div>Hello, {name}</div>
  ```

  Will be converted to:

  ```jsx
  <T id="">Hello, <Var>{name}</Var></T>
  ```

  </Tab>
  <Tab value="Example 3">


  ```jsx
  <p>{true && "Hello, World!"}</p>;
  ```

  Will be converted to:

  ```jsx
  <T id=""><p><Var>{true && <T id="">{"Hello, World!"}</T>}</Var></p></T>;
  ```

  </Tab>
  <Tab value="Example 4">


  ```jsx
  <p>{"Hello," + " World!"}</p>
  ```

  Will be converted to:

  ```jsx
  <T id=""><p>{"Hello," + " World!"}</p></T>
  ```

  </Tab>
  <Tab value="Example 5">


  ```jsx
  <p>{`${temp}`}</p>
  ```

  Will be converted to:

  ```jsx
  <T id=""><p><Var>{`${temp}`}</Var></p></T>
  ```

  </Tab>
</Tabs>

The CLI will only wrap direct children inside JSX elements. It will wrap other JSX elements separately with their own `<T>` components.


<Callout type="warn">
    **Experimental**

    This feature is currently experimental and may not work perfectly.
    After running the scan, you should manually review the output and make sure it is correct.
    In particular, note that any non-static JSX Expressions `{...}` will be wrapped in `<Var>` components.
    You may need to manually review and edit these cases.
    Please report any issues you run into [here](https://github.com/generaltranslation/gt/issues).
</Callout>

### Flags

<TypeTable
  type={{
    "--src": {
        description:
            'The source directory to scan',
        type: 'string',
        optional: true,
    },
  }}
/>

---
title: Dictionaries Reference
description: An overview of the Dictionary Pattern
---

## Overview
Source: https://generaltranslation.com/en/docs/react/reference/dictionary-reference

In this reference guide, we will introduce you to the dictionary pattern.
Please feel free to skip around this page as needed.
We will cover the following:
 * [What is a dictionary?](#what-is-a-dictionary)
 * [How to use dictionaries](#how-to-use-dictionaries)
 * [Loading dictionaries for other languages](#other-languages)
 * [Using dictionaries](#usage)
 * [Production considerations](#production-considerations)

---

## What is a dictionary?

General Translation allows translatable content to be stored in a dictionary file.
A dictionary is a nested object with string values that can be used to store translatable content.
This dictionary file (`.ts`, `.js`, or `.json`) is then used to generate a translation.

Dictionaries can be used standalone, or in conjunction with [`<T>`](/docs/react/api/components/t) components.

### Dictionary vs `<T>` Components

The dictionary pattern has a few advantages over the [`<T>`](/docs/react/api/components/t) component:

1. **Centralized Storage**: Dictionaries store all translatable content in a single file, making it easier to  manage and update.
2. **Historical Precedent**: The dictionary pattern is a common design pattern in the industry and is used by many other libraries.

At the same time, it has some disadvantages as well:

1. **Complexity**: Dictionaries are more complex to set up and use than the `<T>` component.
2. **Readability**: Dictionaries are less readable than the `<T>` component because the content is not inline.
3. **Maintainability**: Dictionaries are more difficult to maintain than the `<T>` component because the content is not inline, and is instead stored separately. This makes debugging and maintaining translations much more difficult.

Both design patterns are supported by our library and are not mutually exclusive.
You can use a dictionary along side `<T>` components.

### Our advice

We recommend using the [`<T>`](/docs/react/api/components/t) component because of its simplicity especially if you are new to internationalization (i18n).
We offer dictionary support for those who prefer this design pattern from past experiences or for ease of integration with existing code bases.

---

## How to use dictionaries

In this section, we will show you how to set up a bare-bones dictionary implementation in your React application.
We will walk through the following steps:

<Steps>
    <Step>
        Create a dictionary
    </Step>
    <Step>
        Reference the dictionary
    </Step>
</Steps>

### Step 1: Create a dictionary

The first step is to create a dictionary.
This is a `dictionary.js` (`.json`) file that contains all the content you want to translate.

Add the following content to your `dictionary.js` file:

```js title="src/dictionary.js" copy
const dictionary = {
  greetings: {
    hello: 'Hello, World!'
  },
}

export default dictionary;
```

<Callout>
  You can also use a `dictionary.json` file to store your dictionary. This is useful if you are migrating from a different library or if you prefer to use JSON files.
  Here is an example of a `dictionary.json` file:

```json title="src/dictionary.json" copy
{
  "greetings": {
    "hello": "Hello, World!"
  }
}
``` 

</Callout>

Then you pass it to your `<GTProvider>` component:

```jsx title="index.js" copy
import dictionary from "./dictionary.js";

createRoot(document.getElementById("root")!).render(
  <StrictMode>
    <GTProvider locales={['es', 'fr']} dictionary={dictionary}> // [!code highlight]
      <App />
    </GTProvider>
  </StrictMode>
);
```

### Step 2: Reference the dictionary

You can access dictionary entries with the [`useDict()`](/docs/react/api/dictionary/useDict) hook.
Just use the `d()` function to access the dictionary entries by identifier.

```jsx title="src/components/MyComponent.js" copy
import { useDict } from 'gt-react';

export default function MyComponent() {

  const d = useDict(); // [!code highlight]

  return (
    <div>
      {d('greetings.hello')} // [!code highlight]
    </div>
  );
}
```

---

## Loading dictionaries for other languages [#other-languages]

By default, developers only provide a dictionary for the default language.

General Translation automatically generates dictionaries for other languages and loads them with the [`loadTranslations`](/docs/react/api/config/load-translations) function.

However, if you are migrating from another i18n library or already have dictionaries for other languages, you can pass them to the [`loadDictionary`](/docs/react/api/config/load-dictionary) function.

`gt-react` will automatically load the corresponding dictionary for the requested locale when using the `useDict()` hook or `getDict()` function.

See the [API Reference](/docs/react/api/config/load-dictionary) for more information.

---

## Using dictionaries [#usage]

### Variables

You can add variables to your dictionary by using the `{variable}` syntax:

```jsx title="src/dictionary.js" copy
// [!code word:name]
const dictionary = {
  greetings: {
    hello: 'Hello, {name}!',    // -> Hello, Alice!
    goodbye: 'Goodbye, {name}!' // -> Goodbye, Bob!
  },
}
export default dictionary;
```
```jsx title="src/components/MyComponent.js" copy
// [!code word:name]
import { useDict } from 'gt-react';

export default async function MyComponent() {
  const d = useDict();

  return (
    <div>
      {d('greetings.hello', { variables: { name: 'Alice' }})}
      {d('greetings.goodbye', { variables: { name: 'Bob' }})}
    </div>
  );
}
```

Read more about adding variables to your dictionary in [the `DictionaryTranslationOptions` type](/docs/react/api/types/DictionaryTranslationOptions).


### Prefixes

Additionally, with [`useDict()`](/docs/react/api/dictionary/useDict), you can pass in a prefix to the function to specify a shared path in the dictionary.
This is useful if you have a shared path in your dictionary that you want to use in multiple components.

```jsx title="src/dictionary.js" copy
const dictionary = {
  greetings: {
    common: {
      hello: 'Hello, World!',
      goodbye: 'Goodbye, World!'
    },
  },
}
export default dictionary;
```

```jsx title="src/components/MyComponent.js" copy
import { useDict } from 'gt-react';

export default async function MyComponent() {
  // All translation paths such as 'hello' will be prefixed with 'greetings'
  const d = useDict('greetings.common'); // [!code highlight]

  return (
    <div>
      {d('hello')} {/* hello -> greetings.common.hello */}
      {d('goodbye')} {/* goodbye -> greetings.common.goodbye */}
    </div>
  );
}
```

---

## Production considerations

### Deploying to production

Make sure to run the translate command before deploying to production, so that all translations are available at runtime.
We recommend adding it to your in your CD pipeline or as a part of your build script.
```json title="package.json" copy
{
  "scripts": {
    "build": "npx gtx-cli translate --languages fr es ja && <YOUR_BUILD_COMMAND>",
  }
}
```

That's it! You have successfully translated your application into French, Spanish, and Japanese.

For a more detailed guide on deploying your application, please refer to the [Deployment](/docs/react/tutorials/quickdeploy) guide.
For more information on the command, please refer to the [CLI Tool](/docs/cli/translate) reference guide.

### Behavior: Development vs Production

In development, the `d()` function will translate dictionary entries on-demand.
This means that when the component is rendered, it will perform a translation immediately.
We do this for convenience to make development with other languages easier.

To enable this behavior, just add a Dev API key to your environment.

In production, the `d()` function will translate content at build time.
This means that you have to run the translation command before deploying your application.

<Callout>
  **Tip:**
  If you want to simulate production behavior in development, just use a production API key in your development build.
</Callout>

---

## Notes
 * Dictionaries are an alternative to the `<T>` component. They can be used in conjunction with `<T>` components or standalone.
 * Dictionary translations occur at build time, so you have to add the [`translate`](/docs/cli/translate) command to your build process.
 * Dictionaries can be used with prefixes to specify a subset of the dictionary.

## Next steps
 * Learn about the [`<T>` component](/docs/react/api/components/t) and how to use it in your React application.
 * Learn how to ship to production with our [deployment guide](/docs/react/tutorials/quickdeploy).

---
title: gt.config.json
description: The `gt.config.json` file
---

## Overview
Source: https://generaltranslation.com/en/docs/react/reference/gtconfigjson

The `gt.config.json` file is in charge of storing your project's configuration.
It holds important information like your project's `projectId`, your supported locales, and more.
It also holds important internal information such as your project's `versionId`.


This file is read by (1) your [`<GTProvider>`](/docs/react/api/components/gtprovider) component and (2) the [`gtx-cli translate`](/docs/cli/translate) command.
Because of this, we recommend storing your configuration in your `gt.config.json` file instead of passing it as a prop to your [`<GTProvider>`](/docs/react/api/components/gtprovider) component.

Generally, anything that begins with an underscore (e.g. `_versionId`) is an internal property and should not be modified.
Everything else is fair game.

---

## Fields

| Field | Type | Description |
|-------|-------------|
| `projectId` | `string` | Unique identifier for your project in the GT system |
| `locales` | `string[]` | Array of supported locale codes for your project |
| `defaultLocale` | `string` | The primary locale code used as fallback when translations are missing |
| `cacheUrl` | `string` | URL endpoint for caching translation data |
| `runtimeUrl` | `string` | URL endpoint for runtime translation services |
| `stageTranslations` | `boolean` | Configuration for staging/preview translation features |
| `files` | `object` | Path to local translation files for development and testing |
| `_versionId` | `string` | Internal property used to track project version (do not modify) |


### `cacheUrl` and `runtimeUrl`

If you are storing your translations in the cloud, the `cacheUrl` is the base URL for the cache.
The `runtimeUrl` is the base URL for the runtime and only applies to development translations.

### `stageTranslations`

The `stageTranslations` is a flag used by the `gtx-cli` tool to mark your translations as requiring review.
This means that they must be manually approved before they can be deployed to production via the [`gtx-cli translate`](/docs/cli/translate) command.

### `files`

The `files` field specifies a path to locally stored translations (in contrast to storing them in the cloud).
Specifically, the `output` field specifies where the translations will be written to.

```json
{
  "files": {
    "gt": {
      "output": "public/_gt/[locale].json"
    }
  },
}
```



{/* 
### `_versionId`

Points to hit:
- internal
- you can specify your own version names */}


---

## Examples

### Specifying your locales

```json title="gt.config.json"
{
  "defaultLocale": "en", // Primary locale is English
  "locales": ["fr", "es"] // Secondary locales are French and Spanish
}
```


{/* ### Specifying your own versionId */}

---

## Notes
 * The `gt.config.json` file is used to specify your project's configuration.
 * It is read by both the [`<GTProvider>`](/docs/react/api/components/gtprovider) component and the [`gtx-cli translate`](/docs/cli/translate) command.
 

## Next steps
 * Learn how to have your [translations added to your project's bundle](/docs/react/reference/local-tx).

---
title: Local Translations
description: Setup local translations for your React app
---

## Overview
Source: https://generaltranslation.com/en/docs/react/reference/local-tx

This guide will show you how to store translations in your React app rather than using a CDN.
This means that translations will live in your app bundle.
This can lead to faster loader times and avoids reliance on external infrastructure.

In this document, we will (1) explain what are local translations and how they work and
(2) show you how to set up local translations for your React app.

---

## What are local translations?

Local translations are stored in your app's bundle, as opposed to being fetched from a CDN (Content Distribution Network).

Let's say that you have added the [`gtx-cli translate`](/docs/cli/translate) command to your CD process.
This will generate JSON files containing translations for your app.
The final step is to get these translations out of our API and into your app.

There are two ways to do this:
 * **In your app's bundle:** After translations are generated, add them to your app's bundle.
 * **In a CDN (default):** Fetch from translations from a CDN at runtime.

<Callout>
  **Note:**
  If you are not using GT infrastructure, you will need to write a custom [`loadTranslations()`](/docs/react/api/config/load-translations) method to load translations from your preferred infrastructure.
</Callout>

### What are the benefits?

*Faster load times:* Local translations are served directly from your app,
meaning that they will load faster than translations served from a CDN.

*No reliance on external services:* Your apps ability to load translations is not dependent on the availability of a CDN.

### What are the drawbacks?

*Increased bundle size:* Local translations will increase your app's bundle size as they will be served alongside your app.
This means that your app may take slightly longer on first load.

*Locale management:* In order to add or remove support for locales, you will need to redeploy your app each time.

*Content management:* Much like locale management, if you want to change a translation (i.e., you do not like how your content has been phrased in a different language),
you must redeploy your app with the new translation.

---

## Setup

### Prerequisites

Make sure that you have followed the [Quick Start Guide](/docs/react/tutorials/quickstart) to set up your React app with GT.


### Steps
<Steps>
  <Step>
    Add a `loadTranslations.js` file under `./src` with the following content:

    ```js title="src/loadTranslations.js" copy
    export default async function loadTranslations(locale) {
      const t = await import(`./_gt/${locale}.json`);
      return t.default;
    }
    ```

  </Step>

  <Step>
    Pass `loadTranslations` as a prop to the `<GTProvider>` component.

    ```jsx title="src/App.jsx" copy
    import { GTProvider } from 'gt-react';
    import loadTranslations from './loadTranslations'; // [!code highlight]

    export default function App() {
      return (
        <GTProvider loadTranslations={loadTranslations} locales={['es', 'fr']}> // [!code highlight]
          <YourApp />
        </GTProvider>
      );
    }
    ```
  </Step>

  <Step>
    Run the following command, and when asked if you want to save translations on the GT CDN, select the "No" option.
    ```bash
    npx gtx-cli configure
    ```
    Then, run the translate command.
    ```bash
    npx gtx-cli translate
    ```
    <Callout type="warn">
      Depending on the specific framework you are using, you may need to ensure that the translation JSONs are included in the
      final bundle.
    </Callout>
  </Step>
</Steps>

That's it! Your app will now only load translations from your local files.

---

## Notes
 * Local translations are an alternative to fetching translations from a CDN.
 * You can customize [`loadTranslations()`](/docs/react/api/config/load-translations) to also load translations from other sources, such as your database or your own CDN.

## Next steps
 * See [`loadTranslations()`](/docs/react/api/config/load-translations) for more information on writing a custom translation loader.
 * See the [Examples](/docs/reference/examples) page for some example projects.

---
title: Manage Locales
description: How to manage your app's locales
---


## Overview
Source: https://generaltranslation.com/en/docs/react/reference/locale-management

This document provides guidance on how to manage locales in your React application with the `gt-react`.
We will walk through configuring the list of locales you want to support, then triggering the generation of translations.
We will also cover how to pass the config file to your app.

This library uses the [BCP-47 standard](/docs/reference/locale-strings) to define locales.
See a list of currently supported locales [here](/docs/reference/locale-strings#supported-locales).

---

## Configuring locales

There are two ways to change your locales for production:
 1. The CLI tool
 2. The `gt.config.json` file (preferred)


### Managing locales with the CLI tool

The simplest way to manage locales is specifying them through the [`npx gtx-cli translate`](/docs/cli/translate) command by using the `--locales` flag.

```json title="package.json" copy
{
  "scripts": {
    "build": "npx gtx-cli translate --locales zh jp && <YOUR_BUILD_COMMAND>"
  }
}
```

This will generate translations for Chinese (`zh`) and Japanese (`jp`).


Make sure that your app knows that these locales are supported by passing the config file to the GTProvider component.
```jsx title="App.js" copy
import { GTProvider } from 'gt-react';
import config from './gt.config.json';

function App() {
  return (
    <GTProvider locales={["zh", "jp"]}>
      <YourApp />
    </GTProvider>
  );
}
```


### Using `gt.config.json` (preferred)

A more robust way of managing locales is by using the `gt.config.json` file.
you can specify the list of locales you want to support with the `locales` property.

```json title="gt.config.json" copy
{
  "locales": ["zh", "jp"],
}
```

Then just pass the config file to your GTProvider component.

```jsx title="App.js" copy
import { GTProvider } from 'gt-react';
import config from './gt.config.json';

function App() {
  return (
    <GTProvider {...config}>
      <YourApp />
    </GTProvider>
  );
}
```

The final step is to add the translate command to your build script.
You do not need to specify locales with the `--locales` flag because they are already defined in the `gt.config.json` file.
```json title="package.json" copy
{
  "scripts": {
    "build": "npx gtx-cli translate && <YOUR_BUILD_COMMAND>"
  }
}
```

---

## Whitelisted locales

As an optional feature, you can add a list of whitelisted locales.
This is accessible through the dashboard under the Project Locales page.
If you enable this feature, any attempts to call npx translate with non-whitelisted locales will fail.

---

## Notes
 * You can manage locales through the dashboard, the `gt.config.json` file, or the CLI tool.
 * Remember to pass the locales to [`<GTProvider>`](/docs/react/api/componenets/gtprovider) in your app.

 ## Next Steps
 * Learn about the locale syntax in the [Locale Strings](/docs/reference/locale-strings) reference.

---
title: <T> Reference
description: This is a detailed dive into the <T> component and the gt-react library.
---

## Overview
Source: https://generaltranslation.com/en/docs/react/reference/t-reference

This article will take an in depth dive into how to use the [`<T>` component](/docs/react/api/components/t) in the `gt-react` library.
Please feel free to skip around this page as needed.
We will cover the following:
 * [The `<T>` component](#what-is-the-t-component)
 * [Design patterns](#design-patterns)
 * [Production considerations](#production)
 * [Some examples](#examples)
 * [Common pitfalls](#common-pitfalls)

If you are looking for how to use [Variable Components](/docs/react/reference/using-variable-components) or [Branching Components](/docs/react/reference/using-branching-components), please refer to their respective articles.

---

## What is the `<T>` Component?

The `<T>` component is the primary way to translate text and content in the `gt-react` library.
It allows for inline translation of text and JSX structures, providing a more direct way to manage translations in your application.
This is often times more convenient for the developer as it allows for more direct control over the translation content.

The `<T>` component supports static text, JSX structures, and context-aware translations.
When no translation is available, it gracefully falls back to displaying the content in the application's default locale.

```jsx
<T>
  <p>Hello, world!</p>
</T>
```

---

## Design Patterns

In this section, we will detail common design patterns used with the `<T>` component.
This will also touch on topics that are tangentially related to the `<T>` component, but equally important, such as
string translation, translating content in advanced, and privacy concerns.

### Wrapping your `<T>` components in a `<GTProvider>` [#gtprovider]

`<T>` is used to translate static text and JSX structures.
`<T>` **MUST** be wrapped in a [`<GTProvider>`](/docs/react/api/components/gtprovider) at a higher level.
Our advice is to wrap your application in a `<GTProvider>` at the root level to provide this context.

```javascript copy
import { GTProvider } from "gt-react"; 
import MyApp from "./MyApp";
 
export default function App() {
  return (
    <GTProvider>
      <MyApp />
    </GTProvider> 
  );
}
```

### Variables in `<T>` Components

Variables components can be used in `<T>` components to (1) display dynamic values and/or (2) mark content that should not be translated.
Think of things like a user's name: it's (1) different from person to person and (2) should not change even when the language changes.

```jsx title="DynamicGreeting.js" copy
import { T, Var } from 'gt-react';

export default function DynamicGreeting({ user }) {
  return (
    <T>
      Hello, <Var>{user.name}</Var>! // [!code highlight]
    </T>
  );
}
```

There are many variable components: [`<Var>`](/docs/react/api/components/var), [`<Num>`](/docs/react/api/components/num), [`<Currency>`](/docs/react/api/components/currency) and [`<DateTime>`](/docs/react/api/components/datetime).
Some of these will automatically reformat the content based on the user's locale. Others will simply mark the content as "do not translate".
Also, these components don't necessarily need to be wrapped in a `<T>` component to reformat content.

Read more about it in [this article about variable components](/docs/react/reference/using-variable-components).

### Branching in `<T>` Components

Branching components can be used to display different content based on conditions for translations.
These include [`<Plural>`](/docs/react/api/components/plural) and [`<Branch>`](/docs/react/api/components/branch) components.
We use these components because they allow for a more optimized translation process.

For example, the `<Plural>` component allows you to mark a sentences that should be pluralized when translation occurs.

```jsx title="Count.js" copy
import { T, Plural } from 'gt-react';

export default function Count({ num }) {
  return (
    <T>
      <Plural
        n={num} // <-- variable to check // [!code highlight]
        singular={<p>There is one item.</p>}  // [!code highlight]
        plural={<p>There are multiple items.</p>}  // [!code highlight]
      />
    </T>
  );
}
```

It is also useful as it standardizes your pluralization logic across your application in your base language.

You can specify different options depending on which component you use.
Read more about it in the [Branching Components](/docs/react/reference/using-branching-components) article.

### Translating Strings [#translating-strings]

If you want to translate just a string, you can use [`useGT()`](/docs/react/api/components/strings/useGT).
It is used for translating strings at buildtime.

```jsx title="Greeting.js" copy
function Greeting() {
  const t = useGT();
  return <p>{t('Hello, my friend!')}</p>; // [!code highlight]
}
```
For more information, you can refer to [our guide on translating strings](/docs/react/reference/translating-strings).


That's it! You have successfully translated your application into French, Spanish, and Japanese.

For a more detailed guide on deploying your application, please refer to the [Deployment](/docs/react/tutorials/quickdeploy) guide.
For more information on the command, please refer to the [CLI Tool](/docs/cli/translate) reference guide.

### Adding ids to `<T>` Components

A handy debugging trick is to add an `id` prop to your `<T>` components.
This allows you to track which translations are being used in your application.
It also allows you to use the [Translation Editor](/signin) to make changes to your translations without redeploying.

```jsx title="Greeting.js" copy
import { T } from 'gt-react';

export default function Greeting() {
  return (
    <T id="greeting">
      Hello, world!
    </T>
  );
}
```

---

## Production considerations [#production]

### Deploying to production

Make sure to run the translate command before deploying to production, so that all translations are available at runtime.
We recommend adding it to your in your CD pipeline or as a part of your build script.
```json title="package.json" copy
{
  "scripts": {
    "build": "npx gtx-cli translate --languages fr es ja && <YOUR_BUILD_COMMAND>",
  }
}
```

That's it! You have successfully translated your application into French, Spanish, and Japanese.

For a more detailed guide on deploying your application, please refer to the [Deployment](/docs/react/tutorials/quickdeploy) guide.
For more information on the command, please refer to the [CLI Tool](/docs/cli/translate) reference guide.

### Behavior: Development vs Production

In development, the `<T>` component will translate content on-demand.
This means that when the component is rendered, it will perform a translation immediately.
We do this for convenience to make development with other languages easier.

To enable this behavior, just add a Dev API key to your environment.

In production, the `<T>` component will translate content at build time.
This means that you have to run the translation command before deploying your application.

<Callout>
  **Tip:**
  If you want to simulate production behavior in development, just use a production API key in your development build.
</Callout>

### Privacy Concerns

With some exceptions, all content wrapped in a `<T>` component is sent to the General Translation APIs for translation.
This might not be desirable for rendering sensitive data, such as usernames, account numbers, etc.

To circumvent this issue, use [Variable Components](/docs/react/reference/using-variable-components#privacy) to handle private information.
This ensures that no sensitive data is sent to the General Translation APIs for translation.
The localization of all content wrapped in any Variable Component is handled locally.

---

## Examples

### Basic Usage

The simplest use case for `<T>` is to translate static text.

```javascript copy
import { T } from 'gt-react';

export default function BasicUsage() {
  return (
    <T>
      Hello, world!
    </T>
  );
}
```

This example ensures that `"Hello, world!"` is translated based on the user's locale.
For example, in a Spanish locale, it may render as `"¡Hola, mundo!"`.


### Context

The `<T>` component supports additional context to refine translations.
Adding a context prop allows the same id to resolve to different translations depending on the context provided.
```javascript copy
import { T } from 'gt-react';

export default function FormalGreeting() {
  return (
    <T context="formal">
      Hi there!
    </T>
  );
}
```

For example, the context `"formal"` could yield a translation such as `"Good day, everyone!"`, while the same `id` without context might yield `"Hi there!"` in the other language.
Of course, no change would occur for the base language.

### Nested Components

The `<T>` component can also translate JSX structures.
Any children of the `<T>` will be translated.

```javascript copy
import { T } from 'gt-react';
import CustomButton from './CustomButton';

export default function Page() {
  return (
    <T>
      This will be translated
      <div>
        <div>
          <div>
            <div>
              <CustomButton>This text will also be translated!</CustomButton>
            </div>
          </div>
        </div>
      </div>
    </T>
  );
}
```



---

## Common Pitfalls


### Direct descendants only [#direct-text]

The `<T>` component only translates text passed directly as a child.
This means that if you have content inside a component that is not directly passed to `<T>`, it will not be translated.

Let's illustrate this with an example:

```javascript copy
function UntranslatedContent() {
  return (
    <p>This content is not translated</p>
  );
}

export default function DisplayGreetings() {
  return (
    <T>
      <h1>Hello, this text will be translated</h1>
      <UntranslatedContent />
    </T>
  );
}
```

In this example, the content inside `<UntranslatedContent>` will not be translated.
Only the content directly inside `<T>` will be translated, like the `<h1>` tag and its children.

This occurs because of how React renders components.
It is a bit complicated, but the gist is that React does not know the content of a component until it has rendered.
Therefore, the contents of components like `<UntranslatedContent>` are not translated.
However, any text directly between the two `<T>` tags will be translated.
<Callout>
    **Note:** A good rule of thumb is that any content that is *literally* between the two `<T>` in the file will be translated.
    You can always add another `<T>` to translate the content that is not being translated, though nesting `<T>` components is not recommended.
</Callout>

#### What's the fix?

Your first instinct might be to add an additional `<T>` component inside `<UntranslatedContent>`, but this is not recommended.
We discuss this more [below](#nested-t).

The solution is to always wrap the text in the `<T>` component directly, like so:

```javascript copy
function TranslatedContent() {
  return (
    <T>
      <p>This content <b>IS</b> translated</p>
    </T>
  );
}

export default function DisplayGreetings() {
  return (
    <>
      <T>
        <h1>Hello, this text will be translated</h1>
      </T>
      <TranslatedContent />
    </>
  );
}
```


#### What about variables? [#variables]

Variables are a little more complicated because they have the tendency to change their values.
We recommend using [Variable Components](/docs/react/reference/using-variable-components) for displaying dynamic values and [Branching Components](/docs/react/reference/using-branching-components) for conditional logic.

### Nested `<T>` Components [#nested-t]

Nesting `<T>` components is not allowed.
Because of react's rendering system, this can lead to unexpected behavior and performance issues when translating on-demand.

Here is an example of **what not to do**:

```jsx copy
function SomeComponent() {
  return (
    <T>
      Hello, friend!
    </T>
  );
}

export default function NestedTranslation() {
  return (
    <T>
      <T> {/* Don't do this! */} // [!code highlight]
        Hello, world!
      </T>
      <SomeComponent /> {/* This still counts. Don't do this! */} // [!code highlight]
    </T>
  );
}
```

The solution here is to remove the outtermost `<T>` component.

### Conditional Content [#conditional-content]

Similar to [rendering variable content](#variables), conditional content within a `<T>` component needs to be handled properly.
It is always best practice to wrap the conditional content in a [Branching Component](/docs/react/reference/using-branching-components) to optimize the translation of content.

```jsx copy
import { T, Branch } from 'gt-react';

export default function Header({ user }) {
  return (
    <T>
      <h2>
        <Branch
          branch={user.hasAccount}
          true={<p>Welcome back, {user.name}!</p>}
          false={<p>Please log in to continue.</p>}
        />
      </h2>
    </T>
  );
}
```

## Notes
 * `<T>` components are used to translate arbitrary JSX Content.
 * Wrap your app with a [`<GTProvider>`](/docs/react/api/components/gtprovider) to enable translations.
 * `<T>` translates contents at buildtime, not runtime. Development will perform on-demand translation for convenience, but this is not the case in production.

## Next Steps
 * Explore [Variable Components article](/docs/react/reference/using-variable-components) and [Branching Components guide](/docs/react/references/using-branching-components).
 * Learn about [translating strings](/docs/react/reference/translating-strings) in your application.



---
title: Translating Strings
description: How to translate strings
---

## Overview
Source: https://generaltranslation.com/en/docs/react/reference/translating-strings

This guide is a step by step tutorial on how to translate strings in your React app
with [`useGT()`](/docs/react/api/strings/useGT).


## Setup

### Prerequisites

We assume that you already have installed `gt-react` in your project and have followed or are currently following the [Quick Start Guide](/docs/react/tutorials/quickstart).


### Translating Strings
For any strings, use [`useGT()`](/docs/react/api/strings/useGT).
Remember that `useGT()` must be called within a child component of [`<GTProvider>`](/docs/react/api/components/gtprovider).

```jsx title="src/components/MyComponent.jsx" copy
import { useGT } from 'gt-react';

export default function MyComponent() {
  const t = useGT(); // [!code highlight]
  return (
    <div>
      <h1>{t('This is a string that gets translated')}</h1> // [!code highlight]
    </div>
  );
}
```

### Adding Variables
Variables are values that may change, but do not get translated.
To add variables to your strings, use the following pattern:

```jsx title="MyComponent.jsx" copy
import { useGT } from 'gt-react';

export default function MyComponent() {
  const t = useGT(); // [!code highlight]
  return (
    <div>
      <h1>{t('Hello there, {username}', { variables: { username: 'Brian123' }})}</h1> // [!code highlight]
    </div>
  );
}
```

---

## Notes
 * For string translation, use [`useGT()`](/docs/react/api/strings/useGT).
 * Variables can be added to strings using the `{ variables: { key: value } }` pattern.

## Next Steps
 * Return to the [Quick Start Guide](/docs/react/tutorials/quickstart) to finish setting up your project for translation.
 * See the API reference for [`useGT()`](/docs/next/react/strings/useGT).

---
title: Branching Components
description: Comprehensive reference for Branching Components in gt-react
---
Source: https://generaltranslation.com/en/docs/react/reference/using-branching-components



🚧 This section is currently under construction. 🚧



---
title: Variable Components
description: Comprehensive reference for Variable Components in gt-react
---
Source: https://generaltranslation.com/en/docs/react/reference/using-variable-components
🚧 This section is currently under construction. 🚧

See the [Next.js reference](/docs/next/reference/using-variable-components) for information on how to use variable components in Next.js.

---
title: Deploying to Production (5m)
description: Let's deploy your react app with GT.
---

## Overview
Source: https://generaltranslation.com/en/docs/react/tutorials/quickdeploy

This is a short tutorial to help you deploy your react app with GT.

We will do this in 3 steps:
<Steps>
  <Step>
    Add your production API keys.
  </Step>
  <Step>
    Run the `gtx-cli configure` command to configure your project.
  </Step>
  <Step>
    Share your configuration with your app.
  </Step>
  <Step>
    Add the translate command to your build script.
  </Step>
</Steps>

## Prerequisites

Make sure that you have followed the [Quick Start Guide](/docs/react/tutorials/quickstart) to set up your react app with GT.

## Step 1: Switch to your production API keys 🔑

Add your **production** API key and Project ID to your production environment variables.

From your [dashboard](https://www.generaltranslation.com/signin), go to **API Keys** in the sidebar.
Click on **Create API Key**, and add them to your production envrionment.

```bash copy
GT_API_KEY="YOUR_GT_API_KEY"
GT_PROJECT_ID="YOUR_GT_PROJECT_ID"
```

<Callout type="warn">
    **Protect Your API Keys!**

    Production keys should **only** ever be used in production.
    Likewise, development keys should **only** ever be used in development.
    *Never commit your API keys to a public repository!*
</Callout>

## Step 2: Run the `gtx-cli configure` command 🔧

Run the `gtx-cli configure` command to configure your project.

```bash copy
npx gtx-cli configure
```

<Callout>
  If you do not want your translations to be hosted on the GT CDN, select "No" when asked.
  You will also need to configure the [`loadTranslations()`](/docs/react/api/config/load-translations) function.
</Callout>

## Step 3: Share your configuration with your app ⚙️

The `gtx-cli configure` command will generate a configuration file in the root of your project.

Pass the config file to [`<GTProvider>`](/docs/react/api/components/gtprovider).
If you have specified any locales in your provider, remove them.
The configuration file will take care of that.

```jsx title="src/App.js" copy
import { GTProvider } from "gt-react";
import MyApp from "./MyApp";
import config from "../gt.config.json";  // [!code highlight]

export default function App() {
  return (
    {/* [!code highlight] */}
    <GTProvider {...config}> 
      <MyApp />
    </GTProvider> 
  );
}
```

## Step 4: Add the translate command to your build script 🏗️

The last step is to add the [translate command](/docs/cli/translate) to your build script.
Make sure that the translate command comes before the build command.

```json title="package.json" copy
{
  "scripts": {
    "build": "npx gtx-cli translate && <...YOUR_BUILD_COMMAND...>"
  }
}
```

That's it! You are now ready to deploy your react app with GT!

---

## Next steps
 * See the [CLI docs](/docs/cli/tutorials/quickstart) for more information on the CLI tool.
 * Learn how to [Translate Strings](/docs/react/reference/translating-strings).
 * Learn about the [`<T>` component](/docs/usage/t).



---
title: React Quickstart
description: Easily internationalize your React App with gt-react
---

## Overview
Source: https://generaltranslation.com/en/docs/react/tutorials/quickstart

This guide describes how to internationalize an existing [React](https://react.dev) project.

We will cover 4 simple steps:

<Steps>
  <Step>
    Running the setup wizard
  </Step>
  <Step>
    Adding the GTProvider
  </Step>
  <Step>
    Adding environment variables
  </Step>
  <Step>
    Cleaning up strings
  </Step>
</Steps>


---

### 1. Running the setup wizard

The setup wizard will walk you through the process of internationalizing your project.

```bash
npx gtx-cli@latest init
```

To manually setup your project, follow the [manual setup guide](#manual-setup).

The setup wizard will:

1. Install the required libraries.
2. Configure your project's supported locales.
3. Wrap your project's JSX components with the `<T>` component.
4. Generate a production API key and project ID for your project.

See the [setup wizard docs](/docs/cli/init) for more information.

### 2. Adding the GTProvider

Add the [`<GTProvider>`](/docs/react/api/components/gtprovider) component to your app.
Spread the config JSON object into the `config` prop.

```jsx title="App.js" copy
import { GTProvider } from "gt-react";
import MyApp from "./MyApp";
import config from "./gt.config.json";

export default function App() {
  return (
    // [!code highlight]
    <GTProvider {...config}> 
      <MyApp />
    </GTProvider> // [!code highlight]
  );
}
```

<Callout>
  For some React frameworks, the setup wizard will automatically add the GTProvider to your app.
  If this is the case, you can skip this step.
</Callout>

### 3. Adding environment variables 

The setup wizard will create a `.env.local` file for you in the root of your project containing your production API key and project ID.

However, in order to use `gt-react` in development mode, you will need to add a development API key instead of a production one.


<Steps>
    <Step>
        Navigate to the [Dashboard](https://generaltranslation.com/dashboard).
            * Navigate to the **Developer Keys** page in the sidebar.
    </Step>

    <Step>
        Click **Create Dev API Key** then copy the API key and Project ID to your clipboard.
    </Step>
    <Step>
        Add the Project ID and API Key to your environment variables.
        Depending on your React framework, the environment variables may look slightly different.
        These instructions are for **DEVELOPMENT ENVIRONMENTS ONLY**.
        <Tabs items={["Vite", "Next.js Pages Router", "Gatsby", "RedwoodJS",  "create-react-app", "Other"]}>
            <Tab value="Vite">
            ```bash copy
            VITE_GT_API_KEY="YOUR_GT_DEV_API_KEY"
            VITE_GT_PROJECT_ID="YOUR_GT_PROJECT_ID"
            ```
            </Tab>
            <Tab value="Gatsby">
            ```bash copy
            GATSBY_GT_API_KEY="YOUR_GT_DEV_API_KEY"
            GATSBY_GT_PROJECT_ID="YOUR_GT_PROJECT_ID"
            ```
            </Tab>
            <Tab value="RedwoodJS">
            ```bash copy
            REDWOOD_ENV_GT_API_KEY="YOUR_GT_DEV_API_KEY"
            REDWOOD_ENV_PROJECT_ID="YOUR_GT_PROJECT_ID"
            ```
            </Tab>
            <Tab value="Next.js Pages Router">
            ```bash copy
            NEXT_PUBLIC_GT_API_KEY="YOUR_GT_DEV_API_KEY"
            NEXT_PUBLIC_GT_PROJECT_ID="YOUR_GT_PROJECT_ID"
            ```
            </Tab>
            <Tab value="create-react-app">
            ```bash copy
            REACT_APP_GT_API_KEY="YOUR_GT_DEV_API_KEY"
            REACT_APP_GT_PROJECT_ID="YOUR_GT_PROJECT_ID"
            ```
            </Tab>
            <Tab value="Other">
            Many react frameworks each have a unique way of exporting environment variables to the client.
            In development environments, both `GT_API_KEY` and `GT_PROJECT_ID` need to be exported to the client.

            We have added support for a few libraries so far,
            but please let us know if your framework is not listed by creating an issue on our [GitHub repository](https://github.com/generaltranslation/gt/issues/new).
            </Tab>
        </Tabs>
    </Step>
</Steps>
<Callout type="warn">
    **Protect Your API Keys!**

    React environment variables are often bundled into your application at build time and are publicly visible in the client-side code.
    For security reasons, you should:
    
    - Only use development API keys during local development
    - Only use production API keys with the CLI tool for deployment
    - **Never include any API keys as environment variables in production**
</Callout>


### 4. Cleaning up strings

The setup wizard will wrap all of your project's JSX components with the `<T>` component.
However, you may notice that strings are unaffected.

For example, if you have a string constant like this:

```jsx title="Example.js" copy
export default function Example() {
  const greeting = "Hello, world!";
  return <p>{greeting}</p>;
}
```

The setup wizard will not touch this string.

To fix this, you can use the [`useGT()`](/docs/react/api/strings/useGT) hook to translate the string.

```jsx title="Example.js" copy
import { useGT } from "gt-react";
export default function Example() {
  const t = useGT();
  return <p>{t("Hello, world!")}</p>;
}
```

---

## Let's try it out!

Congratulations! 🥳 Your app is now multilingual! Let's see it in action.

### See Your App in a Different Language

<Steps>
  <Step>
    Add the [`<LocaleSelector>`](/docs/react/api/components/localeSelector) component to your app.
    This will allow you to select a different language for your app.
    <Callout>
      **Tip:**
      You can also change your language in your browser settings.
    </Callout>
  </Step>
  <Step>
    Start your React app in development mode.
    <Tabs items={["npm", "yarn", "bun", "pnpm"]}>
      <Tab value="npm">
      ```bash
      npm run dev 
      ```
      </Tab>
      <Tab value="yarn">
      ```bash 
      yarn run dev 
      ```
      </Tab>
      <Tab value="bun">
      ```bash
      bun run dev 
      ```
      </Tab>
      <Tab value="pnpm">
      ```bash
      pnpm run dev 
      ```
      </Tab>
    </Tabs>
  </Step>
  <Step>
    Open up your app in your preferred browser (usually at
    [http://localhost:3000](http://localhost:3000)).
  </Step>
</Steps>

### Troubleshooting

<Accordions>
  <Accordion title="My app's language is not changing, even though I've changed my browser's language.">
    **Browser Cookies**

    If you are deciding to test different languages by changing your browser's language, this issue may occur.

    Check your browser's cookies for your app.
    General translation uses cookies to store the user's language preference.
    The cookie is called `generaltranslation.locale`, and all you need to do is delete it.
    Then, just double check you are using the desired perferred language and then
    refresh the page.

    How to check cookies:
    * [Chrome](https://support.google.com/chrome/answer/95647)
    * [Firefox](https://support.mozilla.org/en-US/kb/delete-cookies-remove-info-websites-stored)
    * [Safari](https://support.apple.com/en-mn/guide/safari/sfri11471/16.0/mac/11.0)
    * [Edge](https://support.microsoft.com/en-us/microsoft-edge/delete-cookies-in-microsoft-edge-63947406-40ac-c3b8-57b9-2a946a29ae09)

    If this does not work, make sure that the list of locales in your [`<GTProvider>`](/docs/react/api/components/gtprovider) is up to date.
  </Accordion>
  <Accordion title="Why do new languages take a long time to load?">
    **On-Demand Translation**

    You may notice when loading languages in development, translations will take a few seconds to be displayed.
    This happens because your app is being translated in real time.
    We refer to this process as an "on-demand translation".
    
    This **only happens in dev** so you can easily prototype your website in different languages.
    All translations are preloaded in production, so there will be no delay.
    Follow our guide on [shipping to production](/docs/next/tutorials/quickdeploy).
  </Accordion>
  <Accordion title="Why are some things translating and others not?">
    **JSX Translation**

    Right now, the setup tool automatically adds `<T>` components around text content.
    We are currently working on a solution that will automatically setup string translations.
    Until then, if you are rendering a string, please follow [this guide](/docs/react/reference/translating-strings) for translating strings.
  </Accordion>
  <Accordion title="Why are some translations inaccurate?">
    The most likely cause of an inaccurate translation is ambiguous wording.
    For example, "apple" can be a fruit or a technology company.

    To fix this, you can provide more context to the translation with the `context` prop.
    The [`<T>`](/docs/react/api/components/t) and [`useGT()`](/docs/react/api/strings/useGT) functions support a `context` prop.
    For example:
    ```jsx
    <T context="the technology company">Apple</T>
    ```    
  </Accordion>
</Accordions>

---

## Shipping to Production

Follow our guide on [shipping to production](/docs/react/tutorials/quickdeploy).

---

## Next steps
 * See our [React API reference](/docs/react/api/components/t) for detailed information about the `<T>` component and other available components.


## Manual Setup [#manual-setup]

If you prefer to do the setup manually, follow the steps below.

### 1. Install libraries

Install the [gt-react](https://www.npmjs.com/package/gt-react) and [gtx-cli](https://www.npmjs.com/package/gtx-cli) libraries.

<Tabs items={["npm", "yarn", "bun", "pnpm"]}>
  <Tab value="npm">
  ```bash 
  npm i gt-react
  npm i gtx-cli --save-dev
  ``` 
  </Tab>
  <Tab value="yarn">
  ```bash 
  yarn add gt-react
  yarn add gtx-cli --dev
  ```
  </Tab>
  <Tab value="bun">
  ```bash 
  bun add gt-react
  bun add -d gtx-cli
  ```
  </Tab>
  <Tab value="pnpm">
  ```bash 
  pnpm add gt-react
  pnpm add -D gtx-cli
  ```
  </Tab>
</Tabs>


### 2. Select languages

[`<GTProvider>`](/docs/react/api/components/gtprovider) is used to configure the behavior of `gt-react`. 
It should be placed as high up in your app as possible, ideally at the root.

Just pass a list of [locale codes](/docs/reference/locale-strings#supported-locales) to add them to your app.

```jsx title="App.js" copy
import { GTProvider } from "gt-react";
import MyApp from "./MyApp";

export default function App() {
  return (
    // French and Chinese support 
    // [!code highlight]
    <GTProvider locales={['fr', 'zh']}> 
      <MyApp />
    </GTProvider> // [!code highlight]
  );
}
```

For a full list of `<GTProvider>` props and extended documentation, see the [API reference](/docs/react/api/components/gtprovider).

### 3. Add the `<T>` component

Wrap any nested JSX content in the [`<T>` component](/docs/react/api/components/t) to make it translatable.
For more information, check out the [guide on using `<T>` components](/docs/react/reference/t-reference).

```jsx title="Example.js" copy
import { T } from "gt-react";

export default function Example() {
  return (
    // [!code highlight]
    <T>
      <p>
        This gets translated.
      </p>
    </T>  // [!code highlight]
  );
}
```

Use the [`<Var>` component](/docs/react/api/components/var) to designate JSX content that should not be translated.

```jsx title="Example.js" copy
import { T, Var } from "gt-react";

export default function Example() {
  return (
    // [!code highlight]
    <T>
      <p>
        This gets translated. <Var>This does not.</Var>
      </p>
    </T>  // [!code highlight]
  );
}
```

For strings, you can use [`useGT()`](/docs/react/api/strings/useGT) for translation.

```jsx title="Example.js" copy
import { useGT } from "gt-react";

export default function Example() {
  const t = useGT(); // [!code highlight]
  return (
    <p>
      {/* [!code highlight] */}
      {t("This gets translated.")}
    </p>
  );
}
```

### 4. Add your environment variables

Add your API key and Project ID to your environment variables.

<Steps>
    <Step>
        Navigate to the [Dashboard](https://generaltranslation.com/dashboard).
            * Navigate to the **Developer Keys** page in the sidebar.
    </Step>

    <Step>
        Click **Create Dev API Key** then copy the API key and Project ID to your clipboard.
    </Step>
    <Step>
        Add the Project ID and API Key to your environment variables.
        Depending on your React framework, the environment variables may look slightly different.
        These instructions are for **DEVELOPMENT ENVIRONMENTS ONLY**.
        <Tabs items={["Vite", "Next.js Pages Router", "Gatsby", "RedwoodJS",  "create-react-app", "Other"]}>
            <Tab value="Vite">
            ```bash copy
            VITE_GT_API_KEY="YOUR_GT_DEV_API_KEY"
            VITE_GT_PROJECT_ID="YOUR_GT_PROJECT_ID"
            ```
            </Tab>
            <Tab value="Gatsby">
            ```bash copy
            GATSBY_GT_API_KEY="YOUR_GT_DEV_API_KEY"
            GATSBY_GT_PROJECT_ID="YOUR_GT_PROJECT_ID"
            ```
            </Tab>
            <Tab value="RedwoodJS">
            ```bash copy
            REDWOOD_ENV_GT_API_KEY="YOUR_GT_DEV_API_KEY"
            REDWOOD_ENV_PROJECT_ID="YOUR_GT_PROJECT_ID"
            ```
            </Tab>
            <Tab value="Next.js Pages Router">
            ```bash copy
            NEXT_PUBLIC_GT_API_KEY="YOUR_GT_DEV_API_KEY"
            NEXT_PUBLIC_GT_PROJECT_ID="YOUR_GT_PROJECT_ID"
            ```
            </Tab>
            <Tab value="create-react-app">
            ```bash copy
            REACT_APP_GT_API_KEY="YOUR_GT_DEV_API_KEY"
            REACT_APP_GT_PROJECT_ID="YOUR_GT_PROJECT_ID"
            ```
            </Tab>
            <Tab value="Other">
            Many react frameworks each have a unique way of exporting environment variables to the client.
            In development environments, both `GT_API_KEY` and `GT_PROJECT_ID` need to be exported to the client.

            We have added support for a few libraries so far,
            but please let us know if your framework is not listed by creating an issue on our [GitHub repository](https://github.com/generaltranslation/gt/issues/new).
            </Tab>
        </Tabs>
    </Step>
</Steps>
<Callout type="warn">
    **Protect Your API Keys!**

    React environment variables are often bundled into your application at build time and are publicly visible in the client-side code.
    For security reasons, you should:
    
    - Only use development API keys during local development
    - Only use production API keys with the CLI tool for deployment
    - **Never include any API keys as environment variables in production**
</Callout>



---
title: Examples
description: Example projects using General Translation
---

This is a list of example projects using General Translation.

## Next.js
Source: https://generaltranslation.com/en/docs/reference/examples

### Create Next.js App
- [Source](https://github.com/generaltranslation/gt/tree/main/examples/next-create-app)
- [Demo](https://next-create-app-eight.vercel.app/)

### Next.js AI Chatbot
- [Source](https://github.com/generaltranslation/gt/tree/main/examples/next-chatbot)
- [Demo](https://example-ai-chatbot-ten.vercel.app/)

## React

### Create Vite App
- [Source](https://github.com/generaltranslation/gt/tree/main/examples/vite-create-app)
- [Demo](https://example-vite-create-app.vercel.app/)

---
title: Locale Strings
description: How to interpret locale strings in GT
---


## Overview
Source: https://generaltranslation.com/en/docs/reference/locale-strings

General Translation uses a variant of the [BCP 47 Language Tag standard](https://www.techonthenet.com/js/language_tags.php) to represent locales and languages.
BCP 47 Language Tags are the Internet Best Current Practices (BCP) standard for identifying languages in both spoken and written forms.
These tags provide a uniform way to specify languages, allowing applications to adapt content, format, and behavior based on the user's locale.

Language tags are composed of one or more subtags separated by the `"-"` character. The subtags include the following components:

- **Language Subtag**: Represents the primary language, e.g., `en` for English, `es` for Spanish.
- **Region Subtag**: Specifies a country or region, e.g., `US` for the United States, `FR` for France.
- **Script Subtag** (optional): Indicates the writing script, e.g., `Latn` for Latin script.
- **Variant Subtag** (optional): Identifies a specific variation of a language, e.g., `arevela` for Eastern Armenian.

When you combine these tags together, we refer to this as a **Locale** or **Locale tag**.

### Commonly Used Tags

In practice, most language tags consist of two subtags: a language and a region. Here are some common examples:

| Language Tag | Description                |
|--------------|----------------------------|
| `en-US`      | English as used in the US  |
| `es-ES`      | Spanish as used in Spain   |
| `fr-CA`      | French as used in Canada   |
| `zh-CN`      | Simplified Chinese (China) |
| `de-DE`      | German as used in Germany  |

### Extended Tags

Language tags can include additional subtags for more specificity:

- **Example**: `hy-Latn-IT-arevela`
  - `hy`: Armenian (language)
  - `Latn`: Latin (script)
  - `IT`: Italy (region)
  - `arevela`: Eastern Armenian (variant)

This tag represents Eastern Armenian written in Latin script, as used in Italy.

## Exceptions to BCP 47 in GT

🚧 This section is currently under construction. 🚧

## Notes
 * General Translations uses **Locale Tags (Locales)** to identify languages and regions internally.

## Next Steps
 * See our [List of Supported Locales](/docs/reference/locale-strings#supported-locales) to find the language tags available in General Translation.
 * Refer to the official [IETF Language Tag Registry](https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry)
   and the [BCP 47 Language Tag standard](https://www.techonthenet.com/js/language_tags.php) for more information.


---
title: Open Source
description: General Translation libraries are open source!
---


## Overview
Source: https://generaltranslation.com/en/docs/reference/standalone

All of our libraries are open source and free to use. They work fully standalone, out of the box.

You can use them in any project, without needing to ever create an account or sign up for General Translation services.

Standalone, our libraries support the following features:

- Wrapping entire React components for translation
- Dictionaries
- Easy project setup
- Middleware

Using General Translation as a translation provider will unlock the following features:

- On-demand translation
- Automatic AI translations
- A no-hassle translation CDN

## How to use

To use `gt-next` or `gt-react` with your own translation provider, use local translations:

<Cards>
  <Card
    title="Next.js"
    href="/docs/next/reference/local-tx"
  />
  <Card
    title="React"
    href="/docs/react/reference/local-tx"
  />
</Cards>

## Managing translations

To generate the translation files for your project, run the CLI tool with the following command:

```bash
npx gtx-cli configure # Configure your project
npx gtx-cli generate # Generate the translation files
```

This command will generate the JSON data files for your project's source code. 
You can then use these files with your own translation provider.
To load the translations into `gt-next` or `gt-react`, use the `loadTranslations` function, as specified in
the local translations guide.

See the [CLI API reference](/docs/cli/generate) for more information.


---
title: Supported Languages
description: List of currently supported languages for translation
---


## Overview
Source: https://generaltranslation.com/en/docs/reference/locale-strings#supported-locales

This page lists all languages and corresponding [locale strings](/docs/reference/locale-strings) that are currently supported by General Translation (GT).

Our system leverages some of the most advanced LLM models on the market to provide accurate translations;
however, these models are not without their limitations.
Certain resource languages may not be supported by the model provider you have selected or any of the available providers.
These languages are known as "low-resource languages".

Low-resource languages can vary between models, so if you specify a preferred model provider in your configuration, you may want to check the list of supported languages for that provider.


## Supported Languages

<SupportedLocales />

## Next Steps
 * Learn more about how we represent locales using [Locale Strings](/docs/reference/locale-strings).

---
title: Terminology
description: A guide to the key terminology used in the General Translation libraries
---

## Overview
Source: https://generaltranslation.com/en/docs/reference/terminology

Throughtout these docs, we use a variety of terminology to describe the different concepts used in the General Translation libraries.

This page highlights some of the key terminology we use.


## Key Terminology

<TOC/>

### Locale

A locale is a code used to identify a specific language.

See the [locale strings](/docs/reference/locale-strings) page for a more detailed explanation.

For example, `en-US` is the locale for English (United States).

Throughout these docs, we often use the term "locale" and "language code" interchangeably.

### Language

When we refer to a language in the context of using it with code, we actually mean the locale. (Or the language code)

For example, when we say "provide the language in the call to `setLocale`", we actually mean "provide the locale in the call to `setLocale`".

If we say "French is a supported language", we actually mean "`fr` is a supported locale".


### Dictionary

A dictionary is a JSON file that contains a set of (potentially nested) key-value pairs.

The keys are used as references, and the values are strings, either in the original language or in a translated language.

```json
{
  "greeting": "Hello, World!",
  "farewell": "Goodbye, World!",
  "dashboard": {
    "title": "Dashboard",
    "description": "Welcome to the dashboard"
  }
}
```

The keys are human-readable references which are used to look up the translated content within your app.

These dictionaries are conventional in structure and usage, similar to translation files in other i18n libraries.


<Callout type="info">
  A source dictionary can also be a `.js` or `.ts` file, meaning it can import from other files.
  A dictionary containing translated content can only be a `.json` file.
</Callout>

#### Source Dictionary

A source dictionary is a dictionary that contains content in the default locale for your app.

#### Translated Dictionary

A translated dictionary is a dictionary that contains content in a specific locale that is different from the default locale.

The keys are the same as the source dictionary, and the values are the translated strings.

If you have your own translated dictionaries, you can load them using the `loadDictionary()` function.

### In-line content

In-line content is content that is written directly in your app's code, and not stored separately in something like a JSON or dictionary file.

This includes:

- `<T>` components
- `useGT` hooks
- `getGT` function


### Source Content

Source content is the content in the default locale for your app. It includes anything written in your app's default language.

Specifically for `gt-next`, and `gt-react`, source content includes all of the translatable content for your app, including your app's source dictionary and
any in-line content.

### Source Template

Source template refers to the specific data format for storing source content.

```json
{
  ["Unique identifier for the source content"]: "...Content..."
}
```

The unique identifier for the source content is either a hash of the source content, or a user-defined unique identifier.

Depending on the type of the source content, the corresponding value can be a string, array, or an object. (Strings and arrays for dictionaries, and objects for `<T>` components)


### Translations

Throughout these docs, we use the noun "translations" to refer to the translated content obtained from translating source content.

Translations are generated directly from your source template.

The `loadTranslations()` function allows you to customize the location where these translations are stored. This function expects the JSONs to be of the same format as the source template.

Use the [CLI `generate` command](/docs/cli/generate) to generate these data files from your source content.

<Callout type="warn">
  **Note:**

  It's important to note that a translation is _different_ from a translated dictionary. Dictionaries are potentially nested, and contain human-readable references as keys.

  Translations, on the other hand, are flat, and likely contain non-human-readable hashes as keys.
</Callout>

**Translations** are what is stored on the GT CDN.

If we use translations in reference to JSON, MDX, or MD files, we are referring to the direct translations of the original source files.




---
title: API Keys
description: How to use API keys with General Translation
---

## Overview
Source: https://generaltranslation.com/en/docs/usage/apikeys

There are two types of API keys used with General Translation:

- **Production API Key**: This is used to translate your content in production.
- **Development API Key**: This is used to translate your content in development.

The behavior between the two types of keys are different, so you should be careful to use the correct key for the environment you are in.

```bash
GT_PROJECT_ID=your-project-id
GT_API_KEY=your-api-key
```

If you are using `gt-next` or `gt-react` as a standalone i18n library, you do not need to use API keys.

---

## How to obtain

<Steps>
    <Step>
        Navigate to your project dashboard on the [General Translation website](https://generaltranslation.com).
    </Step>
    <Step>
        Click on the "API Keys" or "Developer Keys" tab.
    </Step>
    <Step>
        Click on the "Create API Key" button.
    </Step>
    <Step>
        Copy the API key and paste it into your project's `.env` file.
    </Step>
</Steps>

---

## Behavior

Most simply put, Prod API keys persist translations, while Dev API keys do not.
You use Dev API keys for prototyping translations and Prod API keys when you are ready to deploy.

### Development API Key

This type of key is useful for testing and development purposes.
When using a development API key, translations are done on-demand and memoized in memory. 
Translations **will not be saved**.

The development API key is used by components rendered in the browser (client-side) and by server-side rendered components to facilitate on-demand translation.
This means that it must be exported to the client.
This key should NEVER be used in production environments and NEVER should be passed to the client in a production environment.

```bash
# example Vite .env file for dev
VITE_GT_PROJECT_ID=your-project-id
VITE_GT_API_KEY=your-dev-api-key # Only used in development
```

<Callout type="warn">
  **Warning:**
  Development API keys are passed to the client to facilitate client-side translation in development. 
  This is fine in development environments, but is a security risk in production environments.
  If your application is open to the internet, you should never use a development API key.
</Callout>

### Production API Key

When using a production API key, translations **are persisted**.
This means that translations will be saved (either in a CDN or in your app's bundle) to be used at runtime.

This key is used in two places:
 * The [`gtx-cli`](/docs/cli) tool. Check out [this guide](/docs/cli/tutorials/quickstart) for more information.
 * The `gt-next` library when translations occur at runtime in a production build (server-side only, not used by `gt-react`).
    * [`<Tx>`](/docs/next/api/components/tx) and [`tx()`](/docs/next/api/strings/tx) functions are used to translate content at runtime.

The API key is only used by the server, and it should NEVER be exported to the client.
```bash
GT_PROJECT_ID=your-project-id
GT_API_KEY=your-prod-api-key # This key should never be exported to the client
```

---

## Notes
 * Development API keys are used for testing and development purposes. It should only be used in development.
 * Production API keys are used for production purposes.

## Next steps
 * Check out how to use [the `<T>` component](/docs/usage/t) to see live translations in development.
 * See the [usage guide](/docs/cli/reference/usage) for the cli tool.

---
title: Dictionaries
description: How to use dictionaries
---

## Overview
Source: https://generaltranslation.com/en/docs/usage/dictionary

Dictionaries are a way to translate string content in General Translation.
All content is stored in a central file and can be accessed using the [`useDict()` hook](/docs/react/api/dictionary/useDict).

If you've used other i18n libraries, you may be familiar with using translation files (`en.json`, `zh.json`, etc.).
Using dictionaries basically syntactically identical except that you only need to maintain one file in your base language.
All translations will be generated by LLMs.

<Callout>
  **Tip**:
  If you are looking for a simpler way to translate string content, we recommend using the [`useGT()` hook](/docs/react/api/strings/useGT).
</Callout>

---

## Advantages and disadvantages

There are a few advantages to using dictionaries:

1. **Centralized Storage**: Dictionaries store all translatable content in a single file, making it easier to manage and update.
2. **Historical Precedent**: The dictionary pattern is a common design pattern in the industry and is used by many other libraries.

At the same time, it has some disadvantages as well:

1. **Complexity**: Dictionaries are more complex to set up and use than translating string content inline.
2. **Readability**: Dictionaries are less readable than the inline translation because content is separated from the context where it is being used.
3. **Maintainability**: Dictionaries are more difficult to maintain than inline translation because you need to manually update the dictionary file when content changes.

Dictionaries are an alternative design pattern to inline translation, but patterns are supported by our library and are not mutually exclusive.
You can use a dictionary alongside inline translation with [the `<T>` component](/docs/react/api/components/t) and [the `useGT()` hook](/docs/react/api/strings/useGT).

---

## Example

Specify your string content in a dictionary file (either `.js` or `.json`).
```jsx title="src/dictionary.json" copy
{
  "greetings": {
    "hello": 'Hello, World!',
  },
} 
```

Then you reference it in your component by passing the key to the `d()` function.

```jsx title="src/MyComponent" copy
import { GTProvider, useDict } from 'gt-react';
import dictionary from './dictionary.json';

export default function MyComponent() {

  const d = useDict(); // [!code highlight]

  return (
    <GTProvider dictionary={dictionary}>
      <div>
        {d('greetings.hello')} // [!code highlight]
      </div>
    </GTProvider>
  );
}
```

---

## Notes
 * Dictionaries are a way to translate content in General Translation.
 * The [`useDict()` hook](/docs/react/api/dictionary/useDict) is used for translating strings with dictionary pattern.

## Next steps
 * For more information check out the guides on dictionaries for [React](/docs/react/reference/dictionary-reference) or [Next.js](/docs/next/reference/dictionary-reference)


---
title: <T>
description: How to use the <T> component
---

## Overview
Source: https://generaltranslation.com/en/docs/usage/t

The `<T>` component is the primary way to translate content in General Translation.
It can be used alongside dictionaries, or standalone.

The `<T>` component can be used to translate text, HTML, and JSX.

All you need to do is wrap your text in the `<T>` component, and it will be translated.

No additional configuration is required!

```jsx
import { T } from 'gt-react'; // [!code highlight]

export default function MyComponent() {
  return (
    // [!code highlight]
    <T>
      <h1>List of Shakespeare Plays: </h1>
      <ul>
        <li>Hamlet</li>
        <li>A Midsummer Night's Dream</li>
        <li>Macbeth</li>
      </ul>
    </T> // [!code highlight]
  );
}
```


### Our Advice

We recommend using the `<T>` component because of its simplicity especially if you are new to internationalization (i18n).
We offer [dictionaries](/docs/next/reference/dictionary-reference) for those who prefer this design pattern from past experiences or ease of integration with existing code bases.

To learn more, see the specific reference for the corresponding framework:
  
<Cards>
  <Card
    href="/docs/next/reference/t-reference"
    title="Next.js"
  />
  <Card
    href="/docs/react/reference/t-reference"
    title="React"
  />
</Cards>
