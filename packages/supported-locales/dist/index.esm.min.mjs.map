{"version":3,"file":"index.esm.min.mjs","sources":["../src/supportedLocales.ts","../src/index.ts"],"sourcesContent":["const supportedLocales = {\n    \"af\": {}, // Afrikaans\n    \"am\": {}, // Amharic\n    \"ar\": { // Arabic\n        \"ar-AE\": true, // United Arab Emirates\n        \"ar-EG\": true, // Egypt\n        \"ar-LB\": true, // Lebanon\n        \"ar-MA\": true, // Morocco\n        \"ar-SA\": true, // Saudi Arabia\n    },\n    \"bg\": {}, // Bulgarian\n    \"bn\": { // Bengali\n        \"bn-BD\": true, // Bangladesh\n        \"bn-IN\": true, // India\n    },\n    \"bs\": {}, // Bosnian\n    \"ca\": {}, // Catalan\n    \"cs\": {}, // Czech\n    \"cy\": {}, // Welsh\n    \"da\": {}, // Danish\n    \"de\": { // German\n        \"de-AT\": true, // Austria\n        \"de-CH\": true, // Switzerland\n        \"de-DE\": true, // Germany\n    },\n    \"el\": { // Greek\n        \"el-CY\": true, // Cyprus\n        \"el-GR\": true, // Greece\n    },\n    \"en\": { // English\n        \"en-AU\": true, // Australia\n        \"en-CA\": true, // Canada\n        \"en-GB\": true, // United Kingdom\n        \"en-NZ\": true, // New Zealand\n        \"en-US\": true, // United States\n    },\n    \"es\": { // Spanish\n        \"es-419\": true, // Latin America\n        \"es-AR\": true, // Argentina\n        \"es-CL\": true, // Chile\n        \"es-CO\": true, // Colombia\n        \"es-ES\": true, // Spain\n        \"es-MX\": true, // Mexico\n        \"es-PE\": true, // Peru\n        \"es-US\": true, // United States\n        \"es-VE\": true, // Venezuela\n    },\n    \"et\": {}, // Estonian\n    \"fa\": {}, // Persian\n    \"fi\": {}, // Finnish\n    \"fil\": {}, // Filipino\n    \"fr\": { // French\n        \"fr-BE\": true, // Belgium\n        \"fr-CM\": true, // Cameroon\n        \"fr-CA\": true, // Canada\n        \"fr-CH\": true, // Switzerland\n        \"fr-FR\": true, // France\n        \"fr-SN\": true, // Senegal\n    },\n    \"gu\": {}, // Gujarati\n    \"hi\": {}, // Hindi\n    \"he\": {}, // Hebrew\n    \"hr\": {}, // Croatian\n    \"hu\": {}, // Hungarian\n    \"hy\": {}, // Armenian\n    \"id\": {}, // Indonesian\n    \"is\": {}, // Icelandic\n    \"it\": { // Italian\n        \"it-CH\": true, // Switzerland\n        \"it-IT\": true, // Italy\n    },\n    \"ja\": {}, // Japanese\n    \"ka\": {}, // Georgian\n    \"kk\": {}, // Kazakh\n    \"kn\": {}, // Kannada\n    \"ko\": {}, // Korean\n    \"la\": {}, // Latin\n    \"lt\": {}, // Lithuanian\n    \"lv\": {}, // Latvian\n    \"mk\": {}, // Macedonian\n    \"ml\": {}, // Malayalam\n    \"mn\": {}, // Mongolian\n    \"mr\": {}, // Marathi\n    \"ms\": {}, // Malay\n    \"my\": {}, // Burmese\n    \"nl\": { // Dutch\n        \"nl-BE\": true, // Belgium\n        \"nl-NL\": true, // Netherlands\n    },\n    \"no\": {}, // Norwegian\n    \"pa\": {}, // Punjabi\n    \"pl\": {}, // Polish\n    \"pt\": { // Portuguese\n        \"pt-BR\": true, // Brazil\n        \"pt-PT\": true, // Portugal\n    },\n    \"ro\": {}, // Romanian\n    \"ru\": {}, // Russian\n    \"sk\": {}, // Slovak\n    \"sl\": {}, // Slovenian\n    \"so\": {}, // Somali\n    \"sq\": {}, // Albanian\n    \"sr\": {}, // Serbian\n    \"sv\": {}, // Swedish\n    \"sw\": { // Swahili\n        \"sw-KE\": true, // Kenya\n        \"sw-TZ\": true, // Tanzania\n    },\n    \"ta\": {}, // Tamil\n    \"te\": {}, // Telugu\n    \"th\": {}, // Thai\n    \"tl\": {}, // Tagalog\n    \"tr\": {}, // Turkish\n    \"uk\": {}, // Ukrainian\n    \"ur\": {}, // Urdu\n    \"vi\": {}, // Vietnamese\n    \"zh\": { // Chinese\n        \"zh-CN\": true, // China\n        \"zh-HK\": true, // Hong Kong\n        \"zh-SG\": true, // Singapore\n        \"zh-TW\": true, // Taiwan\n    }\n} as {\n    [language: string]: {\n        [locale: string]: true\n    }\n};\n\nexport default supportedLocales;","\nimport supportedLocales from \"./supportedLocales\";\nimport { getLocaleProperties, isValidLocale, standardizeLocale } from \"generaltranslation\";\n\n/**\n * @function getSupportedLocale\n * @description\n * Takes an arbitrary locale string, validates and standardizes it, and then attempts to map it \n * to a supported locale code based on a predefined list of locales. If the exact locale is supported, \n * it returns that locale directly. Otherwise, it attempts to find a compatible fallback by:\n *   1. Checking if the language portion is supported.\n *   2. Checking if a minimized form (e.g. \"en\" for \"en-US\") is supported.\n * If no supported match is found, it returns null.\n * \n * @param {string} locale - The locale string to check (e.g., \"en-Latn-US\").\n * @returns {string | null} A valid supported locale code if matched, otherwise null.\n */\nexport function getSupportedLocale(locale: string): string | null {\n    \n    // Validate and standardize\n    if (!isValidLocale(locale)) return null;\n    locale = standardizeLocale(locale);\n\n    // Check if the exact locale is directly supported\n    if (supportedLocales[locale]) return locale;\n\n    // Check if there's support for the general language code\n    const { \n        languageCode, minimizedCode,\n        regionCode, scriptCode\n    } = getLocaleProperties(locale);\n    if (supportedLocales[languageCode]) {\n        const exactSupportedLocales = supportedLocales[languageCode];\n\n        // If the full locale is supported under this language category\n        if (exactSupportedLocales[locale]) return locale;\n\n        // If a minimized variant of this locale is supported (e.g., \"en\" for \"en-US\")\n        if (exactSupportedLocales[minimizedCode]) return minimizedCode;\n\n        // Attempt to match parts\n        const parts = locale.split('-');\n        if (parts.length > 2) {\n            const languageWithRegion = `${languageCode}-${regionCode}`;\n            if (exactSupportedLocales[languageWithRegion]) return languageWithRegion;\n            const languageWithScript = `${languageCode}-${scriptCode}`;\n            if (exactSupportedLocales[languageWithScript]) return languageWithScript;\n        }\n\n        // No exact or minimized match; fallback to the language code\n        return languageCode;\n    }\n\n    // No match found; return null\n    return null;\n}\n\n/**\n * Generates a sorted list of supported locales.\n * @returns {string[]} A sorted array containing the supported base languages and their specific locales.\n */\nexport function listSupportedLocales(): string[] {\n    const list = [];\n    for (const [language, locales] of Object.entries(supportedLocales)) {\n        list.push(language); // Add the base language\n        list.push(...Object.keys(locales)); // Add each specific locale\n    }\n    return list.sort();\n}"],"names":["supportedLocales","af","am","ar","bg","bn","bs","ca","cs","cy","da","de","el","en","es","et","fa","fi","fil","fr","gu","hi","he","hr","hu","hy","id","is","it","ja","ka","kk","kn","ko","la","lt","lv","mk","ml","mn","mr","ms","my","nl","no","pa","pl","pt","ro","ru","sk","sl","so","sq","sr","sv","sw","ta","te","th","tl","tr","uk","ur","vi","zh","getSupportedLocale","locale","isValidLocale","standardizeLocale","_a","getLocaleProperties","languageCode","minimizedCode","regionCode","scriptCode","exactSupportedLocales","split","length","languageWithRegion","concat","languageWithScript","listSupportedLocales","list","_i","Object","entries","_b","language","locales","push","apply","keys","sort"],"mappings":"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"}