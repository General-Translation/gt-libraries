{"version":3,"file":"index.cjs.min.cjs","sources":["../src/index.ts"],"sourcesContent":["\nimport supportedLocales from \"./supportedLocales\";\nimport { getLocaleProperties, isValidLocale, standardizeLocale } from \"generaltranslation\";\n\n/**\n * @function getSupportedLocale\n * @description\n * Takes an arbitrary locale string, validates and standardizes it, and then attempts to map it \n * to a supported locale code based on a predefined list of locales. If the exact locale is supported, \n * it returns that locale directly. Otherwise, it attempts to find a compatible fallback by:\n *   1. Checking if the language portion is supported.\n *   2. Checking if a minimized form (e.g. \"en\" for \"en-US\") is supported.\n * If no supported match is found, it returns null.\n * \n * @param {string} locale - The locale string to check (e.g., \"en-Latn-US\").\n * @returns {string | null} A valid supported locale code if matched, otherwise null.\n */\nexport function getSupportedLocale(locale: string): string | null {\n    \n    // Validate and standardize\n    if (!isValidLocale(locale)) return null;\n    locale = standardizeLocale(locale);\n\n    // Check if the exact locale is directly supported\n    if (supportedLocales[locale]) return locale;\n\n    // Check if there's support for the general language code\n    const { \n        languageCode, minimizedCode,\n        regionCode, scriptCode\n    } = getLocaleProperties(locale);\n    if (supportedLocales[languageCode]) {\n        const exactSupportedLocales = supportedLocales[languageCode];\n\n        // If the full locale is supported under this language category\n        if (exactSupportedLocales[locale]) return locale;\n\n        // If a minimized variant of this locale is supported (e.g., \"en\" for \"en-US\")\n        if (exactSupportedLocales[minimizedCode]) return minimizedCode;\n\n        // Attempt to match parts\n        const parts = locale.split('-');\n        if (parts.length > 2) {\n            const languageWithRegion = `${languageCode}-${regionCode}`;\n            if (exactSupportedLocales[languageWithRegion]) return languageWithRegion;\n            const languageWithScript = `${languageCode}-${scriptCode}`;\n            if (exactSupportedLocales[languageWithScript]) return languageWithScript;\n        }\n\n        // No exact or minimized match; fallback to the language code\n        return languageCode;\n    }\n\n    // No match found; return null\n    return null;\n}\n\n/**\n * Generates a sorted list of supported locales.\n * @returns {string[]} A sorted array containing the supported base languages and their specific locales.\n */\nexport function listSupportedLocales(): string[] {\n    const list = [];\n    for (const [language, locales] of Object.entries(supportedLocales)) {\n        list.push(language); // Add the base language\n        list.push(...Object.keys(locales)); // Add each specific locale\n    }\n    return list.sort();\n}"],"names":["exports","getSupportedLocale","locale","generaltranslation_1","isValidLocale","standardizeLocale","supportedLocales_1","default","_a","getLocaleProperties","languageCode","minimizedCode","regionCode","scriptCode","exactSupportedLocales","split","length","languageWithRegion","concat","languageWithScript","listSupportedLocales","list","_i","Object","entries","_b","language","locales","push","apply","keys","sort","__importDefault","require"],"mappings":"oEAiBAA,QAsCCC,mBAtCD,SAAmCC,GAG/B,KAAK,EAAAC,EAAaC,eAACF,GAAS,OAAO,KAInC,GAHAA,GAAS,EAAAC,EAAAE,mBAAkBH,GAGvBI,EAAAC,QAAiBL,GAAS,OAAOA,EAG/B,IAAAM,GAGF,EAAAL,EAAAM,qBAAoBP,GAFpBQ,EAAYF,EAAAE,aAAEC,kBACdC,eAAYC,eAEhB,GAAIP,EAAgBC,QAACG,GAAe,CAChC,IAAMI,EAAwBR,EAAAC,QAAiBG,GAG/C,GAAII,EAAsBZ,GAAS,OAAOA,EAG1C,GAAIY,EAAsBH,GAAgB,OAAOA,EAIjD,GADcT,EAAOa,MAAM,KACjBC,OAAS,EAAG,CAClB,IAAMC,EAAqB,GAAAC,OAAGR,EAAgB,KAAAQ,OAAAN,GAC9C,GAAIE,EAAsBG,GAAqB,OAAOA,EACtD,IAAME,EAAqB,GAAAD,OAAGR,EAAgB,KAAAQ,OAAAL,GAC9C,GAAIC,EAAsBK,GAAqB,OAAOA,EAI1D,OAAOT,EAIX,OAAO,IACX,EAMAV,QAOCoB,qBAPD,WAEI,IADA,IAAMC,EAAO,GACqDC,EAAA,EAAhCd,EAAAe,OAAOC,QAAQlB,EAAgBC,SAA/Be,EAAAd,EAAAQ,OAAAM,IAAkC,CAAzD,IAAAG,OAACC,EAAQD,EAAA,GAAEE,EAAOF,EAAA,GACzBJ,EAAKO,KAAKF,GACVL,EAAKO,KAAIC,MAATR,EAAaE,OAAOO,KAAKH,IAE7B,OAAON,EAAKU,MAChB,MAnEkDzB,mBAAA0B,gBAAAC,QAAA,uBACyC9B,EAAA8B,QAAA"}