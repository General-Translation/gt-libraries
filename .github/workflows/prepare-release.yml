name: Prepare Release

on:
  push:
    branches:
      - main
    paths:
      - 'packages/**'
  pull_request:
    branches:
      - main
    paths:
      - 'packages/**'
  workflow_dispatch:
    inputs:
      package_dir:
        description: 'Package directory name (under packages/)'
        required: true
        type: string
      version:
        description: 'Version to set (e.g., patch, minor, major, or specific version like 1.2.3)'
        required: true
        default: 'patch'
        type: string
      release_type:
        description: 'Release type (production, beta, alpha)'
        required: false
        default: 'production'
        type: choice
        options:
          - production
          - beta
          - alpha

jobs:
  detect-changes:
    name: Detect Package Changes
    runs-on: ubuntu-latest
    outputs:
      changed_packages: ${{ steps.changed-packages.outputs.changed_packages }}
      has_changes: ${{ steps.changed-packages.outputs.has_changes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed packages
        id: changed-packages
        run: |
          # Get the files changed between the current commit and the base branch (for PRs)
          # or between the current commit and the previous commit (for pushes to main)
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            git fetch origin ${{ github.base_ref }}
            CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep "^packages/" || true)
          else
            # Look for changes in the last commit to main, not just the most recent commit
            CHANGED_FILES=$(git diff --name-only HEAD^..HEAD | grep "^packages/" || true)
          fi

          # Extract unique package names from changed files
          if [[ -n "$CHANGED_FILES" ]]; then
            PACKAGES=$(echo "$CHANGED_FILES" | grep -o "packages/[^/]*" | sort -u | cut -d/ -f2)
            PACKAGES_JSON=$(echo "$PACKAGES" | jq -R -s -c 'split("\n") | map(select(length > 0))')
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "changed_packages=$PACKAGES_JSON" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "changed_packages=[]" >> $GITHUB_OUTPUT
          fi

  run-ci:
    name: Run CI for Changed Packages
    needs: detect-changes
    if: needs.detect-changes.outputs.has_changes == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: ${{ fromJson(needs.detect-changes.outputs.changed_packages) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: npm run build -- --workspace=packages/${{ matrix.package }}

      # Tests are disabled for now
      # - name: Run tests
      #   run: npm run test -- --workspace=packages/${{ matrix.package }}

  version-bump:
    name: Bump Package Version
    needs: [detect-changes, run-ci]
    if: |
      (needs.detect-changes.outputs.has_changes == 'true' &&
      github.event_name != 'pull_request' &&
      !contains(github.ref, 'version-bump')) ||
      github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: ${{ github.event_name == 'workflow_dispatch' && fromJson(format('["{}"]', github.event.inputs.package_dir)) || fromJson(needs.detect-changes.outputs.changed_packages) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Use a personal access token with repo scope for PR creation
          token: ${{ secrets.GH_PAT || secrets.GITHUB_TOKEN }}
          # Fetch all history for changelog generation
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install commit-and-tag-version
        run: npm install -g commit-and-tag-version

      - name: Configure Git
        run: |
          git config user.name "generaltranslation-bot"
          git config user.email "bot@generaltranslation.com"

      - name: Create branch for version bump
        run: |
          BRANCH_NAME="version-bump/${{ matrix.package }}-$(date +'%Y%m%d%H%M%S')"
          git checkout -b $BRANCH_NAME
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Determine version type
        id: version-type
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.release_type }}" != "production" ]]; then
            RELEASE_TYPE="${{ github.event.inputs.release_type }}"
          else
            RELEASE_TYPE="production"
          fi
          echo "RELEASE_TYPE=$RELEASE_TYPE" >> $GITHUB_ENV

      - name: Prepare version identifier
        id: version-prep
        run: |
          cd packages/${{ matrix.package }}
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_ENV

          # Determine version prefix for non-production releases
          VERSION_PREFIX=""
          if [[ "${{ env.RELEASE_TYPE }}" == "beta" ]]; then
            VERSION_PREFIX="--prerelease beta"
          elif [[ "${{ env.RELEASE_TYPE }}" == "alpha" ]]; then
            VERSION_PREFIX="--prerelease alpha"
          fi
          echo "VERSION_PREFIX=$VERSION_PREFIX" >> $GITHUB_ENV

          # Get the current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV

      - name: Bump version
        run: |
          cd packages/${{ matrix.package }}

          # Determine version bump type
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ github.event.inputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-z]+\.[0-9]+)?$ ]]; then
              # Specific version (e.g. 1.2.3 or 1.2.3-beta.1)
              VERSION="${{ github.event.inputs.version }}"
              npm version $VERSION --no-git-tag-version --allow-same-version
              
              # Update changelog manually since we're not using commit-and-tag-version to bump
              if [ ! -f "CHANGELOG.md" ]; then
                echo "# Changelog" > CHANGELOG.md
              fi
              DATE=$(date +"%Y-%m-%d")
              
              # Get all commits since the last tag for the package
              LAST_COMMIT=$(git log -n 1 --format=format:%H -- .)
              COMMITS=$(git log --format="* %s (%h)" $LAST_COMMIT~10..$LAST_COMMIT -- .)
              
              # Insert new version at the top of the changelog
              sed -i "1s/# Changelog/# Changelog\n\n## $VERSION ($DATE)\n\n$COMMITS\n/" CHANGELOG.md
            else
              # Bump using npm semver keyword (patch, minor, major)
              VERSION_TYPE="${{ github.event.inputs.version }}"
              commit-and-tag-version --config ../../.versionrc.json --release-as $VERSION_TYPE ${{ env.VERSION_PREFIX }} --path .
            fi
          else
            # Default to patch version bump for automated CI
            commit-and-tag-version --config ../../.versionrc.json --release-as patch ${{ env.VERSION_PREFIX }} --path .
          fi

          # Get the new version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Commit changes
        run: |
          git add packages/${{ matrix.package }}/package.json
          git add packages/${{ matrix.package }}/CHANGELOG.md
          git commit -m "chore(release): bump ${{ env.PACKAGE_NAME }} to version ${{ env.NEW_VERSION }}"
          git push origin ${{ env.BRANCH_NAME }}

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GH_PAT || secrets.GITHUB_TOKEN }}
          branch: ${{ env.BRANCH_NAME }}
          base: main
          title: 'chore(release): bump ${{ env.PACKAGE_NAME }} to version ${{ env.NEW_VERSION }}'
          body: |
            This PR bumps the version of `${{ env.PACKAGE_NAME }}` to prepare for a new release.

            ## Changes
            - Bump version from ${{ env.CURRENT_VERSION }} to ${{ env.NEW_VERSION }}
            - Update CHANGELOG.md with recent commits
            - Release type: ${{ env.RELEASE_TYPE }}

            This PR was automatically created by the CI workflow.
          labels: version-bump, automated-pr
          draft: false
