name: Prepare Releases

on:
  push:
    branches:
      - main
    paths:
      - 'packages/**'
  workflow_dispatch:
    inputs:
      package:
        description: 'Package directory name (under packages/)'
        required: false
        type: string
      release_type:
        description: 'Release type'
        required: false
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      npm_tag:
        description: 'NPM tag (overrides automatic detection)'
        required: false
        type: choice
        options:
          - auto
          - latest
          - alpha
          - beta
          - rc
        default: 'auto'

jobs:
  release-please:
    name: Release Please
    runs-on: ubuntu-latest
    outputs:
      releases_created: ${{ steps.release.outputs.releases_created }}
      paths_released: ${{ steps.release.outputs.paths_released }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for manual package selection
        id: check-manual
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.package != ''
        run: |
          echo "Manually selected package: ${{ github.event.inputs.package }}"
          echo "Using release type: ${{ github.event.inputs.release_type || 'patch' }}"

      - name: Release Please
        id: release
        uses: googleapis/release-please-action@v4
        with:
          token: ${{ secrets.GH_PAT }}
          command: ${{ github.event.inputs.release_type != '' && 'release-pr' || github.event_name == 'workflow_dispatch' && 'release-pr' || 'manifest' }}
          default-branch: main
          config-file: release-please-config.json
          manifest-file: .release-please-manifest.json
          release-as: ${{ github.event.inputs.release_type }}
          path: ${{ github.event.inputs.package != '' && format('packages/{0}', github.event.inputs.package) || '' }}
          component: ${{ github.event.inputs.package }}
          monorepo-tags: true
          debug: true

  publish:
    name: Publish Packages
    needs: [release-please]
    if: needs.release-please.outputs.releases_created == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: npm run build

      - name: Determine release tag
        id: release-tag
        run: |
          MANUAL_TAG="${{ github.event.inputs.npm_tag }}"
          PATHS_RELEASED="${{ needs.release-please.outputs.paths_released }}"
          
          # Default to latest tag
          NPM_TAG="latest"
          
          # Use manually specified tag if provided and not "auto"
          if [[ "$MANUAL_TAG" != "" && "$MANUAL_TAG" != "auto" ]]; then
            NPM_TAG="$MANUAL_TAG"
            echo "Using manually specified npm tag: $NPM_TAG"
          else
            # Check for prerelease versions (alpha, beta, rc)
            # This provides a fallback but release-please will handle most of this
            echo "Using default tag: $NPM_TAG"
          fi
          
          echo "npm_tag=$NPM_TAG" >> $GITHUB_OUTPUT
          echo "Released paths: $PATHS_RELEASED"

      - name: Publish to npm
        run: |
          PATHS_RELEASED="${{ needs.release-please.outputs.paths_released }}"
          PATHS_ARRAY=($(echo "$PATHS_RELEASED" | tr ',' '\n'))
          
          echo "Publishing packages"
          
          for PKG_PATH in "${PATHS_ARRAY[@]}"; do
            if [[ -f "$PKG_PATH/package.json" ]]; then
              PKG_NAME=$(node -p "require('./$PKG_PATH/package.json').name")
              echo "Publishing $PKG_NAME with tag ${{ steps.release-tag.outputs.npm_tag }}"
              cd $PKG_PATH
              npm publish --access public --tag ${{ steps.release-tag.outputs.npm_tag }}
              cd - > /dev/null
            fi
          done
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
