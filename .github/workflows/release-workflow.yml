name: Prepare Releases

on:
  push:
    branches:
      - main
    paths:
      - 'packages/**'
  workflow_dispatch:
    inputs:
      package:
        description: 'Package to release (e.g., core, cli)'
        required: false
        type: string
      release_type:
        description: 'Release type'
        required: false
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      npm_tag:
        description: 'NPM tag'
        required: false
        type: choice
        options:
          - latest
          - alpha
          - beta
          - rc
        default: 'latest'

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  release-please:
    runs-on: ubuntu-latest
    outputs:
      releases_created: ${{ steps.release.outputs.releases_created }}
      paths_released: ${{ steps.release.outputs.paths_released }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Workflow dispatch for manual release
      - name: Manual release
        id: manual-release
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.package != ''
        run: |
          echo "Manual release requested for package: ${{ github.event.inputs.package }}"
          echo "Release type: ${{ github.event.inputs.release_type }}"
          echo "NPM tag: ${{ github.event.inputs.npm_tag }}"

      # Run release-please action
      - uses: googleapis/release-please-action@v4
        id: release
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          release-type: node
          config-file: release-please-config.json
          manifest-file: .release-please-manifest.json
          command: ${{ github.event.inputs.package != '' && 'release-pr' || 'manifest' }}
          path: ${{ github.event.inputs.package != '' && format('packages/{0}', github.event.inputs.package) || '' }}
          component: ${{ github.event.inputs.package != '' && github.event.inputs.package || '' }}
          release-as: ${{ github.event.inputs.release_type != '' && github.event.inputs.release_type || '' }}
          monorepo-tags: true

  publish:
    needs: release-please
    if: ${{ needs.release-please.outputs.releases_created }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - run: npm ci
      - run: npm run build

      # Determine which packages to publish
      - name: Determine packages to publish
        id: packages-to-publish
        run: |
          # For workflow dispatch (manual release)
          if [[ -n "${{ github.event.inputs.package }}" ]]; then
            PACKAGE_DIR="packages/${{ github.event.inputs.package }}"
            if [[ -f "$PACKAGE_DIR/package.json" ]]; then
              echo "package_dirs=$PACKAGE_DIR" >> $GITHUB_OUTPUT
              echo "npm_tag=${{ github.event.inputs.npm_tag || 'latest' }}" >> $GITHUB_OUTPUT
            else
              echo "Error: $PACKAGE_DIR/package.json not found"
              exit 1
            fi
          # For automatic release via release-please
          else
            PACKAGE_DIRS=""
            # Parse release-please output to identify which packages were released
            for PKG_DIR in packages/*/; do
              if [[ -f "$PKG_DIR/package.json" ]]; then
                PKG_NAME=$(node -p "require('./$PKG_DIR/package.json').name")
                # Check if this package was released in this run
                if [[ "${{ needs.release-please.outputs.paths_released }}" == *"$PKG_DIR"* ]]; then
                  PACKAGE_DIRS="${PACKAGE_DIRS}${PKG_DIR},"
                  echo "Package to publish: $PKG_NAME ($PKG_DIR)"
                fi
              fi
            done
            
            # Remove trailing comma
            PACKAGE_DIRS=${PACKAGE_DIRS%,}
            echo "package_dirs=$PACKAGE_DIRS" >> $GITHUB_OUTPUT
            echo "npm_tag=latest" >> $GITHUB_OUTPUT
          fi

      # Publish packages
      - name: Publish packages to npm
        if: steps.packages-to-publish.outputs.package_dirs != ''
        run: |
          IFS=',' read -ra DIRS <<< "${{ steps.packages-to-publish.outputs.package_dirs }}"
          for dir in "${DIRS[@]}"; do
            if [[ -f "$dir/package.json" ]]; then
              echo "Publishing $dir with tag ${{ steps.packages-to-publish.outputs.npm_tag }}"
              cd $dir
              npm publish --access public --tag ${{ steps.packages-to-publish.outputs.npm_tag }}
              cd - > /dev/null
            fi
          done
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
